---
title: What I use
date: 2024-12-10
date-format: "DD MMM YYYY"
description-meta: The tools for the job(s)
title-block-banner: "#771C6D"
published-title: Last updated
toc: true
toc-location: left
toc-title: "Contents"
---

This page contains a list of the tools I'm using for research or at home. Most of what I use regularly is free and open source software (FOSS), not because I'm ideological (you'll see some paid apps too), but because FOSS often produces tools that are effective and convenient. As I work in the public sector, the software and hardware I use for policy work tends to be quite different and—frankly—far less productive for me personally as it involves locked-down, expensive enterprise IT that's a long way behind the technological frontier. One of my missions is to unlock the productivity benefits of frontier tech (including FOSS) for the public sector!

## Reading and writing

- *Document writing*. I never got into Microsoft Word. I've had to use it for work a lot and I would struggle to find much good to say about it apart from live editing for multiple people—though the security function in one organisation I worked in asked everyone not to use this feature. I do the majority of my writing for others (including this website and blog) in [Markdown](https://daringfireball.net/projects/markdown/), or [Quarto](https://quarto.org), which is basically also Markdown!
- Some of the benefits of writing in Markdown are that it's intuitive, readable, flexible, future proof, interoperable with many other programmes, and it allows you to focus on content. If I need to get a Word document out of the end, I use either [Pandoc](http://pandoc.org/) or [Quarto](https://quarto.org). With Pandoc, it's a line like
    ```{bash}
    pandoc briefing.md -V geometry:margin=0.2in --standalone \
    --bibliography references.bib --citeproc --csl=harvard.csl -o briefing.docx
    ```

    applied to a file called "briefing.md", a bibtex file of references ("references.bib"), and a citation style (here "harvard.csl"). It's fairly similar to using [Quarto to generate a Word document](https://quarto.org/docs/output-formats/ms-word.html). For more elaborate documents, like a book manuscript, I've created a couple of helper tools like [this quarto template](https://github.com/aeturrell/cookie-cutter-quarto-book-manuscript). 
- *Text editor*. I mostly use Microsoft's [Visual Studio Code](https://code.visualstudio.com/) (with the markdown all in one and markdown preview enhanced extensions) for writing markdown. I've yet to try alternatives such as [Ulysses](http://ulyssesapp.com/), [Marked](http://marked2app.com/), and [Typora](https://typora.io/).
- *Note taking*. I store general notes in Microsoft [OneNote](https://www.onenote.com/) but for single projects that are bigger and more complex (perhaps with many interlocking themes) I now use the truly excellent [Obsidian](https://obsidian.md/). Obsidian is a clean text markdown-based note-taking system that separates the data (markdown files) from the viewer/editor in a way that means you always stay in control of your own data. The downside [Obsidian](https://obsidian.md/) is that you do have to pay if you want a seamless experience across phone, tablet, and computer.
- *Writing papers*. For papers, I still use LaTeX but I've started using [Quarto](https://quarto.org) a lot more. Although Visual Studio Code has a LaTeX editor that's very good, I still use [TeXshop](https://pages.uoregon.edu/koch/texshop/) for LaTeX editing. Co-authors sometimes want to use Overleaf, which I'm not a huge fan of, but does have some useful features and is more accessible as everything is pre-installed and it compiles quickly. Quarto and Markdown have some limitations for writing papers, but now I've learned how to insert figures, tables, *and* numbers in-line into text, so that the paper can be completely updated if the results change, I'm leaning more and more into it.
- *Reading papers*. I store all of my papers in [Zotero](https://www.zotero.org/), which is an open source endeavour. You can support them by paying for their storage. They have a good iPad app too.

## Coding and analysis

- *Version control*. I use git (of course!) and [GitHub](https://github.com/). Occasionally co-authors ask to use Dropbox.
- *Development environment*. I use [Visual Studio Code](https://code.visualstudio.com/) for almost all code, including Python and R. (I wrote a post about how to set it up for R [here](../blog/posts/setting-up-r-in-vscode/index.md).) Some of the extensions I use are autoDocstring, colorize, Excel Viewer, git blame, git graph, git history, gitlens, indent-rainbow, and Jupyter. I also use Docker for development, including the excellent Visual Studio Code docker extensions.
- *Cloud compute*. When I need cloud capabilities, it depends. For anything light-ish that I just want to try in an isolated environment, I might just spin up a ready-built cloud environment using [Github Codespaces](https://github.com/features/codespaces) but for more serious projects I usually go for [Google Cloud](https://cloud.google.com/), connecting via Visual Studio Code remote (instructions in [this post](../blog/posts/visual-studio-code-in-the-cloud/index.md).) I'm excited about how [Google Cloud Workstations](https://cloud.google.com/workstations) might make this all a bit easier for the wider analytical community.
- *Package manager*. To install things sensibly on a Mac, I use [Homebrew](https://brew.sh/). To make the terminal experience a bit nicer, I use [ohmyzsh](https://ohmyz.sh/) along with command line utilities [lsd](https://github.com/lsd-rs/lsd) as a replacement for `ls` and [wget](https://www.gnu.org/software/wget/) for downloads.
- *Programming language*. My default is Python, for a whole host of reasons, with, of course, some SQL. I am a huge convert to [uv](https://docs.astral.sh/uv/) and now use it to build packages and manage research project packages. For more complex projects that require dependencies that are not pure Python (eg the PyMC package) I use the [Miniconda](https://docs.anaconda.com/miniconda/) distribution of Python with its fast extension [Mamba](https://github.com/mamba-org/mamba)[^1].
- *Hardware*. I use a 2021 MacBook Pro with the M1 Max chip, which is inexplicably powerful.
- *Research project template*. Thanks for asking! I just created a cookiecutter template for research projects—you can find it over at [cookiecutter research project](https://github.com/aeturrell/cookiecutter-research-project).

[^1]: I only use the 'conda-forge' channel.

## Communication

- *Email and Calendar*. I use [Spark](https://sparkmailapp.com/) (Mac) for emails, but don't have a fancy calendar app and tend to use Apple's default offering, Calendar. [Fantastical](https://flexibits.com/fantastical) looks interesting but because my schedule is mostly bound to a locked-down version of Outlook, a fancy calendar app isn't all that helpful.
- *Meetings*. For calls, I tend to use Zoom if given a choice but [gather.town](https://www.gather.town/) is more fun for virtual social events.
- *Communicating about analysis*. Recently, I've ended up communicating about papers via WhatsApp, but this is unsatisfactory on multiple levels and if something more serious and sensible were needed I'd probably opt for [slack](https://slack.com/intl/en-gb) or [discord](https://discord.com/). Email tends to be the most common still though.
- *Slide shows*. My preference is to use written notes over slide decks whenever possible (you can read a bit more about why [here](../blog/posts/managing-public-sector-knowledge/managing-public-sector-knowledge.qmd#notes-should-be-the-default-with-microsoft-powerpoint-presentations-only-by-exception)), following the [Amazon model](https://www.managementtoday.co.uk/why-amazon-banned-powerpoint/leadership-lessons/article/1689543). But you need a slide show now and again! If it's leaning toward a general audience and it covers a wide range of topics, I'll typically use [Keynote](https://www.apple.com/uk/keynote/). I know it isn't cross-platform, but you can create something that looks good in it quickly and easily—and you can export every stage of builds to PDF too. For giving talks on research papers, I used to reach for [beamer](https://ctan.org/pkg/beamer) and LaTeX but I now use [Quarto for slides](https://quarto.org/docs/presentations/) because everything can be programmatically re-generated if results change, it plays nicely with code chunks and code execution, and the HTML slides you can create are pretty nice.
- *Website*. I use [Quarto](https://quarto.org/) and [Github pages](https://pages.github.com/), a powerful combination. For the website code, I'm indebted to [Andrew Heiss](https://www.andrewheiss.com/) for making the code for his website available.

## Misc

- For graphics, I normally go for [matplotlib](https://matplotlib.org/), which is so much more powerful than most people realise. All of the graphics in my book [The Star Builders](../thestarbuilders/thestarbuilders.qmd) were created using matplotlib. If I need a manual programme for graphics, I normally use [Inkscape](https://inkscape.org/), which is much better on Mac than it once was.
- I keep track of tasks with the excellent [Things](https://culturedcode.com/things/) (Mac).
- For timing how long I spend on different tasks or projects, I use a combination of [Timery](https://timeryapp.com/) on top of [Toggl](https://toggl.com/).
