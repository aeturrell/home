<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Arthur Turrell</title>
<link>https://www.aeturrell.com/atom.html</link>
<atom:link href="https://www.aeturrell.com/atom.xml" rel="self" type="application/rss+xml"/>
<description>{{&lt; meta description-meta &gt;}}</description>
<generator>quarto-1.5.56</generator>
<lastBuildDate>Mon, 16 Sep 2024 23:00:00 GMT</lastBuildDate>
<item>
  <title>The false economy of bad IT</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://www.aeturrell.com/blog/posts/bad-it/</link>
  <description><![CDATA[ 





<p>Many of us will have experienced bad hardware or software at work. Applications that freeze when you try and do something. A lag when typing. Some programmes ceasing to work before crashing completely. Maybe it’s another kind of performance that makes you want to throw your laptop out of the window: the battery dies after you’ve only been to a couple of meetings, or the text on the screen screen seems teeny tiny if you’re not plugged into a monitor. All of this is very annoying. But, worst of all, it’s a waste of your most precious resource: your time.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://www.aeturrell.com/blog/posts/bad-it/dall_e_laptop_window.webp" class="img-fluid figure-img" style="width:60.0%"></p>
<figcaption class="margin-caption">DALL-E generated image of someone expressing their frustration with their laptop, and window(s)</figcaption>
</figure>
</div>
<p>Employers should care about this because it’s losing them money, particularly if they have staff who use computers for most of their work or their staff are relatively well-paid<sup>1</sup>, or both.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;For the sake of making this concrete, let’s take “well-paid” to mean above the current UK median of £35k.</p></div></div><p>Let’s do a back-of-the-envelope calculation to show why bad IT makes no economic sense. The mid-range hardware used in many organisations looks, at best, like a 1TB SSD, 16GB RAM, i7 touch laptop or touch surface running Windows. As examples of these sorts of machines, a Lenovo ThinkPad model <a href="https://www.lenovo.com/gb/en/p/laptops/thinkpad/thinkpadp/thinkpad-p14s-gen-4-14-inch-intel/21hf000uuk">21HF000UUK</a> and a <a href="https://www.microsoft.com/en-gb/d/surface-pro-9/93vkd8np4fvk?activetab=pivot:overviewtab">Microsoft Surface Pro 9</a> with those specifications are a good fit. The laptop has a 14-inch screen; the surface 13 inches. A quick check shows that these come in at £1600 and £2200 respectively at the time of writing. In my experience, the ThinkPad has a battery life of, at best, 2—3 hours; I’m not sure about the Surface.</p>
<p>Now let’s take a high-end laptop: a <a href="https://www.apple.com/uk/shop/buy-mac/macbook-pro/14-inch-space-grey-apple-m3-chip-with-8-core-cpu-and-10-core-gpu-8gb-memory-512gb">14-inch M3-chip MacBook Pro</a> that can run small large language models locally (!) and has 24GB of RAM plus a 1TB SSD. It’s the same size of hard drive but has 8 extra GB of RAM, which is enough to make a substantial difference to the performance (but, also, <a href="https://www.howtogeek.com/865066/its-okay-to-buy-a-mac-with-only-8-gb-ram/">each GB of RAM is more performant</a> in a Mac.) This is all-important because many of the glitches, pauses, and slowness of less good laptops come down to insufficient RAM. It isn’t simple to compare the processors of these machines, but the Mac is very approximately 30% faster. Without going back and forth on claims about battery life, Mac laptops occupy four of the top six laptops with the best battery life as <a href="https://www.tomsguide.com/best-picks/best-laptops-for-battery-life">listed in Toms Guide</a> and personal experience suggests they go for far longer than 2—3 hours. Our high-end laptop comes in at £2300, an extra £100 or £700 relative to the mid-range ones. Now Macs do not have touchscreens but my observation is that extremely few people use the touch feature on a laptop. My other observation is that high-end laptops have problems once in a blue moon—there’s a crash once every 3 months or so. This is so rare that I take it to be zero.</p>
<p>Let’s say the cheaper hardware has three incidents a day where something glitches, crashes, or goes slow enough to pause a workflow and, on average, this causes three minutes of lost time during each occurrence. This seems entirely reasonable because most people will start doing something else, perhaps making a cup of tea, if their laptop becomes unresponsive for any length of time. Now, imagine the average professional costs a business £60.0k a year (with pension, National Insurance, etc, etc)<sup>2</sup> and works 7.5 hours a day, so 51.0p per working minute. This makes the cost of that lost time around £1200.0 per year, compared to spending only £700 to £100 more to get the higher end laptop.</p>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;To give a sense of what this is as a headline salary, a base salary of £50k and pension of 7% plus National Insurance of £5644 takes the total cost to the employer to £59k.</p></div></div><p>Switching to a higher-end laptop pays off by at least £500.0 just in the first year. For the laptop, it’s worth going high-end for <em>any</em> all-in salary cost above £35.0k (remember, the UK median headline salary cost is £35k). The benefits are likely bigger when looking at a longer period: as far as I’ve been able to tell, mid-range laptops usually last around three years while higher end laptops last more like five years–with <a href="https://www.businessinsider.com/guides/tech/how-long-do-laptops-last">some reports suggesting</a> Apple laptops last longer than this. So the “payoff” from switching might be a few times this.</p>
<p>There are a bunch of other factors here that are hard to estimate. Staff might be more motivated by better IT, and this is hard to quantify. But if staff surveys consistently rate technology as poor, the benefits may be significant. There could be better staff retention, which is worth a lot. But better IT might also discourage some bad behaviour: if people have to deal with a laptop battery that doesn’t last long enough for two meetings in a row, they will either make no notes or start using personal devices to take notes. If people are faced with a laptop or surface that’s too fiddly to use on a train, they simply won’t work when in transit.</p>
<p>On the other hand, there is likely to be a cost to maintaining two or more separate operating systems in an enterprise. Apple laptops use MacOS, a different operating system to the one often installed on ThinkPads, Surfaces, and similar devices, which is Windows. But most organisations have already crossed the Rubicon on this with their use of iPhones for mobiles, and Linux for critical systems. It’s also really poor practice to hitch your organisation to a single provider of software and hardware. You’ll be backed into a corner when negotiating contracts, and may not be able to easily change things up if the software or hardware quality degrades. (It’s notable that frontier tech firms <a href="https://www.quora.com/What-operating-system-do-the-Google-employees-use-How-much-freedom-do-they-have-with-respect-to-an-OS-usage">allow staff to choose</a> between Windows, MacOS, and Linux.) I don’t know how to estimate the cost of maintaining two or more operating systems in an organisation but there are serious downsides to having just one.</p>
<p>I’m not suggesting that organisations should just buy Apple laptops–this is about efficiency, and the best prescription for that is to <strong>allow staff to choose what works best for them</strong>. The apparently economically optimal choice won’t make sense for everyone: some staff might want to stick with mid-range laptops because they get along better with the operating system or laptop design, and that’s okay. By allowing staff to choose what they get on best with you keep them happy, and you make your organisation more productive. The bottom line is that everybody wins when staff have the option to use a higher-end laptop—except, maybe, glaziers.</p>




 ]]></description>
  <category>work chat</category>
  <category>productivity</category>
  <category>public sector</category>
  <guid>https://www.aeturrell.com/blog/posts/bad-it/</guid>
  <pubDate>Mon, 16 Sep 2024 23:00:00 GMT</pubDate>
  <media:content url="https://www.aeturrell.com/blog/posts/bad-it/dall_e_laptop_window.webp" medium="image" type="image/webp"/>
</item>
<item>
  <title>TIL: how to create and work with a MySQL database on Azure</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://www.aeturrell.com/blog/posts/til-sql-database-azure/</link>
  <description><![CDATA[ 





<p>In this TIL, I find out how to create a new <a href="https://dev.mysql.com/">MySQL database</a> on Microsoft Azure. This is a place to store structured, tabular data. Note that the instructions below assume you are using a bash-like terminal, for example <a href="https://ohmyz.sh/">zsh</a>, rather than <a href="https://learn.microsoft.com/en-us/powershell/">Powershell</a>.</p>
<section id="prerequisites" class="level2">
<h2 class="anchored" data-anchor-id="prerequisites">Prerequisites</h2>
<p>You’ll need to sign up for a Microsoft Azure account for this, and create a “resource group”. You’ll also need the Azure Command Line Interface (CLI), which you can find information <a href="https://learn.microsoft.com/en-us/cli/azure/">on here</a>. (Alternatively, you can do this through the <a href="https://portal.azure.com/#home">Azure Portal</a>, but it’s often useful to have the reproducible commands.)</p>
<p>It’s also helpful to understand the lingo and how different bits of the cloud-based SQL setup relate to one another:</p>
<ul>
<li>there is the resource group, which many Azure services could live under</li>
<li>there is a server, which co-ordinates resources</li>
<li>there are individual databases, which live on particular services</li>
</ul>
<p>These three are hierarchical: a database lives on a server that sits under a particular resource group.</p>
<p>You may be wondering why MySQL rather than another type of SQL database? The pricing information is quite difficult to parse, but for hobby projects, it looks like a MySQL database is a lot cheaper than an Azure SQL (MSSQL) database. A basic MySQL database (burstable, b1ms model) is around US$13.00 per month whereas a provisioned Azure SQL database is hundreds of dollars a month. The latter option has a more complex set of options too, though, so there’s more to make a mistake with. So we’ll be going with the open source MySQL in this case.</p>
</section>
<section id="instructions" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="instructions">Instructions</h2>
<section id="creating-a-mysql-server" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-mysql-server">Creating a MySQL server</h3>
<p>First set and load your configs. You’ll need to decide on a login and password for your SQL server.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">resourcegroup</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&lt;&gt;</span></span>
<span id="cb1-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">server</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&lt;&gt;</span></span>
<span id="cb1-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">login</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&lt;&gt;</span></span>
<span id="cb1-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">password</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&lt;&gt;</span></span>
<span id="cb1-5"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">location</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&lt;&gt;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># eg "uksouth"</span></span></code></pre></div>
<p>Then to create the server (with conservative cost settings), it’s</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">az</span> mysql flexible-server create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--location</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$location</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--resource-group</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$resourcegroup</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$server</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--admin-user</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$login</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--admin-password</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$password</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--sku-name</span> Standard_B1ms <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--tier</span> Burstable <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--public-access</span> Enabled <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--version</span> 5.7 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--high-availability</span> Disabled <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--storage-auto-grow</span> Disabled</span></code></pre></div>
</section>
<section id="configure-permissions-to-use-the-sql-server" class="level3">
<h3 class="anchored" data-anchor-id="configure-permissions-to-use-the-sql-server">Configure permissions to use the SQL server</h3>
<p>The default options are cautious on two sets of permissions, the certificate and the IP addresses that are allowed to connect. We need to open these up for your computer.</p>
<p>Go on to Azure portal page for the newly created server and click “configure networking”. Then enable connections from your specific IP address through the firewall (“add current client IP address”). On the same page, there’s an option to download the SSL certificate. Do this, and put it in a secrets folder that is not under version control.</p>
</section>
<section id="connect-to-the-sql-server-using-the-command-line" class="level3">
<h3 class="anchored" data-anchor-id="connect-to-the-sql-server-using-the-command-line">Connect to the SQL server using the command line</h3>
<p>Let’s check that it worked! Assuming you saved the SSL certificate as <code>sql_cert.crt.pem</code> in the <em>same directory in which you are working</em>, you should be able to run the following on the command line:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">mysql</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-h</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$server</span>.mysql.database.azure.com <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-u</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$login</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--ssl-ca=sql_cert.crt.pem"</span></span></code></pre></div>
<p>If you saved the certificate in <code>secrets/</code>, change the path in the above command appropriately.</p>
<p>Note that you may need to regenerate the <code>.pem</code> file from time to time.</p>
<p>Note also that if you are accessing this resource through a VPN or other managed network, this is where you may have difficulties. To circumvent these, you can use a normal internet connection or connect from a virtual machine.</p>
</section>
<section id="working-with-the-sql-database-from-python" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="working-with-the-sql-database-from-python">Working with the SQL database from Python</h3>
<p>Python has a number of great tools for working with SQL databases. For this, we’ll look at just two: <a href="https://dev.mysql.com/doc/connector-python/en/">MySQL Connector</a> and the wonderful <a href="https://ibis-project.org/">Ibis project</a>, which translates across a wide number of data analysis backends.</p>
<p>Just as we did before, we need to plug in our credentials. The syntax is slightly different from bash and it’s recommended to use a secrets manager like <a href="https://github.com/theskumar/python-dotenv">python-dotenv</a> to manage these and ensure they do not get mistakenly committed to version control.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">username <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;</span></span>
<span id="cb4-2">password <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;&gt;</span></span>
<span id="cb4-3">hostname <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"&lt;&gt;.mysql.database.azure.com"</span></span></code></pre></div>
<section id="connecting-and-creating-a-database-with-mysql-connector" class="level4">
<h4 class="anchored" data-anchor-id="connecting-and-creating-a-database-with-mysql-connector">Connecting and creating a database with MySQL Connector</h4>
<p>Next, we start up the connection.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">mydb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mysql.connector.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(</span>
<span id="cb5-2">  host<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hostname,</span>
<span id="cb5-3">  user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>username,</span>
<span id="cb5-4">  password<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>password,</span>
<span id="cb5-5">  ssl_ca<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"secrets/sql_cert.crt.pem"</span>,</span>
<span id="cb5-6">)</span></code></pre></div>
<p>where it’s assumed that the certificate is in a folder called secrets.</p>
<p>If running this works, you won’t see an error message or a confirmation message, but you can check all is as it should be by running:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(mydb)</span></code></pre></div>
<p>which should result in something like:</p>
<pre class="text"><code>&lt;mysql.connector.connection_cext.CMySQLConnection object at 0x3213r4g90&gt;</code></pre>
<p>Now it’s not very exciting to have a SQL server with no databases in. So, next, we’re going to create a database.</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">create_db_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CREATE DATABASE online_movie_rating"</span></span>
<span id="cb8-2">mycursor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mydb.cursor()</span>
<span id="cb8-3">mycursor.execute(create_db_query)</span></code></pre></div>
<p>If you then run</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">mycursor.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Show databases;"</span>)</span>
<span id="cb9-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> db <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> mycursor:</span>
<span id="cb9-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(db)</span></code></pre></div>
<p>you’ll get a list of databases that should include <code>online_movie_rating</code>.</p>
<p>But an empty database is no fun—let’s populate it. First, the table we wish to create:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">create_movies_table_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb10-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">CREATE TABLE movies(</span></span>
<span id="cb10-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    id INT AUTO_INCREMENT PRIMARY KEY,</span></span>
<span id="cb10-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    title VARCHAR(100),</span></span>
<span id="cb10-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    release_year YEAR(4),</span></span>
<span id="cb10-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    genre VARCHAR(100),</span></span>
<span id="cb10-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    collection_in_mil INT</span></span>
<span id="cb10-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">)</span></span>
<span id="cb10-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span></code></pre></div>
<p>And then the execution of that create table command:</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">mydb <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mysql.connector.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(</span>
<span id="cb11-2">  host<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hostname,</span>
<span id="cb11-3">  user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>username,</span>
<span id="cb11-4">  password<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>password,</span>
<span id="cb11-5">  database<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"online_movie_rating"</span>,</span>
<span id="cb11-6">  ssl_ca<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"secrets/sql_cert.crt.pem"</span>,</span>
<span id="cb11-7">)</span>
<span id="cb11-8">mycursor <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mydb.cursor()</span>
<span id="cb11-9">mycursor.execute(create_movies_table_query)</span>
<span id="cb11-10">mydb.commit()</span></code></pre></div>
<p>Note the difference with the earlier command—this one has a <code>database=</code> keyword argument in it.</p>
<p>With the table created, we can also populate it with some data:</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">insert_movies_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb12-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">INSERT INTO movies (title, release_year, genre, collection_in_mil)</span></span>
<span id="cb12-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">VALUES</span></span>
<span id="cb12-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("Forrest Gump", 1994, "Drama", 330.2),</span></span>
<span id="cb12-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("3 Idiots", 2009, "Drama", 2.4),</span></span>
<span id="cb12-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("Eternal Sunshine of the Spotless Mind", 2004, "Drama", 34.5),</span></span>
<span id="cb12-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("Good Will Hunting", 1997, "Drama", 138.1),</span></span>
<span id="cb12-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("Skyfall", 2012, "Action", 304.6),</span></span>
<span id="cb12-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("Gladiator", 2000, "Action", 188.7),</span></span>
<span id="cb12-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("Black", 2005, "Drama", 3.0),</span></span>
<span id="cb12-11"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("Titanic", 1997, "Romance", 659.2),</span></span>
<span id="cb12-12"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("The Shawshank Redemption", 1994, "Drama",28.4),</span></span>
<span id="cb12-13"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("Udaan", 2010, "Drama", 1.5),</span></span>
<span id="cb12-14"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("Home Alone", 1990, "Comedy", 286.9),</span></span>
<span id="cb12-15"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("Casablanca", 1942, "Romance", 1.0),</span></span>
<span id="cb12-16"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("Avengers: Endgame", 2019, "Action", 858.8),</span></span>
<span id="cb12-17"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("Night of the Living Dead", 1968, "Horror", 2.5),</span></span>
<span id="cb12-18"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("The Godfather", 1972, "Crime", 135.6),</span></span>
<span id="cb12-19"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("Haider", 2014, "Action", 4.2),</span></span>
<span id="cb12-20"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("Inception", 2010, "Adventure", 293.7),</span></span>
<span id="cb12-21"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("Evil", 2003, "Horror", 1.3),</span></span>
<span id="cb12-22"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("Toy Story 4", 2019, "Animation", 434.9),</span></span>
<span id="cb12-23"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("Air Force One", 1997, "Drama", 138.1),</span></span>
<span id="cb12-24"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("The Dark Knight", 2008, "Action",535.4),</span></span>
<span id="cb12-25"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("Bhaag Milkha Bhaag", 2013, "Sport", 4.1),</span></span>
<span id="cb12-26"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("The Lion King", 1994, "Animation", 423.6),</span></span>
<span id="cb12-27"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("Pulp Fiction", 1994, "Crime", 108.8),</span></span>
<span id="cb12-28"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("Kai Po Che", 2013, "Sport", 6.0),</span></span>
<span id="cb12-29"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("Beasts of No Nation", 2015, "War", 1.4),</span></span>
<span id="cb12-30"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("Andadhun", 2018, "Thriller", 2.9),</span></span>
<span id="cb12-31"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("The Silence of the Lambs", 1991, "Crime", 68.2),</span></span>
<span id="cb12-32"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("Deadpool", 2016, "Action", 363.6),</span></span>
<span id="cb12-33"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    ("Drishyam", 2015, "Mystery", 3.0)</span></span>
<span id="cb12-34"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb12-35">mycursor.execute(insert_movies_query)</span>
<span id="cb12-36">mydb.commit()</span></code></pre></div>
<p>Let’s see if we can retrieve some of this:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">select_movies_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM movies LIMIT 5"</span></span>
<span id="cb13-2">mycursor.execute(select_movies_query)</span>
<span id="cb13-3">result <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mycursor.fetchall()</span>
<span id="cb13-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> row <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> result:</span>
<span id="cb13-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(row)</span></code></pre></div>
<pre class="text"><code>(1, 'Forrest Gump', 1994, 'Drama', 330)
(2, '3 Idiots', 2009, 'Drama', 2)
(3, 'Eternal Sunshine of the Spotless Mind', 2004, 'Drama', 35)
(4, 'Good Will Hunting', 1997, 'Drama', 138)
(5, 'Skyfall', 2012, 'Action', 305)</code></pre>
<p>Finally, to close the connection, use <code>mydb.close()</code>.</p>
</section>
<section id="using-ibis-to-work-with-a-cloud-based-sql-database" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="using-ibis-to-work-with-a-cloud-based-sql-database">Using Ibis to work with a cloud-based SQL database</h4>
<p>The <a href="https://ibis-project.org/">Ibis project</a> makes working with a ton of different back-end data tools easy by making the syntax consistent. Examples are: MySQL, BigQuery, DuckDB, pandas, MSSQL, and much, much more!</p>
<p>Once you’ve imported <strong>Ibis</strong> (<code>import ibis</code>), you may find it more fun and useful to use it in interactive mode, which looks more like how <strong>pandas</strong> works:</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">ibis.options.interactive <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span></code></pre></div>
<p>To see some data, we need to create a connection:</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">con <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ibis.mysql.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(</span>
<span id="cb16-2">    user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>username,</span>
<span id="cb16-3">    password<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>password,</span>
<span id="cb16-4">    host<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>hostname,</span>
<span id="cb16-5">    port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3306</span>,</span>
<span id="cb16-6">    database<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"online_movie_rating"</span>,</span>
<span id="cb16-7">    ssl_ca<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sql/sql_cert.crt.pem"</span>,</span>
<span id="cb16-8">)</span></code></pre></div>
<p>And to grab our “movies” table again, but as a <strong>pandas</strong> dataframe:</p>
<div class="sourceCode" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">t <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> con.table(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"movies"</span>)</span>
<span id="cb17-2">t.head().to_pandas()</span></code></pre></div>
<table class="caption-top table">
<colgroup>
<col style="width: 3%">
<col style="width: 4%">
<col style="width: 44%">
<col style="width: 16%">
<col style="width: 9%">
<col style="width: 21%">
</colgroup>
<thead>
<tr class="header">
<th></th>
<th>id</th>
<th>title</th>
<th>release_year</th>
<th>genre</th>
<th>collection_in_mil</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>0</td>
<td>1</td>
<td>Forrest Gump</td>
<td>1994</td>
<td>Drama</td>
<td>330</td>
</tr>
<tr class="even">
<td>1</td>
<td>2</td>
<td>3 Idiots</td>
<td>2009</td>
<td>Drama</td>
<td>2</td>
</tr>
<tr class="odd">
<td>2</td>
<td>3</td>
<td>Eternal Sunshine of the Spotless Mind</td>
<td>2004</td>
<td>Drama</td>
<td>35</td>
</tr>
<tr class="even">
<td>3</td>
<td>4</td>
<td>Good Will Hunting</td>
<td>1997</td>
<td>Drama</td>
<td>138</td>
</tr>
<tr class="odd">
<td>4</td>
<td>5</td>
<td>Skyfall</td>
<td>2012</td>
<td>Action</td>
<td>305</td>
</tr>
</tbody>
</table>
<p>Ibis is great to explore data. It has fully fledged <strong>pandas</strong>-style <em>and</em> SQL-style APIs. So you can do:</p>
<div class="sourceCode" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">t.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(t.release_year<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1996</span>)</span></code></pre></div>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://www.aeturrell.com/blog/posts/til-sql-database-azure/ibis_query_result.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Returned result from filter using Ibis</figcaption>
</figure>
</div>
<p>But you can also get this as SQL:</p>
<div class="sourceCode" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">ibis.to_sql(t.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">filter</span>(t.release_year<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1996</span>))</span></code></pre></div>
<div class="sourceCode" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb20-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">SELECT</span></span>
<span id="cb20-2">  t0.<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">id</span>,</span>
<span id="cb20-3">  t0.title,</span>
<span id="cb20-4">  t0.release_year,</span>
<span id="cb20-5">  t0.genre,</span>
<span id="cb20-6">  t0.collection_in_mil</span>
<span id="cb20-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">FROM</span> movies <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">AS</span> t0</span>
<span id="cb20-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">WHERE</span></span>
<span id="cb20-9">  t0.release_year <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1996</span></span></code></pre></div>
<p>It’s a really powerful downstream analysis tool.</p>
<p>And that’s it! Most other SQL commands are as you’d expect and can be looked up in the MySQL documentation.</p>


</section>
</section>
</section>

 ]]></description>
  <category>code</category>
  <category>cloud</category>
  <guid>https://www.aeturrell.com/blog/posts/til-sql-database-azure/</guid>
  <pubDate>Tue, 23 Apr 2024 23:00:00 GMT</pubDate>
  <media:content url="https://www.aeturrell.com/blog/posts/til-sql-database-azure/ibis_query_result.png" medium="image" type="image/png" height="51" width="144"/>
</item>
<item>
  <title>TIL: how to create and work with remote blob storage on Azure</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://www.aeturrell.com/blog/posts/til-blob-storage-azure/</link>
  <description><![CDATA[ 





<p>In this TIL, I find out how to create a new blob storage account on Microsoft Azure. This is a place to store unstructured data of any kind (as opposed to, say, a SQL database). Note that the instructions below assume you are using a bash-like terminal, for example <a href="https://ohmyz.sh/">zsh</a>, rather than <a href="https://learn.microsoft.com/en-us/powershell/">Powershell</a>.</p>
<section id="prerequisites" class="level2">
<h2 class="anchored" data-anchor-id="prerequisites">Prerequisites</h2>
<p>You’ll need to sign up for a Microsoft Azure account for this, and create a “resource group”. You’ll also need the Azure Command Line Interface (CLI), which you can find information <a href="https://learn.microsoft.com/en-us/cli/azure/">on here</a>. (Alternatively, you can do this through the <a href="https://portal.azure.com/#home">Azure Portal</a>, but it’s often useful to have the reproducible commands.)</p>
<p>It’s also helpful to understand the lingo Azure uses for storage.</p>
<ul>
<li>storage accounts are the high level service</li>
<li>“storage containers” are specific data-holding entities that contain blob storage, that is data of any shape and size</li>
</ul>
</section>
<section id="instructions" class="level2">
<h2 class="anchored" data-anchor-id="instructions">Instructions</h2>
<section id="creating-a-storage-account-with-the-command-line-interface" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-storage-account-with-the-command-line-interface">Creating a storage account with the command line interface</h3>
<p>First set and load your configs. Note that the storage account name must be between 3 and 24 characters in length and use numbers and lower-case letters only.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">storagename</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&lt;&gt;</span></span>
<span id="cb1-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">resourcegroup</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&lt;&gt;</span></span>
<span id="cb1-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">location</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&lt;&gt;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># eg "uksouth"</span></span>
<span id="cb1-4"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">sku</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Standard_LRS"</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Standard Locally Redundant Storage</span></span></code></pre></div>
<p>Then to create the blob, it’s</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">az</span> storage account create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$storagename</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--resource-group</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$resourcegroup</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--location</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$location</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--sku</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$sku</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--encryption-services</span> blob</span></code></pre></div>
<p>If this has worked, you’ll get a JSON structure back that looks something like this:</p>
<pre class="text"><code>{
  "accessTier": "Hot",
  "accountMigrationInProgress": null,
  "allowBlobPublicAccess": false,
  "allowCrossTenantReplication": false,
  "allowSharedKeyAccess": null,
  "allowedCopyScope": null,
  "azureFilesIdentityBasedAuthentication": null,
  "blobRestoreStatus": null,
  "creationTime": "&lt;&gt;",
  "customDomain": null,
  "defaultToOAuthAuthentication": null,
  "dnsEndpointType": null,
  "enableHttpsTrafficOnly": true,
  "enableNfsV3": null,
  "extendedLocation": null,
  "failoverInProgress": null,
  "geoReplicationStats": null,
  "id": "/subscriptions/&lt;&gt;/resourceGroups/&lt;&gt;/providers/Microsoft.Storage/storageAccounts/&lt;&gt;",
  "identity": null,
  "immutableStorageWithVersioning": null,
  "isHnsEnabled": null,
  "isLocalUserEnabled": null,
  "isSftpEnabled": null,
  "isSkuConversionBlocked": null,
  "keyPolicy": null,
  "kind": "StorageV2",
  "largeFileSharesState": null,
  "lastGeoFailoverTime": null,
  "location": "uksouth",
  "minimumTlsVersion": "TLS1_0",
  "name": "&lt;&gt;",
  "networkRuleSet": {
    "bypass": "AzureServices",
    "defaultAction": "Allow",
    "ipRules": [],
    "ipv6Rules": [],
    "resourceAccessRules": null,
    "virtualNetworkRules": []
  },
  "primaryEndpoints": {
    "blob": "https://&lt;&gt;.blob.core.windows.net/",
    "dfs": "https://&lt;&gt;.dfs.core.windows.net/",
    "file": "https://&lt;&gt;.file.core.windows.net/",
    "internetEndpoints": null,
    "microsoftEndpoints": null,
    "queue": "https://&lt;&gt;.queue.core.windows.net/",
    "table": "https://&lt;&gt;.table.core.windows.net/",
    "web": "https://&lt;&gt;.z33.web.core.windows.net/"
  },
  "primaryLocation": &lt;&gt;,
  "privateEndpointConnections": [],
  "provisioningState": "Succeeded",
  "publicNetworkAccess": null,
  "resourceGroup": "inv-day-test",
  "routingPreference": null,
  "sasPolicy": null,
  "secondaryEndpoints": null,
  "secondaryLocation": null,
  "sku": {
    "name": "Standard_LRS",
    "tier": "Standard"
  },
  "statusOfPrimary": "available",
  "statusOfSecondary": null,
  "storageAccountSkuConversionStatus": null,
  "tags": {},
  "type": "Microsoft.Storage/storageAccounts"
}</code></pre>
</section>
<section id="assign-permission-to-use-the-storage-account" class="level3">
<h3 class="anchored" data-anchor-id="assign-permission-to-use-the-storage-account">Assign permission to use the storage account</h3>
<p>Right now, you’ve created a storage account, but you don’t have permission to use it! Let’s change that by adding the current user to have the role assignment “Storage Blob Data Contributor”.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">subscriptionid</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&lt;&gt;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># long combination of numbers and letters with dashes</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">az</span> ad signed-in-user show <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--query</span> id <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-o</span> tsv <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">|</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">az</span> role assignment create <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--role</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Storage Blob Data Contributor"</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--assignee</span> @- <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--scope</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/subscriptions/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$subscriptionid</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/resourceGroups/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$resourcegroup</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/providers/Microsoft.Storage/storageAccounts/</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$storagename</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span></span></code></pre></div>
<p>Note that we already saved the other variables. Running this should result in another JSON file full of info.</p>
</section>
<section id="creating-a-storage-container-using-the-cli" class="level3">
<h3 class="anchored" data-anchor-id="creating-a-storage-container-using-the-cli">Creating a storage container using the CLI</h3>
<p>Next up, we want to create a storage container.</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">containername</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=&lt;&gt;</span>  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># eg "mydemocontainer"</span></span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">az</span> storage container create <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb5-4">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--account-name</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$storagename</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb5-5">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$containername</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb5-6">    <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--auth-mode</span> login</span></code></pre></div>
<p>Once this runs you should get a little JSON saying</p>
<pre class="text"><code>{
  "created": true
}</code></pre>
</section>
<section id="how-to-upload-a-file-to-blob-storage" class="level3">
<h3 class="anchored" data-anchor-id="how-to-upload-a-file-to-blob-storage">How to upload a file to blob storage</h3>
<p>Now we need a text file to try out “mydemocontainer” or whatever you called it in <code>containername</code>. To create one, use</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">echo</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello world"</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;&gt;</span> test.txt</span></code></pre></div>
<p>this creates the file <code>test.txt</code> locally. To then upload it to your storage container as <code>test_on_blob.txt</code>, use the below:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">az</span> storage blob upload <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--account-name</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$storagename</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--container-name</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$containername</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> test_on_blob.txt <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--file</span> test.txt <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--auth-mode</span> login</span></code></pre></div>
</section>
<section id="checking-it-worked" class="level3">
<h3 class="anchored" data-anchor-id="checking-it-worked">Checking it worked</h3>
<p>Of course, you can check this in the Azure Portal. But to check it on the command line, it’s</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">az</span> storage blob list <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--account-name</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$storagename</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--container-name</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$containername</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--output</span> table <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--auth-mode</span> login</span></code></pre></div>
<p>which should result in a table showing a single file, <code>test_on_blob.txt</code>.</p>
</section>
<section id="download-data-back-from-the-blob" class="level3">
<h3 class="anchored" data-anchor-id="download-data-back-from-the-blob">Download data back from the blob</h3>
<p>For this, we’ll use the <code>az storage blob download</code> command.</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">az</span> storage blob download <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--account-name</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$storagename</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--container-name</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$containername</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> test_on_blob.txt <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--file</span> back_from_blob.txt <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--auth-mode</span> login</span></code></pre></div>
<p>That’s it! The general setup is the same. For transferring lots of files, you may want to check out the <a href="https://learn.microsoft.com/en-us/azure/storage/common/storage-use-azcopy-v10">azcopy</a> utility too. There are also <a href="https://learn.microsoft.com/en-us/azure/storage/blobs/storage-quickstart-blobs-python">Python libraries</a> for interacting with blob storage.</p>


</section>
</section>

 ]]></description>
  <category>code</category>
  <category>cloud</category>
  <guid>https://www.aeturrell.com/blog/posts/til-blob-storage-azure/</guid>
  <pubDate>Mon, 22 Apr 2024 23:00:00 GMT</pubDate>
</item>
<item>
  <title>TIL: how to connect Visual Studio Code to Azure Virtual Machines</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://www.aeturrell.com/blog/posts/til-how-to-run-vscode-remote-azure/</link>
  <description><![CDATA[ 





<p>In a previous blog post, I looked at <a href="../../../blog/posts/visual-studio-code-in-the-cloud/index.html">how to connect desktop-based Visual Studio Code to a Google Cloud Virtual machine</a>; today, it’s how to do the same using a virtual machine running on Microsoft’s Azure platform.</p>
<section id="setting-up" class="level2">
<h2 class="anchored" data-anchor-id="setting-up">Setting Up</h2>
<p>There are two pieces to this puzzle: Visual Studio Code and the Azure Cloud Platform.</p>
<p>First, grab Visual Studio Code for your local computer (ie your non-cloud computer) and whatever extensions you fancy, but you’ll need <a href="https://code.visualstudio.com/docs/remote/ssh">the remote explorer (SSH)</a> at a minimum.</p>
<p>You’ll also need to sign up for a Microsoft Azure account and get either the free tier of services or activate a pay-as-you-go account. Be warned: if you have multiple Microsoft accounts for home and work, this can be a frustrating and circular process where you are constantly signing in and being taken to different accounts.</p>
<p>With that in place, there are two ways to proceed to create your Azure infrastructure: you can either use the Azure Command Line Interface (CLI), which you can find information <a href="https://learn.microsoft.com/en-us/cli/azure/">on here</a> or use the <a href="https://portal.azure.com/#home">Azure website</a> directly.</p>
</section>
<section id="creating-a-cloud-vm-instance" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-cloud-vm-instance">Creating a Cloud VM Instance</h2>
<section id="using-the-website" class="level3">
<h3 class="anchored" data-anchor-id="using-the-website">Using the website</h3>
<p>On the <a href="https://portal.azure.com/#home">Azure website</a>, navigate to the “Virtual Machines” resources page and hit create. There are a couple of options, but if you’re just trying this out you might like to use one of the pre-configured machines. I used one of the pre-configured D-Series computers and chose Linux (Ubuntu) as the operating system. You’ll need to set your subscription and resource group from the drop-down menu. Give the virtual machine a name, choose the region closest to you, and feel free to use the defaults for most of the other options. There is a box for a username: note that this is what your ID will be on the virtual machine once it’s created. Choose SSH as the authentication type and give the file a name. Hit review and create! Make sure to save the private key certificate, the “.pem” file, to somewhere sensible on your local machine. This file is what will let you remotely access the virtual machine from your computer via Visual Studio Code.</p>
<p>There is an important extra step here, at least on MacOS. The certificate file that you’ve just downloaded will be set so that everyone has read and write permissions. When you later try to connect via SSH, this will raise alarm bells. So you want to set it so that only the Mac’s current user, you, can read and write it. To do this, navigate to the file in the command line and then run</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> 600 my-certificate-name.pem</span></code></pre></div>
</section>
<section id="using-the-command-line-interface" class="level3">
<h3 class="anchored" data-anchor-id="using-the-command-line-interface">Using the command line interface</h3>
<p>Let’s now see how to do this using the <a href="https://learn.microsoft.com/en-us/cli/azure/">Azure CLI</a> instead. Follow the install instructions for your system. In the following, I’ll assume you already have a resource group set up. Use <code>az login</code> to login to your cloud account.</p>
<p>Then the command to create a virtual machine (running Ubuntu 22.04.4 LTS with 2 cores and 8GB of RAM) is:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">resourcegroup</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RESOURCE-GROUP"</span></span>
<span id="cb2-2"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">vmname</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"VIRTUAL-MACHINE-NAME"</span></span>
<span id="cb2-3"><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">username</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"USERNAME"</span></span>
<span id="cb2-4"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">az</span> vm create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--resource-group</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$resourcegroup</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$vmname</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--image</span> Ubuntu2204 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--admin-username</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">$username</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--size</span> Standard_D2ds_v4 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">----generate-ssh-keys</span></span></code></pre></div>
<p>You can see a summary list of available images by running <code>az vm image list</code>. To get the full, live list of Ubuntu options it would be <code>az vm image list -f Ubuntu --all</code> but note that this could take a long time to run. For more powerful computers, select another size (you can see the available ones using <code>az vm list-sizes --location REGION --output table</code> but you’ll have to check the website for prices.</p>
<p>If the <code>create</code> command is successful, you should see something a bit like the following appear:</p>
<pre class="text"><code>{
  "fqdns": "",
  "id": "/subscriptions/YOUR-SUBSCRIPTION-ID/resourceGroups/RESOURCE-GROUP/providers/Microsoft.Compute/virtualMachines/VIRTUAL-MACHINE-NAME",
  "location": REGION,
  "macAddress": AN-ID,
  "powerState": "VM running",
  "privateIpAddress": "X.X.X.X",
  "publicIpAddress": "X.X.X.X",
  "resourceGroup": RESOURCE-GROUP,
  "zones": ""
}</code></pre>
<p>Note that you should also get a public SSH key back from this operation, which by default is saved as a .pem file in <code>~/.ssh</code> on your local machine.</p>
</section>
</section>
<section id="connecting-to-a-running-azure-virtual-machine-instance-from-visual-studio-code" class="level2">
<h2 class="anchored" data-anchor-id="connecting-to-a-running-azure-virtual-machine-instance-from-visual-studio-code">Connecting to a running Azure Virtual Machine Instance from Visual Studio Code</h2>
<p>Okay, so your Azure VM instance is running and now you’re going to connect to it with Visual Studio Code.</p>
<p>First, we need to set up the SSH connection between your computer and your running cloud VM; essentially a way for them to talk to each other. You can find out more about SSH authentication <a href="https://www.ssh.com/academy/ssh/protocol">here</a>. On the Azure website, and looking at your virtual machine, click on the “connect” button. You’ll then see two options: use “Native SSH”. When you click on Native, you’ll see a panel open up on the right-hand side (as long as your virtual machine is already running). You’ll see a command a bit like:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ssh</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-i</span> ~/.ssh/id_rsa.pem VM-USERNAME@VM-IP-ADDRESS</span></code></pre></div>
<p>Essentially, what this is saying is that to SSH into your running virtual machine from the command line, you’ll need to use the SSH command passing in as arguments both the location of your “.pem” certificate, which should only be read/write by you, and then the username you used for the VM followed by the public IP address of the VM, which you can see in the panel.</p>
<p>You could just run this on the command line and connect that way. But to get all the goodies of Visual Studio Code, it’s a slightly different process.</p>
<p>Within Visual Studio Code on your local computer, go to the remote explorer tab, which you can find on the left hand side (you’ll need to have installed the remote explorer package for SSH). Choose ‘SSH Targets’ from the drop-down menu at the top. Click the “+” button next to SSH and then paste in the SSH command. Hit refresh on the remotes panel, and you should now see a new entry for your virtual machine. Right click on it and select “Connect in New Window” to get Visual Studio Code to connect.</p>
<p>Congratulations, you should now be on your VM instance using Code! You can check because the green text in the bottom left-hand corner of Visual Studio Code should read</p>
<blockquote class="blockquote">
<p>SSH: VIRTUAL-MACHINE-NAME</p>
</blockquote>
<p>And the command prompt in the new VS Code window should say something like <code>USERNAME@VIRTUAL-MACHINE-NAME:~$</code>.</p>
<p>For more instructions, including installing Python and git, check out the <a href="../../../blog/posts/visual-studio-code-in-the-cloud/index.html">original post on this with Google Cloud</a>.</p>
</section>
<section id="finishing" class="level2">
<h2 class="anchored" data-anchor-id="finishing">Finishing</h2>
<p>Remember: best practice is to treat a cloud instance as temporary. Shunt data you want to save in and out when you use it, and use version control for code. And most of all, <strong>don’t forget to turn your VM instance off when you’ve finished using it!</strong></p>
<p>Hopefully this has been a useful summary of how to use Visual Studio Code in the (Azure!) cloud. Happy coding!</p>


</section>

 ]]></description>
  <category>code</category>
  <category>research</category>
  <category>cloud</category>
  <category>python</category>
  <category>rstats</category>
  <guid>https://www.aeturrell.com/blog/posts/til-how-to-run-vscode-remote-azure/</guid>
  <pubDate>Fri, 08 Mar 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>TIL: how to create a virtual desktop from a cloud virtual machine</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://www.aeturrell.com/blog/posts/virtual-desktop-from-virtual-machine/virtual-desktop-from-virtual-machine.html</link>
  <description><![CDATA[ 





<p>Researchers frequently want to be able to access a second computer that works like a normal computer (think a virtual desktop rather than a virtual machine + command line) just to offload some computation. This post shows how.</p>
<p>The basic idea here is you don’t want to gum up your own laptop with lots of lengthy computations<sup>1</sup> but you don’t feel confident just using a virtual machine via the command line, or using <a href="../../../blog/posts/visual-studio-code-in-the-cloud/index.html">visual studio code remotely</a>, but you want a virtual desktop that feels a bit similar to using a laptop (only in a browser window). We’ll be using Google’s handy remote desktop service for this.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;And you’ve already optimised in the obvious ways.</p></div></div><section id="recipe" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="recipe">Recipe</h2>
<p>For this, you’ll need a Google Cloud (GCP) account and project with the compute engine API enabled.</p>
<ol type="1">
<li><p>Head to create instances in GCP</p></li>
<li><p>Hit create instance</p></li>
<li><p>Use your normal settings except for under “Boot disk” choose Ubuntu (a good idea to use the latest non-minimal version, I used 23.10)</p></li>
<li><p>Create the virtual machine and use Google’s handy “SSH” button to enter it on the command line</p></li>
<li><p>Run the following on the virtual machine to download the Google remote desktop package and install it</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> https://dl.google.com/linux/direct/chrome-remote-desktop_current_amd64.deb</span>
<span id="cb1-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt-get install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--assume-yes</span> ./chrome-remote-desktop_current_amd64.deb</span></code></pre></div></li>
<li><p><code>sudo apt install slim</code>, which is a display manager</p></li>
<li><p><code>sudo apt install ubuntu-desktop</code> to get an ubuntu desktop installed (we’re still on the virtual machine here)</p></li>
<li><p>Once done, use <code>sudo reboot</code>. You’ll be kicked off the VM but you can just reconnect as soon as it’s rebooted.</p></li>
<li><p>Once back on your rebooted virtual machine, hit <code>sudo service slim start</code>.</p></li>
<li><p>Back on your local computer, go to the Chrome Remote Desktop command line setup page: <a href="https://remotedesktop.google.com/headless">https://remotedesktop.google.com/headless</a></p></li>
<li><p>On the Set up another computer page, click Begin then click Next. You already installed the Chrome Remote Desktop on the remote computer.</p></li>
<li><p>Click Authorize</p></li>
<li><p>This gives you some code to run on your VM instance that will allow you to connect to it remotely. Copy the command for Debian Linux and run in on the command line of the VM.</p></li>
<li><p>When you are asked for one, enter a 6-digit PIN that you have devised. This PIN will be used when you log into the VM instance from the remote desktop browser page.</p></li>
<li><p>Head to that browser page (<a href="https://remotedesktop.google.com/headless">this link</a>) and you should be asked for your pin.</p></li>
<li><p>You should see a fully working Ubuntu desktop through your browser window!</p></li>
</ol>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://www.aeturrell.com/blog/posts/virtual-desktop-from-virtual-machine/screenshot_ubuntu.png" class="img-fluid figure-img" style="width:80.0%"></p>
<figcaption class="margin-caption">Screenshot of the desktop changer and app selection functions of Ubuntu desktop accessed through Google’s remote desktop facility</figcaption>
</figure>
</div>
<p>Remember: you will be charged for the time that your instance is running. This is usually inexpensive but you do want to turn off the virtual machine when you’re not actively using it. You can do this on the instances page with the “stop” button. And, as ever, to tear down the virtual machine completely (and lose anything on it), go to the instances page on GCP and use the delete option.</p>


</section>


 ]]></description>
  <category>code</category>
  <category>data science</category>
  <category>research</category>
  <guid>https://www.aeturrell.com/blog/posts/virtual-desktop-from-virtual-machine/virtual-desktop-from-virtual-machine.html</guid>
  <pubDate>Mon, 04 Dec 2023 00:00:00 GMT</pubDate>
  <media:content url="https://www.aeturrell.com/blog/posts/virtual-desktop-from-virtual-machine/screenshot_ubuntu.png" medium="image" type="image/png" height="141" width="144"/>
</item>
<item>
  <title>Data science with impact</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://www.aeturrell.com/blog/posts/data-science-with-impact/</link>
  <description><![CDATA[ 





<p>I was recently asked to give a talk at No.&nbsp;10 Downing Street on the topic of data science with impact and, in this post, I’m going to share some of what I said in that talk. The context for being asked is that the folks in 10DS, the Downing Street data team, are perhaps the most obsessed with having impact of any data science team I’ve met–so even though they’re the real experts on this topic, they’re very sensibly reaching out to others to see if there is anything extra they can learn.</p>
<p>There are plenty of caveats to the below—it’s just my take and I’m not claiming to have definitive answers; I’m sure management experts have <em>much</em> more to say on the general topic. But I’m not sure many others have talked about how to do <em>data science</em> with impact in the public sector, so hopefully that angle is useful and new. One limitation: a lot of my thinking is informed by working in the UK’s Data Science Campus as Deputy Director and then Acting Director, and so may be overly occupied with whether to undertake this or that data science project as compared with the decisions needed to be taken by data science teams in more operational areas. Throughout, I provide concrete examples and links to more detail on them. Any mistakes in referring to Campus projects, and the views expressed below, are very much my own.</p>
<section id="what-impact-is" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="what-impact-is">What impact is</h2>
<p>For me, to first order, data science with impact is data science for the public good. In other words, you must be able to articulate how a new project or process will benefit the public once complete.</p>
<p>Inevitably, this prompts the question “what constitutes public good?” My very high-level mental model is that it’s a simple calculation<sup>1</sup> of</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;At the risk of sounding like an effective altruist.</p></div></div><p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7Bnumber%20of%20people%20affected%20%7D%20%5Ctimes%20%5Ctext%7B%20impact%20on%20people%7D%0A"></p>
<p>where the impact on people is the <strong>net present value of the improvement to their life</strong>. For want of a better description, let’s call this the <em>impact equation</em>. If you’re not familiar with net present value, the equation is</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%5Ctext%7BNPV%7D%20=%20%5Cdisplaystyle%5Csum%20%5Cfrac%7BR_t%7D%7B(1+i)%5Et%7D%0A"></p>
<p>which is to say it is the sum of the “returns” at time <img src="https://latex.codecogs.com/png.latex?t"> (where <img src="https://latex.codecogs.com/png.latex?t"> is number of time steps into the future), <img src="https://latex.codecogs.com/png.latex?R_t">, discounted by rate <img src="https://latex.codecogs.com/png.latex?i"> for <img src="https://latex.codecogs.com/png.latex?t"> steps into the future.</p>
<p>What does this equation mean in practice? Don’t let the urgent crowd out the important, despite the strong temptation to only look directly in front of you when you’re working at a policymaking institution buffeted by short-term headwinds. It also means you should <em>look for the timeless angle in everything you do</em>—even while you’re solving an urgent problem.</p>
<p>To be a bit more concrete about how this applies when doing data science, open-sourcing the code you’re using is a great way to make that urgent problem you’re working on more timeless. While you may never pick that code up again, someone else just might. Likewise, blogging about what you did—even in a very matter-of-fact way—can help those who come after you with a similar problem get started more quickly. It also points to thinking carefully about the ongoing maintenance costs of what you’re producing—one reason why dashboards, one of the most requested data science products, can get down-rated when looking through this lens.<sup>2</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;Everyone thought the UK Health Security Agency’s COVID-19 dashboard was fantastic, and so it was. But did you know there was a whole team behind it, ensuring it was kept usefully up to date? Dashboards need considerable resources to stay relevant, accurate, and useful.</p></div></div><p>Let’s turn to the first of our examples of delivering public good using data science.</p>
<section id="example-of-public-good-least-cost-grocery-index" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="example-of-public-good-least-cost-grocery-index">Example of public good: least cost grocery index</h3>
<p>In January 2022, food campaigner Jack Monroe put out a tweet that garnered huge press coverage. The tweet read</p>
<blockquote class="blockquote">
<p>Woke up this morning to the radio talking about the cost of living rising a further 5%. It infuriates me the index that they use for this calculation, which grossly underestimates the real cost of inflation as it happens to people with the least. Allow me to briefly explain”</p>
</blockquote>
<p>and quickly raked in 60,000 likes. Just as quickly, Jack was invited onto breakfast news programmes to talk about how price rises were hitting the poorest in society.</p>
<p>The idea she was sharing is simple and compelling, which is also probably why it caught on in the public debate, especially as the cost of living was a major concern at that time. Jack’s point was that inflation as measured by the UK’s <em>Office for National Statistics</em> (ONS) is measure of the change in average prices not a measure of the change in the <em>lowest</em> prices. She gave some examples from her own experience, like a budget bag of pasta increasing from 29p to 70p.</p>
<p>Jack had a point: as the ONS’ website puts it, “A convenient way to understand the nature of these statistics is to envisage a very large shopping basket comprising all the different kinds of goods and services bought by a typical household.” A typical household is not one that is only buying the lowest cost versions of all products—but households at the bottom of the income distribution might be. So it is possible that the very poorest households could face a different inflation rate.</p>
<p>At the time this was happening, I was working at the Data Science Campus at the ONS, and myself and some other ONS colleagues—most notably Matt Corder and Abi Casey—decided that ONS could not and should not stay silent. If we weren’t going to talk about inflation when it was on breakfast TV, when would we talk about it? Against some weak external and considerable internal resistance, we persuaded the rest of the organisation that we should create a lowest-cost grocery index. This index would speak directly to Jack Monroe’s question, a question that, by this point, was at the heart of the public debate. There was no time to lose if we were going to fill the information vacuum before poorer quality data and analysis did.</p>
<p>The traditionally collected basket of goods used in the CPI (consumer prices index) measure of inflation did not explicitly include budget items, making the analysis potentially impossible. Fortunately, some forward-looking colleagues had already laid the groundwork for us by setting up the automatic scraping of prices on supermarkets’ websites (with the blessing of those supermarkets). Working together across the Campus and Prices areas of ONS, we used the web-scraped data to create a new “least cost” grocery index.</p>
<p>The index was constructed based on a limited number of products (30) because the analysis needed to be ready quickly in order to inform the public debate: ie this work had some element of <strong>urgency</strong>. Even then it took from January to April to do. The items were chosen using data from the Department for Environment, Food and Rural Affairs (DEFRA) 2019/20 Family food datasets, which allowed us to identify the grocery items most likely to be bought by households on low incomes. The results are in the figure.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://www.aeturrell.com/blog/posts/data-science-with-impact/least_cost_index_v1.png" class="img-fluid figure-img" style="width:70.0%"></p>
<figcaption class="margin-caption">Chart of how prices of least cost grocery items changed produced by the Campus and ONS.</figcaption>
</figure>
</div>
<p>How does this fit in with data science for the public good? The first way is that this story, about the cost of living, reached (and was relevant to) a large number of people. While only some households were directly affected by the inflation in the lowest cost items, many were concerned—and therefore interested. Although it wasn’t certain, we knew there was a good chance this analysis would be big news, and indeed the lowest cost grocery index was picked up by all the major news shows and newspapers. In the Campus, we knew it was a hit, because we were asked to put it on the ONS website rather than the Campus’ website (albeit with a “highly experimental” label).<sup>3</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;An example of what I like to call the Campus’ Andy Murray problem.</p></div></div><div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://www.aeturrell.com/blog/posts/data-science-with-impact/bbc_least_cost.png" class="img-fluid figure-img" style="width:65.0%"></p>
<figcaption class="margin-caption">Many news organisations, including the BBC, ran a leading story on the least cost grocery index.</figcaption>
</figure>
</div>
<p>This story reached a large number of people, and, for some, it hopefully affected them too: by validating their experience but also pointing to the items that had fallen in price. It also showed that the <em>next cheapest</em> product was often a substantially more (20%+) than the cheapest and arguably influenced supermarkets to focus more on their budget lines.</p>
<p>Thinking about that term in the impact equation that looks into the future, there’s also an element of timelessness in this urgent work: we set a precedent for producing a least cost index, and we created the code to do it. Which means that that a similar analysis can be run again whenever needed. And, indeed, in October of 2022, the <a href="https://www.ons.gov.uk/economy/inflationandpriceindices/articles/trackingthelowestcostgroceryitemsukexperimentalanalysis/april2021toseptember2022">index was run again</a>. There was a resource cost in doing this, but it was far lower than for producing the initial work.</p>
</section>
</section>
<section id="considerations-for-having-impact-with-data-science-projects" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="considerations-for-having-impact-with-data-science-projects">Considerations for having impact with data science projects</h2>
<section id="is-a-data-science-team-the-best-option" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="is-a-data-science-team-the-best-option">Is a data science team the best option?</h3>
<p>Different types of teams will be more or less productive working on different kinds of tasks. Tackling only the problems for which data science teams are uniquely well-placed is going to give more bang for the buck.</p>
<p>Economists will be familiar with the idea of comparative advantage. To put it succinctly, the idea is that it’s economically efficient to do the thing that you are uniquely best at (rather than the thing you are best at overall, or, more obviously, the thing you are bad at). I know some people who are excellent economists who are also excellent data scientists. Right now in the world, it’s easier to find excellent economists than it is excellent data scientists, so those people should probably focus on data science—even if they’re better at economics than most economists.</p>
<p>Sometimes a data science team will have a comparative advantage in doing a project or running a process. For example, if a project simultaneously requires skills in coding and analysis, data scientists are uniquely placed. If all that is needed is coding, maybe a team of software developers would be better though—by which I mean they could have more impact per unit of input of effort.</p>
<p>In the example of the least cost grocery index, there was probably no other organisation in the UK that was better placed to produce the analysis than ONS: it took a combination of already collected supermarket price data, data science skills to track budget products over time, and inflation methodology skills, not to mention all of the stakeholder management and communication skills needed to land such a high profile analytical project with the general public. Of course, it also hugely helped that ONS is an authoritative voice on all things inflation.</p>
<p>Comparative advantage can take forms other than skills. Working in government, I frequently found that there were gaps between departments’ briefs or, even more commonly, co-ordination problems because of overlapping briefs. There’s nothing inherent about a data science team that would make it well suited to solving co-ordination problems. But, in the Data Science Campus, we had an explicit mandate to look across the entire public sector. And one way we could add value relative to what departmental data science teams were doing was to solve some of those co-ordination problems and bring people working in different departments (or their data) together. Which leads to the next example.</p>
<section id="example-of-being-the-right-team-and-solving-co-ordination-problems-preference-tariff-utilisation-rates" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="example-of-being-the-right-team-and-solving-co-ordination-problems-preference-tariff-utilisation-rates">Example of being the right team and solving co-ordination problems: preference tariff utilisation rates</h4>
<p>Preferential trade agreements (PTAS) are used to promote international trade, and we know that international trade brings a bunch of benefits beyond only trading domestically. All else equal, lowering the transaction costs of international trade is helpful—and firms making use of <em>preference tariffs</em> face lower transaction costs. But, previously, there was little information on the extent to which UK firms were making use of these cheaper tariffs.</p>
<p>The problem was that these data lay across several different datasets housed by different UK government departments. I won’t go into the details here because you can read about it at length in <a href="https://datasciencecampus.ons.gov.uk/the-use-of-microdata-for-firm-level-analysis-of-preference-tariff-utilisation-in-the-uk-technical-report/">blogs on the Data Science Campus</a>, but the short version is by combining data from HM Revenue and Customs (HMRC) (on trade in goods), the Inter-Departmental Business Register, and International Trade Centre’s Market Access Map, it was possible to estimate the underuse of tariffs: essentially to work out how much money UK firms were leaving on the table.</p>
<p>The results involve significant sums that firms are, apparently, spending unnecessarily. The work did not establish whether this was simply because firms were unaware of the tariffs or were aware and but refrained because the costs associated with the bureaucracy of the preferential tariffs meant it wasn’t worth using them. But it did tell us that this was occurring for tens of thousands of firms (“people” in our impact equation) and billions of pounds (depth of effect in our equation). And, just like the least cost index, there is plenty of replay value to be had in re-running this analysis—especially following any interventions.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://www.aeturrell.com/blog/posts/data-science-with-impact/purs_savings_by_size.png" class="img-fluid figure-img" style="width:55.0%"></p>
<figcaption class="margin-caption">Potential duty savings as estimated in a project bringing together disparate datasets to look at the use of preferential tariffs.</figcaption>
</figure>
</div>
</section>
</section>
<section id="portfolio-construction" class="level3">
<h3 class="anchored" data-anchor-id="portfolio-construction">Portfolio construction</h3>
<p>When creating a portfolio of data science projects, you should think about it like any other portfolio. Some projects may be more risky, but have a higher potential pay-off. Some will be dead certs but with limited upside. Rightful scrutiny of how money is spent means that very few have the luxury of only going for high risk, high reward projects. (Although you can see this is how some industries end up being more dominated with the relatively better off—they have a safety net.) Being pragmatic, you’ll need a mix of projects to keep everyone happy.</p>
<p>This applies in time too: the reality of most of the public sector is that you can’t have projects that take years to come to fruition. In some places, you might be lucky to have weeks. There’s an old joke about a department that shall remain unnamed: Q: “what do they call research?” A: “Anything that isn’t due tomorrow.” To keep everyone happy, and to ensure you really are delivering, it’s wise to have a portfolio of projects that will keep delivering wins in a steady stream so that there aren’t long fallow periods.</p>
<p>In small data science teams, this can be hard, simply because it’s hard to play a numbers game with small numbers of projects / staff / FTE. In this case, you need to think carefully about what the tolerances are around delivery. But the general principle of going for a steady stream of projects with some big, some small, some which maybe don’t work at all, holds.</p>
</section>
<section id="building-human-or-physical-capital" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="building-human-or-physical-capital">Building human or physical capital</h3>
<p>Data science is rapidly changing, with new or upgraded technologies appearing all the time. Simply staying on top of developments takes up a lot of time—but staying on top of developments is also critical for ensuring that the portfolio of projects you choose to undertake is as impactful as it can be.</p>
<p>Because of this dynamic, projects that top up or build human (or physical) capital may have strategic benefits for long-term impact. In taking on a project partly to build human capital, you’re explicitly targeting the future stream of returns in the impact equation but taking a hit on the <img src="https://latex.codecogs.com/png.latex?1/(1+i)%5Et"> part.</p>
<section id="example-of-building-human-capital-statschat" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="example-of-building-human-capital-statschat">Example of building human capital: StatsChat</h4>
<p>Artificial intelligence and machine learning are critical parts of data science, and staff at the Campus followed the developments in large language models such as ChatGPT with excitement. In the UK context, it very quickly became clear that there was huge interest across the public sector in large language models—and it would only be a matter of time before the Campus would be asked to do a project involving a large language model.</p>
<p>Rather than wait for the call, we took a decision to proactively get some experience with large language models<sup>4</sup> by creating an experimental website search function based on LLM-related technologies. Those of you familiar with the ONS website will be aware that the search functionality is, erm, less than optimal and <a href="https://datasciencecampus.ons.gov.uk/optimising-the-ons-site-search-function-with-google-analytics-and-natural-language-processing/">this isn’t the first time the Campus</a> has attempted to provide better search tools that central ONS services could use to improve the website.</p>
<div class="no-row-height column-margin column-container"><div id="fn4"><p><sup>4</sup>&nbsp;A lot of the credit for pushing this forward goes to my former colleagues in the Data Science Campus; while I was an early and enthusiastic supporter, they did all of the work. Ed Sherman and Andy Banks, plus Andy’s team, were key in making StatsChat happen.</p></div></div><p>The team built a demo app that, in examples, seems to dramatically improve the experience of using the ONS website while minimising the potential issues of LLMs, such as hallucinations. You can <a href="https://datasciencecampus.ons.gov.uk/using-large-language-models-llms-to-improve-website-search-experience-with-statschat/">read more about the project in this blog post</a>, but the basic steps were:</p>
<ul>
<li>create a document store of every publication on the ONS website with accompanying metadata</li>
<li>partition documents into chunks of roughly 1000 characters and converted these into vector embeddings using a sentence transformers model</li>
<li>run an embedding search algorithm to collect the most relevant web pages from a given user query</li>
<li>finally, use a generative question-answering (GQA) model to turn the most relevant retrieved documents into a concise and naturally phrased answer</li>
</ul>
<p>The project is very impressive. In one example, a user asks “how many people watched the kings [sic] coronation?”, and StatsChat correctly retrieves the information that “Around 6 in 10” people watched or planned to watch it.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://www.aeturrell.com/blog/posts/data-science-with-impact/statschat_example.png" class="img-fluid figure-img" style="width:65.0%"></p>
<figcaption class="margin-caption">An example of StatsChat in action.</figcaption>
</figure>
</div>
<p>Following this exploratory project, the team is in a much better place to use LLMs in future. And having a ready-made, cutting-edge improvement to the ONS’ website just waiting to be implemented by the Communications department isn’t a bad side outcome either. You can find the <a href="https://github.com/datasciencecampus/statschat-app">code here</a>.</p>
</section>
</section>
</section>
<section id="the-ways-that-data-science-can-have-impact" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="the-ways-that-data-science-can-have-impact">The ways that data science can have impact</h2>
<p>So far, we’ve looked at what impact with data science means and at some impact-related considerations around what projects data science teams take on. Now we’re going to look at the ways that data science work can have impact. I usually think of three:</p>
<ol type="1">
<li>Saving time or money in what’s already happening.</li>
<li>Enabling higher quality in what’s already happening.</li>
<li>Enabling new things to happen.</li>
</ol>
<section id="saving-time-or-money" class="level3">
<h3 class="anchored" data-anchor-id="saving-time-or-money">Saving time or money</h3>
<p>This is pretty simple: data science can enable an organisation to do things faster, cheaper, or with less human labour. There are a bunch of examples you could pick on but automating data processing that would otherwise be done manually is the one that occurs extremely frequently in analytical functions. A typical case would be updating a forecast with the latest data: how many forecasting organisations do this via manually updated spreadsheets? With data science (cloud computing, orchestration tools, code) you can schedule data processing jobs to happen whenever a website (perhaps that of a statistical office) is updated. Instead of tying up staff time on manual updates, the updated forecast can just take care of itself—leaving more time for thinking. There’s a book about Python called “Automate the Boring Stuff”, and I think that sums it up pretty nicely: with the boring stuff automated, people can focus on where they add value the most, which is usually more about thinking and strategy.</p>
</section>
<section id="enabling-higher-quality" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="enabling-higher-quality">Enabling higher quality</h3>
<p>There are so many examples where data science might improve quality. I’ve written recently about how <a href="../../../blog/posts/why-have-a-model-registry/index.html">model registries can reduce model risk</a> for organisations. Data science tools for checking data for issues, like <a href="https://docs.greatexpectations.io/docs/">Great Expectations</a>, or for proactively finding examples that break code, like <a href="https://hypothesis.readthedocs.io/en/latest/">hypothesis</a>, have come on leaps and bounds. And switching from risky spreadsheets to easily auditable version-controlled code represents a phenomenal increase in quality (via a decrease in mistakes).<sup>5</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn5"><p><sup>5</sup>&nbsp;It’s very possible to make mistakes in code too, but the use of tests, version control, and the separation of data and logic make—in my view—analysis based on code inherently much less risky than analysis in spreadsheets. Every few months there is a massive spreadsheet-related data leak or costly mistake. Some of these are curated in the “horror stories” section of the <a href="https://eusprig.org/research-info/horror-stories/">European Spreadsheet Risks Interest Group</a>.</p></div></div><p>As a specific example, the Campus was asked to help with the NHS (National Health Service) Covid App. For those not familiar with the UK context, this app was promoted to the population at large and was very widely used during the Covid-19 pandemic. As such, it collected huge amounts of feedback (good and bad) via both the Apple App Store and the Google Play App Store. Due to the scale of use of the app, there was too much feedback for even a substantial team to read through it all.</p>
<p>A team from the Campus worked with the NHS to use a data science method, called topic modelling, and a data science tool, a dashboard, to help software developers triage the most impactful issues so that they could be fixed first.</p>
<p>You can <a href="https://datasciencecampus.ons.gov.uk/understanding-nhs-coronavirus-covid-19-app-reviews-using-topic-modelling/">read more about this project here</a>, but the bottom line is that there were limited resources to work on the app but the data scientists involved were able to ensure that these resources were focused on improving the app’s quality in the most impactful way. They did this by using data science methods to capture common themes even if the people reporting them had used quite different phrasing. One innovation that was particularly helpful to developers was the ability to spit out a ‘canonical’ feedback text for each emerging topic: this stated the problem in plain English. The pipeline was run in the cloud.</p>
<p>Without the data science, improvements to the app would still have happened, but they would have had less impact.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://www.aeturrell.com/blog/posts/data-science-with-impact/nhs_app.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Screenshot of the dashboard summarising the most important issues to fix with the NHS Covid app.</figcaption>
</figure>
</div>
</section>
<section id="enabling-new-things-to-happen." class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="enabling-new-things-to-happen.">Enabling new things to happen.</h3>
<p>Data science opens up possibilities that simply did not exist before. This could be new analysis, measurement, and insight, but it could also be ways to deliver public services. I’m very taken with the example of the <a href="https://www.theguardian.com/world/2022/aug/29/french-tax-officials-use-ai-to-spot-20000-undeclared-pools">French tax authorities using satellite data to detect undeclared swimming pools</a> —something that would not have been possible before.</p>
<p>As a really good example, let’s look at how staff at the Data Science Campus developed new measurements of population mobility during the Covid-19 pandemic. At that time, policymakers were desperate for high frequency measures of mobility because mobility is a key determinant of how easily the virus is able to spread and because existing official statistics were released with a substantial lag.</p>
<p>In the UK, there are a large number of publicly-owned, publicly-accessible CCTV feeds. So Campus staff set up a cloud-based automatic data processing pipeline that:</p>
<ul>
<li>every ten minutes, woke up thousands of (virtual) cloud computers to draw down thousands of stills from CCTV cameras</li>
<li>ran an anonymisation algorithm on the images (blurring faces and vehicle number plates)</li>
<li>used a machine learning algorithm to recognise moving pedestrians, cars, vans, and cyclists and create counts of them</li>
<li>ran imputation algorithms on any missing data</li>
<li>aggregated those counts to the city level</li>
<li>put the counts into a storage database</li>
<li>periodically sent data from storage to statisticians at ONS to publish on the website (daily frequency data)</li>
</ul>
<p>Incredibly, this automatic cloud-based pipeline producing entirely new statistics with national urban coverage costs around £20 a day. To put this into context, and as best as I can determine from publicly available information, the Defra Environmental Survey costs ONS around £300 a day to run (averaged over a year). You can see the results for yourself in the figure below, <a href="https://datasciencecampus.ons.gov.uk/projects/estimating-vehicle-and-pedestrian-activity-from-town-and-city-traffic-cameras/">read about the project in more detail here</a>, <a href="https://github.com/datasciencecampus/chrono_lens">check out the code here</a>, or <a href="https://www.ons.gov.uk/economy/economicoutputandproductivity/output/datasets/trafficcameraactivity">download the stats here</a>.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://www.aeturrell.com/blog/posts/data-science-with-impact/cars_pandemic.svg" class="img-fluid figure-img" style="width:55.0%"></p>
<figcaption class="margin-caption">The activity of cars over the pandemic in six UK regions showing the timing of national lockdowns and the anticipatory effect.</figcaption>
</figure>
</div>
<p>It’s worth mentioning that this project would simply not have been possible without the use of cloud. Public sector institutions looking to get the most value from data science absolutely must empower their data scientists with cloud technologies. You can read more about unleashing the full productivity of data scientists with cloud <a href="../../../blog/posts/data-science-maturity/data-science-maturity.html">in this blog post</a>.</p>
<p>The traffic cameras project is a clear cut case of data science enabling something entirely new, in this case policy-relevant statistics.</p>
</section>
</section>
<section id="channels-for-data-science-to-have-impact" class="level2">
<h2 class="anchored" data-anchor-id="channels-for-data-science-to-have-impact">Channels for data science to have impact</h2>
<p>In this section, I look at exactly how the benefits of quality, savings, or new work happen, ie the channels through which data science can have impact. This is very much not comprehensive, but some main ones are:</p>
<ul>
<li><p><strong>information, to help people (the public, policymakers, whomever) make better decisions</strong>. The NHS app and the least cost grocery index are examples.</p></li>
<li><p><strong>supporting operational changes or procedures that will save money or improve welfare</strong>. Making operational changes is hard. One example, still in its early days, is improving the speed and accuracy of GDP statistics on public expenditure through the analysis of transparency declarations. You can read more about this work <a href="https://datasciencecampus.ons.gov.uk/exploring-trends-in-local-government-spending-through-transparency-declarations/">here</a>, but the bottom line is that expenditure by the public sector currently drops into the UK’s statistics office with a lag of around 9 to 12 months. By using transparency declarations, that is data on spending that is published by government departments and councils due to legislation, in addition to the usual collection methods, it might be possible to get that down to three months. The operation here is the assembly of national statistics. Other examples are helping to decide the placement of ambulances around rural areas to minimise response times, or deciding which <a href="https://arxiv.org/abs/1602.09067">buildings to prioritise for fire inspections</a> to minimise the chances of fires breaking out.</p></li>
<li><p><strong>teaching a person to understand data science so that they may go on and deliver benefits themselves</strong>. Clearly, if you teach 100 data scientists, and they all go out and do good, that’s going to be a bigger impact than if you just try and do everything yourself. At the Campus, we provided data and data science training of one form or another to 1000s of public sector workers a year. But it’s not just about teaching people to <em>do</em> data science, it’s also about helping senior leaders understand how they can use data science to achieve what they need to, and what sensible questions to ask of data or, indeed, data scientists. Many senior leaders will have heard of large language models by now, but they are far less likely to have heard of ETL (extract, transform, load) and automation tools that could have a much bigger impact, at least in the short run. My personal efforts in this space include <a href="https://aeturrell.github.io/coding-for-economists/intro.html">Coding for Economists</a> and <a href="https://aeturrell.github.io/python4DS/welcome.html">Python for Data Science</a>, aka Py4DS.</p></li>
</ul>
</section>
<section id="delivering-data-science" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="delivering-data-science">Delivering data science</h2>
<p>This is a bit more about projects in general than the previous sections: what can you do to ensure the delivery of a data science project? There are a few factors that I take into account when trying to judge.</p>
<section id="working-backwards" class="level3">
<h3 class="anchored" data-anchor-id="working-backwards">Working Backwards</h3>
<p>The first is to work backwards from the intended outcome, aka “working backwards”, as popularised by Amazon. In Amazon’s prescription, the steps are to:</p>
<ol type="1">
<li>Start by drafting the press release stating the outcomes you’ve achieved</li>
<li>Evaluate the opportunity—is it worth doing? (This goes back to the impact equation.)</li>
<li>Discover solutions and get stakeholder approval.</li>
<li>Build the high-level road map and identify themes.</li>
<li>Create the backlog and assign tasks.</li>
</ol>
<p>I think this is a good general guide but it’s also worth noting that some data science projects are highly exploratory or experimental, and it can be hard to have a roadmap or backlog up front. Uncertainty is fundamental in research. Amazon has certainly been able to use this model to innovate and deliver plenty though!</p>
</section>
<section id="talk-is-cheap" class="level3">
<h3 class="anchored" data-anchor-id="talk-is-cheap">Talk is cheap</h3>
<p>As part of evaluating the opportunity, I think it’s also good to ask: is the need plausible? Talk is cheap: quite often you’ll find folks saying they’re desperate for this or that data science project but they do have an incentive to get you to work on their thing rather than anyone else’s and you should question where those resources would really be best deployed (it could be in a project that no-one asked for). There are a few questions you can ask to sniff out how much of a priority a project really is for an instituion. Have other avenues been exhausted? Is there a maintenance plan in place? How long will it be used for? (That one goes back to the impact equation.) You need to be able to see the connection between the project and the outcome, and asking ‘how will this be used in practice?’ can illuminate the channels for the impact to happen. ‘How will it be used in practice?’ is particularly good at filtering out dashboards.</p>
</section>
<section id="feasibility" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="feasibility">Feasibility</h3>
<p>Feasibility is important too, and it’s not just a binary question—there are shades depending on what inputs will be available in addition to the core one, the labour of data scientists.</p>
<p>First, there’s often a very real question about whether the right data are available. It’s incredible what some organisations will spend on staff to then scrimp on data, even when they should in principle know about production functions. And the data don’t just need to exist, the permissions need to be in place. A data scientist’s strength is not in legal wrangling over data access, and you should clear such hurdles with the help of legal professionals in advance of a data scientist going anywhere near the project.</p>
<p>Likewise, organisations that spend huge sums on wages can skimp on capital, limiting the productivity of data scientists. <a href="https://twitter.com/TeraPauliina">Tera Allas</a>, Director of Research and Economics at McKinsey, has <a href="https://www.linkedin.com/posts/teraallas_productivityweek-dataisbeautiful-activity-7134895192649658370-DslF/">made this chart</a> showing how it’s a particular issue in the UK.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://www.aeturrell.com/blog/posts/data-science-with-impact/capital_stock_uk.jpeg" class="img-fluid figure-img" style="width:100.0%"></p>
<figcaption class="margin-caption">Capital is important for the productivity of data scientists. Chart by Tera Allas.</figcaption>
</figure>
</div>
<p>It’s always wise to check what capital is available before agreeing to a project. For example, at the Campus, we would downrate anything that had to be done on a particular legacy system because data scientists working on it reported that everything took 20 or 30% longer as compared to the best alternative system. Lower productivity means fewer projects means less impact, not to mention frustrated staff. You can do some simple back-of-the-envelope estimates that strongly suggest that skimping on hardware for data scientists makes poor business sense.<sup>6</sup> Because of the constraints of most enterprise IT systems this effectively means that anything where data scientists are in control of their own software and hardware, eg on cloud, looks relatively much more attractive—you can simply get more done. In the case of cloud, the monetary costs could be <em>lower</em> than using traditional on-premises hardware, though it does depend on what you’re doing and how carefully you’re doing it.</p>
<div class="no-row-height column-margin column-container"><div id="fn6"><p><sup>6</sup>&nbsp;A note on that back-of-the-envelope argument for investing in better capital for data scientists. The hardware used in many public organisations looks, at best, like a 1TB SSD, 16GB RAM, i7 touch laptop or surface running Windows. A quick check shows that these come in at £1500 and £2200 respectively from a major provider. For our high-end laptop, we’ll go for a 14-inch M3-chip MacBook Pro that can run small large language models locally (!) and has 24GB of RAM plus a 1TB SSD, which costs £2300. This is more RAM but also <a href="https://www.howtogeek.com/865066/its-okay-to-buy-a-mac-with-only-8-gb-ram/">each GB of RAM is more performant in a Mac</a>. Let’s say the cheaper hardware has three incidents a day where something glitches, crashes, or goes slow enough to pause a workflow and, on average, this causes three minutes of lost time during each occurrence. Now, imagine the average data scientist costs a business £74k a year (with pension, National Insurance, etc, etc) and works 7.5 hours a day, so 65p per working minute. This makes the cost of that lost time £1480 per year, compared to spending £100 to £800 more to get the higher end laptop. That’s just one year too: as far as I can tell, mid-range laptops usually last around three years while higher end laptops last more like five years–with some <a href="https://www.businessinsider.com/guides/tech/how-long-do-laptops-last">reports suggesting Apple laptops last even longer than this</a>. So it’s worth it even before we add on the other costs of worse capital, such as poorer staff retention. At the Campus, we issued most staff with MacBooks.</p></div></div></section>
<section id="constraints-and-dependencies" class="level3">
<h3 class="anchored" data-anchor-id="constraints-and-dependencies">Constraints and dependencies</h3>
<p>My point here about giving data scientists agency in the capital they use applies more generally too: what other constraints and dependencies are there? To state the obvious, optimisation under constraints is harder than optimisation. If there’s a constraint around using a particular system, it will be harder to have the same impact, all else equal. If there’s a critical dependency on another organisation over which you have is limited control, or if that org has limited incentives to help, it’s going to be harder to have impact than if the only dependencies are internal.</p>
<p>Dependencies can be a big problem in the public sector because there are frequently a very large number of stakeholders. Let’s say there are <img src="https://latex.codecogs.com/png.latex?N"> of them. Each big decision then needs to go through <img src="https://latex.codecogs.com/png.latex?N"> people, and a problem with a single stakeholder could hold up the entire project. If you have <img src="https://latex.codecogs.com/png.latex?M"> distinct decisions or changes in plan, you might be looking at as many as <img src="https://latex.codecogs.com/png.latex?N%20%5Ctimes%20M"> meetings simply to get a “yes” for everything in the best possible scenario. It’s even worse when there’s a web of dependencies. This simple arithmetic is one reason why it can be more efficient to gather stakeholders together at a single, regular event or even to just stick a website up and tell them to check it and report issues (if you have the luxury of talking about your project publicly while it’s still in train).</p>
<p>Apparently, Amazon worked hard to remove dependencies between teams to avoid this problem. Part of that was the Bezos Mandate that introduced APIs (find out more about APIs <a href="../../../blog/posts/the-prize-with-apis/the-prize-with-apis.html">here</a>) and service level agreements to reduce frictions in teams needing to liaise with one another just to get basic tasks done. The benefits of service interfaces go well beyond data scientists and it’s worth reading about the <a href="https://nordicapis.com/the-bezos-api-mandate-amazons-manifesto-for-externalization/">Bezos Mandate</a> if you haven’t come across it.</p>
</section>
<section id="potential-for-change" class="level3">
<h3 class="anchored" data-anchor-id="potential-for-change">Potential for change</h3>
<p>On a more strategic level, it’s important to ask: what genuine policy change or operational improvement will this result in? This is one of my great fears with dashboards. The information is beautifully presented to a decision-maker: so what? Do they have the power to actually make a change based on the new information?</p>
<p>Again, a more strategic point: will this problem still be the most important thing to work on by the time the project is complete? What we’re looking for here is some <em>time consistency</em>. The bruising nature of policy is that things move on <em>fast</em>, often faster than data science solutions can be put in place. Perhaps those solutions will be needed again in the future, and that should change the calculation. But there are going to be examples where the solution arrives too late to generate impact.</p>
</section>
<section id="incremental-delivery" class="level3">
<h3 class="anchored" data-anchor-id="incremental-delivery">Incremental delivery</h3>
<p>A major, major mistake I see repeated all the time in technology-leaning projects is trying to create a one-off, monolithic project will solve everything in one fell swoop. To see why this is a bad approach, imagine if, instead of trying to construct the world’s first computer to do basic arithmetic, the early engineers who built the ENIAC had decided to jump straight to building the latest smartphone. Inevitably, they would have failed. The knowledge of what works and what adds value in computing has been built up over decades of trial, error, and refinement.</p>
<p>The alternative that I believe delivers more impact overall is changing tack frequently in light of new information and chasing the highest value-add interventions first. To do this, projects need to be broken down into phases. You see it in software development all the time: add new feature, see if it helps, iron out bugs, repeat; You might even have developers working in separate branches of the same code base, making their contributions fully distinct and modular. At each phase, you have an opportunity to pause to re-evaluate the potential impact, to change course if necessary, or, and here’s the hardest part, to kill the project if you need to. It’s hard to stop projects before “completion” because we’re human and we get invested in the things we are doing. But sometimes it’s much better to acknowledge that it’s not going to deliver the way you thought, and to kill it in favour of moving onto more fertile ground. In particular, you want to avoid the situation where someone goes off for months and months without re-evaluating the project because the chances are that, despite their best intentions, they’ve veered off from the most impactful course.</p>
<p>There are some differences with data science that mean this approach is even more valuable. Lots of people don’t understand the strengths and weaknesses of data science, and how it can be most effectively be used: they might ask for something initially but gradually realise that another approach would serve them better. The fast paced nature of progress in data science also means it’s best to constantly re-evaluate.</p>
<p>In many ways, I’m arguing for an agile approach here, but it doesn’t have to be <a href="https://en.wikipedia.org/wiki/Agile_software_development">“Agile”</a> with a capital “A”. The point is that incremental delivery is—in most cases—the best way to wheedle your way to impact with a data science project.</p>
</section>
</section>
<section id="concluding-remarks" class="level2">
<h2 class="anchored" data-anchor-id="concluding-remarks">Concluding remarks</h2>
<p>Hopefully this has been a helpful deep dive into how best to have impact with data science but there’s a lot more that could be said on the topic, and I’d be delighted to read other thoughts if you have them!</p>


</section>


 ]]></description>
  <category>code</category>
  <category>python</category>
  <category>rstats</category>
  <category>data science</category>
  <category>public sector</category>
  <guid>https://www.aeturrell.com/blog/posts/data-science-with-impact/</guid>
  <pubDate>Mon, 13 Nov 2023 00:00:00 GMT</pubDate>
  <media:content url="https://www.aeturrell.com/blog/posts/data-science-with-impact/npv_cover.png" medium="image" type="image/png" height="40" width="144"/>
</item>
<item>
  <title>Why have a model registry?</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://www.aeturrell.com/blog/posts/why-have-a-model-registry/</link>
  <description><![CDATA[ 





<p>Many large institutions, including in the public sector, have a set of forecasts, predictions, or estimated statistical relationships (perhaps from a linear regression), that are key to their operations. In this post, I’ll run through how these institutions might benefit from a <em>model registry</em> of the kind that more digitally-savvy frontier firms are already using. And why, without one, an institution might be running <em>model risk</em> without even realising it.</p>
<p>If you’re not familiar with the idea of a <em>model registry</em>, it’s a service offered by all three major cloud providers (<a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry.html">Amazon Web Services</a>, <a href="https://cloud.google.com/vertex-ai/docs/model-registry/introduction">Google Cloud Platform</a>, and <a href="https://learn.microsoft.com/en-us/azure/machine-learning/how-to-manage-models">Microsoft Azure Platform</a>) that allows you to lodge models in a (private) repository online. You can also custom build your own model registry (and much more) using the wonderful open source package <a href="https://mlflow.org/docs/latest">MLflow</a>.</p>
<section id="what-even-is-a-model" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="what-even-is-a-model">What even is a model?</h2>
<p>The word “model” is doing a lot of work here: it means a digital artefact that is (usually) trained on some data and which either contains coefficient estimates or can make predictions or both. A linear regression is an example of a model. In the data science world, it would usually mean a trained machine learning model that can make new predictions given new inputs. Perhaps the most commonly used file format for models is pickle, with extension <code>.pkl</code>.<sup>1</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;Of course, I’m not naïve, I know people are out there building models in Excel. What I really mean is “the file format most commonly used by data professionals for models is pickle”. Today, almost undoubtedly, <code>.xlsx</code> is the most common file format for models but we’ll see why that’s not satisfactory.</p></div></div><p>Want to see an example of a simple model in code, and the command to save it to disk? Scroll down or click here.</p>
</section>
<section id="what-is-a-model-registry-and-why-do-i-need-it" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="what-is-a-model-registry-and-why-do-i-need-it">What is a <em>model registry</em> and why do I need it?</h2>
<p>If you’ve never come across one before, you can think of a model registry as a way to store, monitor, and log models and their properties. The pithiest description is that model registries do for models what GitHub and version control do for code. This metaphor goes quite far, as model registries also support a kind of <a href="https://wandb.ai/hamelsmu/model-registry/reports/What-is-CI-CD-for-Machine-Learning---VmlldzozNzk2NDg2">continuous integration</a> where performance metrics can be generated automatically on model upload.</p>
<p>You can easily imagine a situation where this could be helpful. Let’s say you’re working with a model that you’ve trained locally on your computer. Let’s also say that this model is critical to some decision, analysis, or operation that is happening in your institution. You might need to be able to collaborate with others on it: perhaps they will update it, perhaps they need to use it to make a prediction, or perhaps they just need to know that it exists because your institution is serious about keeping track of the critical models that are in use. One way of working is that the person who built the model does all of this, but then you’re squeezing everything through a key person if you do that—it could easily lead to problems. So, okay, you could share the model via a network drive or send it over email, but there are a bunch of problems with this too. Unless you’re sending it to everyone in the institution, email is pretty ineffective, and everyone is bad at manually doing version control through naming on a network drive. Plus, you have to find a way to make consistent model meta-data (eg on the pros and cons of that modelling approach) stay with the model file: good luck with that on a shared network drive!</p>
<p>Model registries solve the problem of securely storing, monitoring, tracking, and sharing models between people. The schematic below, from <a href="https://levelup.gitconnected.com/everything-you-need-to-know-about-model-registry-f7b978e84a1">this blog post</a>, gives a sense of what their components are. Note that “endpoints” are places where the model gets deployed such that it can make predictions. This could be an API, but another endpoint could simply be users downloading them and running them locally.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://www.aeturrell.com/blog/posts/why-have-a-model-registry/model_reg_img.png" class="img-fluid figure-img" style="width:100.0%" alt="Schematic of a model registry."></p>
<figcaption class="margin-caption">Schematic of a model registry.</figcaption>
</figure>
</div>
<p>Reasons you might want to use a model registry include:</p>
<ul>
<li>you want to have a central set of approved models that are logged. No more tracking models separately and inconsistently, via, say a spreadsheet—in a model registry, the log of models <em>is</em> the set of models.</li>
<li>you want to have meta-data about the model that is entwined with the model. Some basic meta-data, like the format of inputs and outputs, and even on performance, is usually included. This can be extended with information on a model’s limitations, strengths, and performance via something called a <a href="https://huggingface.co/docs/hub/model-cards">model card</a>. For example, you can <a href="https://aws.amazon.com/blogs/machine-learning/integrate-amazon-sagemaker-model-cards-with-the-model-registry/">link model cards with models in the Amazon SageMaker model registry</a>. You can <a href="https://modelcards.withgoogle.com/object-detection#overview">see an example model card for one of Google’s models here</a>. Model cards are a bit new but there is progress toward a consistent schema <a href="https://github.com/tensorflow/model-card-toolkit">in this toolkit</a>, which has an example based on classifying incomes in the census.</li>
<li>you want to be able to reproduce model results. Version controlling models in a registry buys you this.</li>
<li>you want to be able to know what you would have predicted in the past. For models, reproducibility across time can be essential to an institution: it’s not too much of a stretch to imagine there’s an enquiry or review where it is necessary to reproduce the exact model output that you had from a particular date.</li>
<li>you want to track the performance of a model over time. This is another advantage of versioning, and makes a task like assessing the quality of forecasts over time go from being a rum game of chasing down people, emails, and files to being as simple as running a short script.</li>
<li>you want others to be able to use your models. If there’s another team who rely on running your models, they no longer have to email you to ask—they just grab the latest version from the registry, and run it themselves. (Alternatively, the model <a href="../../../blog/posts/build-a-cloud-api/build-a-cloud-api.html">can be deployed to an API</a> where anyone in the institution can ping it for a prediction.)</li>
<li>you want to control access to the model. Sometimes, institutions need to provide different levels of access to different models, and model registries make this very possible, and at as granular a level as you like.</li>
<li>you want to make your models discoverable. This is a killer application. Models on network drives are not very discoverable, and their meta-data even less so. Model registries are designed to help people find the model they need.</li>
<li>you want to know how many people are using models, or do other auditing. Model registries are typically hosted, and the hosting service counts what is happening.</li>
<li>you want to automate reports about the number of models, their performance, how often they are used or updated, and so on. Once code is involved, everything becomes automatable!</li>
<li>you want to host models for free! Yes, just storing models in a registry is free for most cloud providers. (Other actions, such as deploying models to endpoints, do cost though.)</li>
<li>you want to make sure that you’re all using the same model. When you load a model from a registry, you pull it <em>directly</em> from the cloud repository—so there’s no chance of you accidentally changing a version that you’ve downloaded to your own machine and running something that’s inconsistent with the online version.</li>
</ul>
<p><em>Not</em> having some of these features comes with significant <em>model risk</em>. By model risk, I mean risks relating to models such as not knowing which model or model version was used in a particular decision or at a particular time, losing track of key models, people having access to sensitive models that they shouldn’t, not realising that a model’s performance has significantly degraded, and being unable to reproduce results that were used in critical decision making.</p>
<p>I said I would come back to models in Excel. In principle, you might (?) be able to store Excel models in a model registry and get some of these benefits (some, but definitely not all: you can’t deploy Excel to an API endpoint, for example, or use it with continuous integration). But Excel comes with so many other issues, I really don’t think you should. Some of the big ones are that they bundle code and data and model together, so you lose all the (not addressed in this post) benefits of version control, you lose control of data (very explicitly—<a href="https://www.nature.com/articles/d41586-021-02211-4">Excel changes your data</a>), and the code is repeated across cells, which makes some errors more likely.<sup>2</sup> The bottom line is that if the model is doing anything important, it shouldn’t be in a spreadsheet.</p>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;The classic examples are not pulling a formula down to cover all rows or columns and hard-pasting numbers over formula cells.</p></div></div></section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>If your institution relies on models in any way that’s even vaguely critical, it’s hard to see why you wouldn’t want most of the functionality of a model registry or the attendant reduction in risks it can provide. Additionally, this is pretty cheap (or even free), and, because cloud services are scriptable, very automatable, so it’s plausible that the extra functionality comes along with a <em>boost</em> in productivity. Model behaviour indeed!</p>
</section>
<section id="technical-appendix" class="level2">
<h2 class="anchored" data-anchor-id="technical-appendix">Technical Appendix</h2>
<section id="a-simple-model-in-code-as-an-example" class="level3">
<h3 class="anchored" data-anchor-id="a-simple-model-in-code-as-an-example">A simple model in code as an example</h3>
<p>The simplest model you can think of is something like the below, where we feed some data on the miles per gallon of cars into a regression.</p>
<div class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"></span>
<span id="cb1-3">mpg <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(</span>
<span id="cb1-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"https://vincentarelbundock.github.io/Rdatasets/csv/datasets/mtcars.csv"</span>,</span>
<span id="cb1-5">    dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mpg"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hp"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"disp"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cyl"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"category"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"wt"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>},</span>
<span id="cb1-6">)</span>
<span id="cb1-7">mpg.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="1">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">rownames</th>
<th data-quarto-table-cell-role="th">mpg</th>
<th data-quarto-table-cell-role="th">cyl</th>
<th data-quarto-table-cell-role="th">disp</th>
<th data-quarto-table-cell-role="th">hp</th>
<th data-quarto-table-cell-role="th">drat</th>
<th data-quarto-table-cell-role="th">wt</th>
<th data-quarto-table-cell-role="th">qsec</th>
<th data-quarto-table-cell-role="th">vs</th>
<th data-quarto-table-cell-role="th">am</th>
<th data-quarto-table-cell-role="th">gear</th>
<th data-quarto-table-cell-role="th">carb</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Mazda RX4</td>
<td>21.0</td>
<td>6</td>
<td>160.0</td>
<td>110.0</td>
<td>3.90</td>
<td>2.620</td>
<td>16.46</td>
<td>0</td>
<td>1</td>
<td>4</td>
<td>4</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Mazda RX4 Wag</td>
<td>21.0</td>
<td>6</td>
<td>160.0</td>
<td>110.0</td>
<td>3.90</td>
<td>2.875</td>
<td>17.02</td>
<td>0</td>
<td>1</td>
<td>4</td>
<td>4</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Datsun 710</td>
<td>22.8</td>
<td>4</td>
<td>108.0</td>
<td>93.0</td>
<td>3.85</td>
<td>2.320</td>
<td>18.61</td>
<td>1</td>
<td>1</td>
<td>4</td>
<td>1</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>Hornet 4 Drive</td>
<td>21.4</td>
<td>6</td>
<td>258.0</td>
<td>110.0</td>
<td>3.08</td>
<td>3.215</td>
<td>19.44</td>
<td>1</td>
<td>0</td>
<td>3</td>
<td>1</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>Hornet Sportabout</td>
<td>18.7</td>
<td>8</td>
<td>360.0</td>
<td>175.0</td>
<td>3.15</td>
<td>3.440</td>
<td>17.02</td>
<td>0</td>
<td>0</td>
<td>3</td>
<td>2</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Now we can fit a linear model, <code>lin_model</code>.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> statsmodels.api <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sm</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> statsmodels.formula.api <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> smf</span>
<span id="cb2-3"></span>
<span id="cb2-4">lin_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> smf.ols(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mpg ~ hp + C(cyl) + wt -1"</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>mpg).fit()</span></code></pre></div>
</div>
<p>This has a predict method, accessed via <code>lin_model.predict()</code>.</p>
<p>Okay, <em>here’s the important bit</em>: to save this model locally on your computer (ready to upload to a model registru), it would be <code>lin_model.save("lin_reg_model.pkl")</code>.</p>
<p>For this particular package, <strong>statsmodels</strong>, you can see a summary of the underlying model using <code>.summary()</code></p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">lin_model.summary()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="3">
<table class="simpletable caption-top table table-sm table-striped small" data-quarto-postprocess="true">
<caption>OLS Regression Results</caption>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">Dep. Variable:</td>
<td>mpg</td>
<td data-quarto-table-cell-role="th">R-squared:</td>
<td>0.857</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Model:</td>
<td>OLS</td>
<td data-quarto-table-cell-role="th">Adj. R-squared:</td>
<td>0.836</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">Method:</td>
<td>Least Squares</td>
<td data-quarto-table-cell-role="th">F-statistic:</td>
<td>40.53</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Date:</td>
<td>Fri, 13 Oct 2023</td>
<td data-quarto-table-cell-role="th">Prob (F-statistic):</td>
<td>4.87e-11</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">Time:</td>
<td>23:02:03</td>
<td data-quarto-table-cell-role="th">Log-Likelihood:</td>
<td>-71.235</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">No. Observations:</td>
<td>32</td>
<td data-quarto-table-cell-role="th">AIC:</td>
<td>152.5</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">Df Residuals:</td>
<td>27</td>
<td data-quarto-table-cell-role="th">BIC:</td>
<td>159.8</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Df Model:</td>
<td>4</td>
<td data-quarto-table-cell-role="th"></td>
<td></td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">Covariance Type:</td>
<td>nonrobust</td>
<td data-quarto-table-cell-role="th"></td>
<td></td>
</tr>
</tbody>
</table>


<table class="simpletable caption-top table table-sm table-striped small" data-quarto-postprocess="true">
<tbody>
<tr class="odd">
<td></td>
<td data-quarto-table-cell-role="th">coef</td>
<td data-quarto-table-cell-role="th">std err</td>
<td data-quarto-table-cell-role="th">t</td>
<td data-quarto-table-cell-role="th">P&gt;|t|</td>
<td data-quarto-table-cell-role="th">[0.025</td>
<td data-quarto-table-cell-role="th">0.975]</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">C(cyl)[4]</td>
<td>35.8460</td>
<td>2.041</td>
<td>17.563</td>
<td>0.000</td>
<td>31.658</td>
<td>40.034</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">C(cyl)[6]</td>
<td>32.4870</td>
<td>2.811</td>
<td>11.555</td>
<td>0.000</td>
<td>26.718</td>
<td>38.256</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">C(cyl)[8]</td>
<td>32.6601</td>
<td>3.835</td>
<td>8.516</td>
<td>0.000</td>
<td>24.791</td>
<td>40.530</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">hp</td>
<td>-0.0231</td>
<td>0.012</td>
<td>-1.934</td>
<td>0.064</td>
<td>-0.048</td>
<td>0.001</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">wt</td>
<td>-3.1814</td>
<td>0.720</td>
<td>-4.421</td>
<td>0.000</td>
<td>-4.658</td>
<td>-1.705</td>
</tr>
</tbody>
</table>


<table class="simpletable caption-top table table-sm table-striped small" data-quarto-postprocess="true">
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">Omnibus:</td>
<td>2.972</td>
<td data-quarto-table-cell-role="th">Durbin-Watson:</td>
<td>1.790</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Prob(Omnibus):</td>
<td>0.226</td>
<td data-quarto-table-cell-role="th">Jarque-Bera (JB):</td>
<td>1.864</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">Skew:</td>
<td>0.569</td>
<td data-quarto-table-cell-role="th">Prob(JB):</td>
<td>0.394</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">Kurtosis:</td>
<td>3.320</td>
<td data-quarto-table-cell-role="th">Cond. No.</td>
<td>1.90e+03</td>
</tr>
</tbody>
</table>
<br><br>Notes:<br>[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.<br>[2] The condition number is large, 1.9e+03. This might indicate that there are<br>strong multicollinearity or other numerical problems.
</div>
</div>
</section>
<section id="creating-and-working-with-a-model-registry" class="level3">
<h3 class="anchored" data-anchor-id="creating-and-working-with-a-model-registry">Creating and working with a model registry</h3>
<p>It’s simpler than you might think to get started with a model registry; you can find the instructions for <a href="https://cloud.google.com/vertex-ai/docs/start/cloud-environment">Google Cloud’s Vertex AI model registry here</a>, for <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-registry.html">Amazon’s SageMaker registry here</a>, for <a href="https://learn.microsoft.com/en-us/azure/machine-learning/concept-machine-learning-registries-mlops?view=azureml-api-2">Microsoft’s Azure Machine Learning here</a>, and for the <a href="https://mlflow.org/docs/latest/model-registry.html#">MLflow model registry here</a>.</p>
<p>Once you’ve created a model registry, you can upload a model in a number of ways. Most providers give you at least three ways:</p>
<ul>
<li>through a user interface, manually</li>
<li>via a command line interface</li>
<li>via a Python package</li>
</ul>
<p>For example, once you’ve done the initial settings, <a href="https://learn.microsoft.com/en-us/azure/machine-learning/how-to-manage-models?view=azureml-api-2&amp;tabs=python%2Cuse-local#register-your-model-as-an-asset-in-machine-learning-by-using-the-sdk">uploading a model to Azure’s model registry</a> is achieved using their Python package via</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> azure.ai.ml.entities <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Model</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> azure.ai.ml.constants <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> AssetTypes</span>
<span id="cb4-3"></span>
<span id="cb4-4">file_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Model(</span>
<span id="cb4-5">    path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model.pkl"</span>,</span>
<span id="cb4-6">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>AssetTypes.CUSTOM_MODEL,</span>
<span id="cb4-7">    name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"local-file-example"</span>,</span>
<span id="cb4-8">    description<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Model created from local file."</span>,</span>
<span id="cb4-9">)</span>
<span id="cb4-10">ml_client.models.create_or_update(file_model)</span></code></pre></div>
<p>Although you can search for models in the user interface (see below for an example from Google), you can also search all models programmatically too. For example, in Azure, this is as simple as <code>client.search_registered_models(order_by=["name ASC"])</code>.</p>
<p>Loading models from the registry into your local workspace is similarly simple using, say, MLflow on Azure: <code>model = mlflow.pyfunc.load_model(f"models:/{model_name}/Staging")</code>. You can also deploy models online to an endpoint and query that too, and this is how the cloud providers typically assume you will use registered models.</p>
<section id="model-cards" class="level4">
<h4 class="anchored" data-anchor-id="model-cards">Model cards</h4>
<p>It’s fair to say that Amazon is ahead on model cards, with Google not having introduced them on their cloud service yet and Microsoft offering something that’s slightly different. You can <a href="https://aws.amazon.com/blogs/machine-learning/integrate-amazon-sagemaker-model-cards-with-the-model-registry/">find out how to link models on Amazon with model cards here for AWS</a>, and, as you’d expect, there’s a way to <a href="https://docs.aws.amazon.com/sagemaker/latest/dg/model-cards-create.html">programmatically upload this info using Python</a>.</p>
</section>
</section>
</section>
<section id="an-example-of-a-model-registry" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="an-example-of-a-model-registry">An example of a model registry</h2>
<p>The image below shows a view of a model registry in Google’s model registry, Vertex AI.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://www.aeturrell.com/blog/posts/why-have-a-model-registry/list_view_google_mr.jpg" class="img-fluid figure-img" style="width:100.0%" alt="A Google model registry with some models in."></p>
<figcaption class="margin-caption">Screenshot showing the model registry page on Vertex AI.</figcaption>
</figure>
</div>
<p>You can see high level information such as the name, number of versions, default version, deployment status, and type. If you click through to one of those models, you get a more detailed view.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://www.aeturrell.com/blog/posts/why-have-a-model-registry/single_model_view_google_mr.jpg" class="img-fluid figure-img" style="width:100.0%" alt="A single model's page in a Google model registry."></p>
<figcaption class="margin-caption">Screenshot showing a single model’s page in a Google model registry.</figcaption>
</figure>
</div>
<p>This view shows the labels applied to each version of a specific model, and more. One of the great features of a model registry is that performance can be automatically assessed (“continous integration”).</p>
<p>The image below shows an example of some metrics of this that live <em>within</em> the model registry:</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://www.aeturrell.com/blog/posts/why-have-a-model-registry/performance_view_google_mr.jpg" class="img-fluid figure-img" style="width:100.0%" alt="A single model's performance metrics in Google model registry."></p>
<figcaption class="margin-caption">Screenshot showing a single model’s performance metrics in Google model registry.</figcaption>
</figure>
</div>
<section id="metadata" class="level3">
<h3 class="anchored" data-anchor-id="metadata">Metadata</h3>
<p>Just as an example, here are some meta-data that might be associated with a model</p>
<pre class="text"><code>artifact_path: classifier
flavors:
  fastai:
    data: model.fastai
    fastai_version: 2.4.1
  python_function:
    data: model.fastai
    env: conda.yaml
    loader_module: mlflow.fastai
    python_version: 3.8.12
model_uuid: e694c68eba484299976b06ab9058f636
run_id: e13da8ac-b1e6-45d4-a9b2-6a0a5cfac537
signature:
  inputs: '[{"type": "tensor",
             "tensor-spec": 
                 {"dtype": "uint8", "shape": [-1, 300, 300, 3]}
           }]'
  outputs: '[{"type": "tensor", 
              "tensor-spec": 
                 {"dtype": "float32", "shape": [-1,2]}
            }]'</code></pre>


</section>
</section>


 ]]></description>
  <category>code</category>
  <category>open-source</category>
  <category>cloud</category>
  <category>data science</category>
  <guid>https://www.aeturrell.com/blog/posts/why-have-a-model-registry/</guid>
  <pubDate>Thu, 12 Oct 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Building an API in the cloud in fewer than 200 lines of code</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://www.aeturrell.com/blog/posts/build-a-cloud-api/build-a-cloud-api.html</link>
  <description><![CDATA[ 





<p>Cloud tools and Python packages have become so powerful that you can build a (scalable) cloud-based API in fewer than 200 lines of code. In this blog post, you’ll see how to use Google Cloud, Terraform, and FastAPI to deploy a queryable data API on the cloud.</p>
<p>The repository associated with this project <a href="https://github.com/aeturrell/deploy-api">can be found here</a> should you wish to try this for yourself.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://www.aeturrell.com/blog/posts/build-a-cloud-api/run_using_data.png" class="img-fluid figure-img" style="width:30.0%" alt="Image showing JSON returned by API."></p>
<figcaption class="margin-caption">An example of the API created in this blog post returning data.</figcaption>
</figure>
</div>
<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>The basic idea here is: create an image of a computer that serves up an API, stick it on a scalable cloud function, and let it rip so that anyone can query it.</p>
<p>Why might you want to deploy an API? I <a href="../../../blog/posts/the-prize-with-apis/the-prize-with-apis.html">covered this in a previous blog post</a> and the short answer is that they’re awesome at servicing data or prediction requests in an efficient way.</p>
<p>First, some caveats. I’m only counting lines of code for the API and the cloud infrastructure, not for the extraction and transform of the data we’ll be serving up. ie, this doesn’t count the code that creates the data, which is in the <code>etl</code> folder. This seems fair: I happened to pick a dataset that needed a bit of “E” and “T” love before being usable, but I could have started with any old dataset. Second: if you’re going to follow this and create your own scalable cloud API, you will need a Google Cloud account with the billing setup (or some free credits). Finally, be very careful not to share your cloud keys or your real terraform variable names if you are following this tutorial on a public repo. I’ve added the relevant files to the <code>.gitignore</code> file for those cloning the repo but you should be as cautious as ever when dealing with secrets that should not be shared publicly.</p>
<p>Okay, let’s look at the technologies we’re going to use.</p>
<section id="google-cloud-platform" class="level3">
<h3 class="anchored" data-anchor-id="google-cloud-platform">Google Cloud Platform</h3>
<p>Google Cloud Platform (GCP) provides a whole suite of cloud services, and is one of the major providers. It seems to have been made for data scientists, and has a great command line interface. The specific GCP components we’ll be using are:</p>
<ul>
<li>an image registry, to store the image of a computer than can serve up data via an API</li>
<li>Google Cloud Run, which actually serves up the computer image</li>
</ul>
<p>It’s worth nothing that Cloud Run is serverless, which means you don’t have to fiddle with back-end resources to run applications. It can scale up or down as needed. Essentially, Google are handling the back-end stuff so you don’t have to. Like any tech, it has its limitations, but it’s a great choice for a simple, pain-free API deployment based on a container.</p>
</section>
<section id="terraform" class="level3">
<h3 class="anchored" data-anchor-id="terraform">Terraform</h3>
<p>As cloud platforms have proliferated, there’s a danger of getting back to point-and-click interfaces, problems with reproducibility, vendor lock-in, and other things we try to avoid as data scientists. Terraform is a tool that helps you do “infrastructure as code”, ie to build, change, and version control cloud resources safely and efficiently. One of the advantages is, once you have specified it once, you can re-use a Terraform plan to create the same infrastructure again down the line.</p>
</section>
<section id="python-and-fastapi" class="level3">
<h3 class="anchored" data-anchor-id="python-and-fastapi">Python and FastAPI</h3>
<p>FastAPI is a Python package for building APIs that has a whole range of benefits:</p>
<ul>
<li>Very high performance.</li>
<li>Fast to code with fewer bugs, as picks up type hints and makes use of decorators.</li>
<li>Full code completion support.</li>
<li>Automatically creates interactive documentation.</li>
<li>Based on (and fully compatible with) the open standards for APIs: OpenAPI (previously known as Swagger) and JSON Schema.</li>
</ul>
<p>Let’s see an example of some of this good stuff. First, the API endpoint is incredibly simple to create. Say we have a dataframe, <code>df</code>, which has the data we’d like to serve in. To turn a Python function that serves up data according to particular cuts into an API we need only add a decorator, an <code>async</code> statement, and add type hints. Here’s a simplified version of the example that gets built through the rest of this blog post:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/year/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{year}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/geo_code/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{geo_code}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb1-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> read_item(year: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, geo_code: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb1-3">    json_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.loc[</span>
<span id="cb1-4">        (df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> year) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&amp;</span> (df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geo_code"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> geo_code), <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"deaths"</span></span>
<span id="cb1-5">    ].to_dict()</span>
<span id="cb1-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"year"</span>: year, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"geo_code"</span>: geo_code, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>: json_data}</span></code></pre></div>
<p>This simple declaration buys us a lot. If you hit the API endpoint from this repo with this query: <code>/year/notanumber/geo_code/E08000007</code>, ie a valid geographic code but year is not an integer, then <strong><a href="https://docs.pydantic.dev/latest/">pydantic</a></strong> data validation checks are automatically run and return the following error message to the user:</p>
<pre class="text"><code>{
  "detail": [
    {
      "type": "int_parsing",
      "loc": [
        "path",
        "year"
      ],
      "msg": "Input should be a valid integer, unable to parse string as an integer",
      "input": "notanumber",
      "url": "https://errors.pydantic.dev/2.4/v/int_parsing"
    }
  ]
}</code></pre>
<p>The API knows you didn’t pass a valid integer! The <code>year: int</code> part of the function declaration determines that any input to the year segment of the API must be an integer.</p>
<p>Okay, with a bit of context out of the way, let’s now walkthrough building an API. All of <a href="https://github.com/aeturrell/deploy-api">the code is available here</a>.</p>
</section>
</section>
<section id="initial-setup" class="level2">
<h2 class="anchored" data-anchor-id="initial-setup">Initial Setup</h2>
<section id="code-installs" class="level3">
<h3 class="anchored" data-anchor-id="code-installs">Code Installs</h3>
<p>Download and install <a href="https://developer.hashicorp.com/terraform/downloads"><strong>terraform</strong></a>. Do the same for <a href="https://python-poetry.org/"><strong>poetry</strong></a> and ensure you have a Python installation (this tutorial uses Python 3.10 and that version is baked into the <code>pyproject.toml</code> file that <strong>poetry</strong> uses—<a href="https://github.com/aeturrell/deploy-api/blob/main/pyproject.toml">link here</a>).</p>
</section>
<section id="create-a-google-project" class="level3">
<h3 class="anchored" data-anchor-id="create-a-google-project">Create a Google Project</h3>
<p>Get a <a href="https://console.cloud.google.com/">Google Cloud Account</a>.</p>
<p>Ensure you have the <a href="https://cloud.google.com/sdk/docs/install-sdk">Google CLI installed</a> and authenticated: once you have downloaded and installed it, run <code>gcloud init</code> to set it up. Then run <code>gcloud auth login</code> to ensure you are logged into your account. With these steps done, you can make changes to your Google Cloud account from the command line.</p>
<p>We’re now going to create a project on the command line.</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> projects create YOUR-PROJECT-ID</span></code></pre></div>
<p>You may wish to add some numbers to the end of the project name to ensure it is unique, as most obvious names are already taken (and, if a name is taken, project creation will fail). (Note that you will need to set the same project ID in your <code>terraform.tfvars</code> file, which we’ll come to later.)</p>
<p>Next up, switch the Google Cloud CLI to use this specific project:</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb4-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> config set project YOUR-PROJECT-ID</span></code></pre></div>
<p>Now we have to go to the <a href="https://console.cloud.google.com/">Google Cloud Console</a>. Navigate to the relevant project, and then create a new Service Account under IAM. The current <a href="https://console.cloud.google.com/iam-admin/serviceaccounts">URL is here</a>. A service account can be used to manage access to Google Cloud services.</p>
<p>In the new service account, click on Actions then Manage keys. Create a new key and download it as a JSON file—do not put it under version control! If you’re following this tutorial by cloning the <a href="https://github.com/aeturrell/deploy-api">associated repo</a>, you can put it in the <code>secrets</code> subdirectory with the name <code>google_key.json</code> because the contents of the <code>secrets</code> folder are not under version control—but always, always double check.</p>
<p>If you haven’t already, you’ll also need to set up billing, which can be found under Billing in the left-hand side navigation pane. For me, the cost of setting this up was less than 1 pence.</p>
</section>
<section id="terraforming-google-cloud-components" class="level3">
<h3 class="anchored" data-anchor-id="terraforming-google-cloud-components">Terraforming Google Cloud Components</h3>
<p>Terraform is a cross-cloud way of specifying resources. We’re going to use it enable a couple of cloud APIs and name an Artifact Registry. (This registry is eventually where we will push a docker image of our app.)</p>
<p><code>main.tf</code> is the main terraform file (<a href="https://github.com/aeturrell/deploy-api/blob/main/main.tf">link here</a>). It lists the API services that we’ll use from Google, gives them names, and also enables them too. There are a few distinct blocks:</p>
<ol type="1">
<li>terraform metadata</li>
<li>provider region and project information</li>
<li>a block representing the container registry API</li>
<li>(last two blocks) code that enables the registry and cloud run APIs</li>
</ol>
<p>One of the slightly confusing things about terraform is that it works out what order to apply these changes in itself, so we don’t have to worry about the fact that the blocks enabling APIs come after the blocks creating new resources under specific APIs.</p>
<p><code>.terraform.version</code> contains the version of terraform you’re using (run <code>terraform --version</code> to check).</p>
<p><code>variables.tf</code> provides meta-data on the variables needed in your project (<a href="https://github.com/aeturrell/deploy-api/blob/main/variables.tf">link here</a>).</p>
<p>In an extra file, that is not included in this repo and which shouldn’t be public, called <code>terraform.tfvars</code>, put the actual names of your Google Cloud Project variables. The contents will look like this:</p>
<pre class="text"><code>#  GCP settings
project_id = "YOUR PROJECT ID"
region = "YOUR REGION"

#  Artifact registry
registry_id = "YOUR ARTIFACT REGISTRY NAME"</code></pre>
<p>There should be an entry in this file for every variable in the <code>variables.tf</code> file.</p>
<p>Now run <code>terraform init</code>. If successful, you should see a message saying “Terraform has been successfully initialized!”.</p>
<p>Next, run <code>terraform plan</code>, which will think through what you’ve asked for in <code>main.tf</code>.</p>
<p>Finally, to create the GCP resources, it’s <code>terraform apply</code>. If successful, you will see a message saying: “Apply complete! Resources: 3 added, 0 changed, 0 destroyed.”</p>
<p>An alternative to using the last block of <code>main.tf</code> to enable the APIs is to use the Google Cloud CLI.</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> services enable artifactregistry.googleapis.com</span>
<span id="cb6-2"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> services enable run.googleapis.com</span></code></pre></div>
<p>You can check what services you have enabled with <code>gcloud services list --enabled</code>. If you’re doing a huge project and want to filter, you can of course <code>grep</code> your way to the info you’re interested in, eg <code>gcloud services list --enabled | grep run</code> to check whether <code>run.googleapis.com</code> is on the list.</p>
</section>
</section>
<section id="python-and-the-api" class="level2">
<h2 class="anchored" data-anchor-id="python-and-the-api">Python and the API</h2>
<section id="setup" class="level3">
<h3 class="anchored" data-anchor-id="setup">Setup</h3>
<p>Run <code>poetry config virtualenvs.in-project true</code> to make virtual environments be installed in the local project folder.</p>
<p>Run <code>poetry install</code> to install the Python env. If this has worked, you’ll see a <code>.venv</code> folder appear and, if you’re using it, Visual Studio Code might ask if you want to use the newly created environment for executing Python code. (Note that <code>poetry config virtualenvs.in-project true</code> doesn’t always play nicely with conda; there’s an <a href="https://github.com/python-poetry/poetry/issues/4055">open Poetry issue about this</a> but it <em>did</em> seem to work when in the <code>base</code> environment of conda.)</p>
<p>To try and help achieve high code quality, this repository uses <code>pre-commit</code>. You can run this using <code>poetry run pre-commit run --all-files</code>. As this is not essential, and the associated specification of packages isn’t really code, I didn’t include the file that specifies the pre-commit checks, <code>.pre-commit-config.yaml</code>, in the count of the number of lines of code.</p>
</section>
<section id="prepping-the-data" class="level3">
<h3 class="anchored" data-anchor-id="prepping-the-data">Prepping the data</h3>
<p>You can choose any small dataset you like here. In this case, because it’s more fun, I stitched together some data on deaths that was scattered across Excel files in a weird format for the API to serve up. You can <a href="https://www.ons.gov.uk/peoplepopulationandcommunity/birthsdeathsandmarriages/deaths/datasets/monthlyfiguresondeathsregisteredbyareaofusualresidence">find the original data files here</a>. For larger datasets, you’d want to do a “load” (the “L” in “ETL”) step too, and have the data live in a GCP database that gets queried by the API.</p>
<p>NB: the data are not included in the repo, you’ll need to run the Python scripts yourself!</p>
<p>There are a few Python scripts in a folder called <code>etl</code>. These perform the following functions:</p>
<ul>
<li><code>etl/extract.py</code> — downloads deaths data by geography from this ONS page, which has Excel files for each year. The script downloads them all. <a href="https://github.com/aeturrell/deploy-api/blob/main/etl/extract.py">Link</a>.</li>
<li><code>etl/transform.py</code> - this takes downloaded files, opens them, finds the relevant sheets, cleans them, and stacks them in a tidy format in a parquet file. <a href="https://github.com/aeturrell/deploy-api/blob/main/etl/transform.py">Link</a>. Challenges are:
<ul>
<li>Worksheet names change over time</li>
<li>File formats change (the file extension)</li>
<li>New data may be added in a new file, if the new data refer to January, or added into an existing file, if the month they refer to is not January</li>
</ul></li>
<li><code>etl/main.py</code> — this is a script that calls the extract and transform scripts in order to create the final dataset, <code>scratch/deaths_data.parquet</code>. <a href="https://github.com/aeturrell/deploy-api/blob/main/etl/main.py">Link</a>.</li>
</ul>
<p>To create the data we’ll be serving up later, it’s</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> run python etl/main.py</span></code></pre></div>
</section>
<section id="launching-the-api-locally-optional" class="level3">
<h3 class="anchored" data-anchor-id="launching-the-api-locally-optional">Launching the API locally (optional)</h3>
<p>To use FastAPI locally to serve up your API and check it works, you’ll need to have installed the Python environment (via <strong>poetry</strong>)</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> run uvicorn app.api:app <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--reload</span></span></code></pre></div>
<p>where app is the folder, <code>api.py</code> is the script, and app is the FastAPI application defined in <code>api.py</code>. This serves up an API in the form: <code>/year/{YEAR-OF-INTEREST}/geo_code/{GEO-CODE-OF-INTEREST}</code>. For example, if FastAPI is running on <a href="http://0.0.0.0:8080">http://0.0.0.0:8080</a>, then <a href="http://0.0.0.0:8080/year/2021/geo_code/E08000007">http://0.0.0.0:8080/year/2021/geo_code/E08000007</a> would serve up the 2021 deaths data for Stockport (which has UK local authority geographic code E08000007). You can also try <a href="http://0.0.0.0:8080/docs">http://0.0.0.0:8080/docs</a> to see how you get automatic interactive docs for free with FastAPI!</p>
</section>
</section>
<section id="deploying-the-api-to-the-cloud" class="level2">
<h2 class="anchored" data-anchor-id="deploying-the-api-to-the-cloud">Deploying the API to the cloud</h2>
<p>We already enabled the Cloud Run API using terraform. The plan now is: build a docker container with everything needed to serve up the API in, build the docker file into an image, upload the image to the artifact registry we created on Google Cloud, and then serve the API on Google Cloud Run. First, we need to ensure our env is reproducible in a docker file.</p>
<section id="building-the-docker-image" class="level3">
<h3 class="anchored" data-anchor-id="building-the-docker-image">Building the docker image</h3>
<p>You can make <strong>poetry</strong> (which this project uses) work in docker files but it can go wrong, so it’s easier to run:</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">poetry</span> export <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> requirements.txt <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--output</span> requirements.txt</span></code></pre></div>
<p>And have the docker file use the <code>requirements.txt</code>. Note that, because of this method of prepping the docker file, <code>requirements.txt</code> has been added to the <code>.gitignore</code> file. This follows the single source of truth rule: if we keep <code>requirements.txt</code> and <code>pyproject.toml</code> under version control simultaneously, it creates confusion as to which defines the environment. In this approach, it’s clear: <code>pyproject.toml</code> sets out the Python dependencies and <code>requirements.txt</code> is downstream of that.</p>
<p>Note that the dockerfile is just 16 lines of code and only includes the absolute bare minimum required to run the API.</p>
<p>Also note that the name <code>deaths_data.parquet</code> is hard-coded in the dockerfile. There’s probably a way to get it to pull the name of the data file from the <code>config.toml</code> file where it’s defined, but let’s keep things simple.</p>
</section>
<section id="testing-the-containerised-api-locally-optional" class="level3">
<h3 class="anchored" data-anchor-id="testing-the-containerised-api-locally-optional">Testing the containerised API locally (optional)</h3>
<p>You can check that your Dockerfile works locally first if you wish. To do this, run</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> build <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--pull</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--rm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-f</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dockerfile"</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-t</span> deploy-api:latest <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span></span></code></pre></div>
<p>to build it and then</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> run <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--rm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-it</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-p</span> 8080:8080/tcp deploy-api:latest</span></code></pre></div>
<p>to run it. You should get a message in the terminal that includes a HTTP address that you can go to (this isn’t really on the internet… it’s coming from inside the house!). Click on that and you should see your API load up. For example, if it’s on <a href="http://0.0.0.0:8080">http://0.0.0.0:8080</a> head to <a href="http://0.0.0.0:8080/docs">http://0.0.0.0:8080/docs</a> to check that the docs have loaded and try out the API.</p>
</section>
<section id="building-the-docker-image-for-google-cloud-run" class="level3">
<h3 class="anchored" data-anchor-id="building-the-docker-image-for-google-cloud-run">Building the docker image for Google Cloud Run</h3>
<p>Now we run into a complication. I’m using a Mac, which is on arm64 architecture, aka Apple Silicon. Most cloud services are Linux-based, which typically use amd64 chips. Naively building an image locally, and pushing it to Google Cloud, would result in an image that won’t actually run on Google’s architecture. So we need to use a multi-platform build, or just build to target a specific architecture. (Docker is supposed to solve this kind of problem, and it does, with a bit more effort.)</p>
<p>You need to use</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> buildx create <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--name</span> mybuilder <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--bootstrap</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--use</span></span></code></pre></div>
<p>to create a builder to take on image construction. Then, the magic command to build the image and push it to your google repo is:</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb13-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">docker</span> buildx build <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--file</span> Dockerfile <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb13-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--platform</span> linux/amd64 <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb13-3">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--builder</span> mybuilder <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb13-4">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--progress</span> plain <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb13-5">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--build-arg</span> DOCKER_REPO=REGION-docker.pkg.dev/PROJECT-ID/REPOSITORY-NAME/ <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb13-6">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--pull</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--push</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb13-7">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--tag</span> REGION-docker.pkg.dev/PROJECT-ID/REPOSITORY-NAME/deploy-api:latest .</span></code></pre></div>
<p>where REPOSITORY-NAME is the name of the <code>registry_id</code> variable in <code>terraform.tfvars</code>. Note the “platform” argument.</p>
</section>
<section id="deploy" class="level3">
<h3 class="anchored" data-anchor-id="deploy">Deploy</h3>
<p>Now deploy the app with</p>
<p><code>gcloud run deploy app --image REGION-docker.pkg.dev/PROJECT-ID/REPOSITORY-NAME/deploy-api:latest --region REGION --platform managed --allow-unauthenticated</code></p>
<p>All being well, you should get a message saying</p>
<pre class="text"><code>Deploying container to Cloud Run service [app] in project [PROJECT-ID] region [REGION]
✓ Deploying new service... Done.
  ✓ Creating Revision...
  ✓ Routing traffic...
  ✓ Setting IAM Policy...
Done.</code></pre>
</section>
</section>
<section id="heres-one-i-built-earlier" class="level2">
<h2 class="anchored" data-anchor-id="heres-one-i-built-earlier">Here’s one I built earlier!</h2>
<p>You can see a running version of the app from the repo here: <a href="https://app-qdvgjvqwza-nw.a.run.app">https://app-qdvgjvqwza-nw.a.run.app</a>. You can find <a href="https://app-qdvgjvqwza-nw.a.run.app/docs">the docs here</a>. And <a href="https://app-qdvgjvqwza-nw.a.run.app/year/2021/geo_code/E08000007">here’s an example that returns data</a>. Note that one constraint of Cloud Run is that it takes a moment to start if no-one has used the link for a while.</p>
</section>
<section id="final-thoughts" class="level2">
<h2 class="anchored" data-anchor-id="final-thoughts">Final Thoughts</h2>
<p>It’s worth noting that, if all your API is doing is serving up tabular data, there is an easier way to to this (even though building an API with FastAPI is so easy). You can use the excellent <a href="https://datasette.io/">datasette</a>. You can see a worked example of using it to <a href="https://github.com/aeturrell/datasette_particulate_matter">serve up some data here</a>. It seems like FastAPI would be much more useful with more unusually structured data, when you need to interact with data by writing as well as reading, or when you need Cloud Run to do other activities too (like pull from a Google database).</p>
<p>The commoditisation of cloud services, and the great developments in Python as a language, have made it far, far easier to create high quality APIs. Although there are a few components to get your head around here, it’s amazing how quickly you can create a working API—and how few lines of code are required.</p>


</section>

 ]]></description>
  <category>code</category>
  <category>open-source</category>
  <category>cloud</category>
  <category>data science</category>
  <category>python</category>
  <guid>https://www.aeturrell.com/blog/posts/build-a-cloud-api/build-a-cloud-api.html</guid>
  <pubDate>Wed, 27 Sep 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>The explosion in time series forecasting packages in data science</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://www.aeturrell.com/blog/posts/time-series-explosion/</link>
  <description><![CDATA[ 





<p>There have been a series of sometimes jaw-dropping developments in data science in the last few years, with large language models by far the most prominent (and with good reason). But another story has been the huge explosion in time series packages.</p>
<p>Were you really a tech firm circa 2020–2023 if you didn’t release your own time series package? Looking at what’s available and from who, maybe not: Facebook/Meta got the ball rolling with Prophet, but since then we’ve seen ones from Uber, LinkedIn, Amazon, Google, and Meta again. And it’s not hard to see why time series forecasting might be so valuable at these digital-first, data-rich firms. Just as with data orchestration tools, everyone else is seeing some benefit from their labours.</p>
<p>In the rest of this post, we’ll look at the new(ish) time series packages that are around, who built them, and what they might be good for.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://www.aeturrell.com/blog/posts/time-series-explosion/pymc_example.png" class="img-fluid figure-img" style="width:60.0%" alt="Posteriors for outturn, trend, and seasonality."></p>
<figcaption class="margin-caption">An example: forecasting airline passenger numbers in Bayesian package PyMC</figcaption>
</figure>
</div>
<section id="background" class="level2">
<h2 class="anchored" data-anchor-id="background">Background</h2>
<p>Of course, all of this began, at least in my mind, with Meta’s <a href="https://facebook.github.io/prophet/">Prophet</a>. This provided a quick solution to structural time series modelling out of the box. And it responded well to the needs of those with high frequency data by using Python’s <a href="https://pypi.org/project/holidays/">holidays</a> package to allow for holiday fixed effects. Being able to deal with hourly and daily data is crucial to tech firms inundated with data, so it’s easy to see why this was built in. And when the pandemic hit, and everything was changing day by day (sometimes exponentially), everyone else was suddenly interested in high-frequency data too.</p>
<p>Prophet has had some criticism, even getting <a href="https://ryxcommar.com/2021/11/06/zillow-prophet-time-series-and-prices/">some blame</a> for <a href="https://www.cnet.com/personal-finance/mortgages/what-happened-at-zillow-how-a-prized-real-estate-site-lost-at-ibuying/">Zillow’s struggles with property trading</a>. But I think it’s a bit unfair because Prophet moved data science forecasting on considerably: it performed well out of the box in a wide variety of situations and had support for high-frequency data that didn’t exist in many other packages at the time. In short, it’s actually a great package, and has become a kind of reference point for every other time series package—and it seems like it did start something.</p>
<p>Perhaps the <a href="https://mofc.unic.ac.cy/">forecasting competitions</a> and appearances of websites like papers with code, which has a <a href="https://paperswithcode.com/task/time-series-forecasting">time series forecasting</a> section, is driving innovation here too, alongside the aforementioned interest in actually using these tools in a business context.</p>
<p>Either way, data scientists are benefitting: the explosion hasn’t just been in the number of time series packages (which may not be adding much!), but in the number of methods on offer too. In particular, some of the latest machine learned-based time series forecasting methods are making it into the packages alongside classic methods such as ARIMA. This is quite a contrast from five or ten years ago when most people were relying on one or two approaches in a handful of packages, mostly <a href="https://www.statsmodels.org/"><strong>statsmodels</strong></a> in Python and <a href="https://github.com/robjhyndman/forecast"><strong>forecast</strong></a> plus a couple of others in R. Of course, new doesn’t necessarily mean better, but the innovation and choice are welcome, and it’s almost certainly easier now to find a time series forecasting tool that has good performance on your problem.</p>
<p>It’s worth saying that while these new packages bring lots that is good, like state of the art (SOTA) machine learning (ML) models, and super modern fast fitting algorithms, their understandable focus on the needs of tech firms can mean they’re less well-suited, at least out of the box, to lower frequency data.</p>
</section>
<section id="the-packages" class="level2">
<h2 class="anchored" data-anchor-id="the-packages">The packages</h2>
<p>So what does the landscape look like today? Well, of course, it depends on where we draw the line. Anything that can predict a number can be used for time series forecasting, so all of <a href="https://scikit-learn.org/">scikit-learn</a> and <a href="https://pytorch.org/">pytorch</a> would qualify. But we’re going to focus on packages that can do competent time series analysis more or less out of the box. Secondly, we’re going to focus more on forecasting than, say, classification or anomaly detection—though a lot of the libraries below offer these features too. Similarly, more time series feature discovery packages (<a href="https://github.com/alteryx/featuretools">featuretools</a>, <a href="https://github.com/blue-yonder/tsfresh">tsfresh</a>) have appeared, but we won’t cover those. Finally, I also ignored packages that didn’t seem to be under active development or being maintained.</p>
<p>Let’s dive into what’s on offer now for <em>time series forecasting</em>. The table below gives the name, organisation, and homepage of each package. The “About” column is largely drawn from the websites of these packages, with some extra context in italics.</p>
<p>As you can see from the table, we’re spoiled for choice right now. I guess you could say, for data scientists doing forecasting, times are good 😉.</p>
<table class="table-striped table-hover caption-top table">
<colgroup>
<col style="width: 20%">
<col style="width: 20%">
<col style="width: 60%">
</colgroup>
<thead>
<tr class="header">
<th>Package</th>
<th>Organisation</th>
<th>About</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td><a href="https://github.com/Nixtla/statsforecast">statsforecast</a></td>
<td>Nixtla</td>
<td><em>This seems highly optimised for speed</em>. StatsForecast offers a collection of widely used univariate time series forecasting models, including automatic ARIMA, ETS, CES, and Theta modeling optimized for high performance using numba. It also includes a large battery of benchmarking models. Some other claimed features are: fastest implementations of a bunch of algorithms; compatibility with Spark, Dask, and Ray; confidence intervals; support for exogenous variables; 500x faster than prophet; and 20x faster than pmdarima.</td>
</tr>
<tr class="even">
<td><a href="https://facebook.github.io/prophet/">Prophet</a></td>
<td>Facebook</td>
<td><em>The OG. Has an R version too.</em> “Forecasting time series data based on an additive model where non-linear trends are fit with yearly, weekly, and daily seasonality, plus holiday effects. It works best with time series that have strong seasonal effects and several seasons of historical data. Prophet is robust to missing data and shifts in the trend, and typically handles outliers well.”</td>
</tr>
<tr class="odd">
<td><a href="https://github.com/facebookresearch/Kats">Kats</a></td>
<td>Facebook</td>
<td>A kit to analyse time series data. A lightweight, easy-to-use, generalizable, and extendable framework to perform time series analysis, from understanding the key statistics and characteristics, detecting change points and anomalies, to forecasting future trends.</td>
</tr>
<tr class="even">
<td><a href="https://www.sktime.net/">sktime</a></td>
<td>Alan Turing Institute</td>
<td>Python framework for ML and AI with time series, full list of features <a href="https://www.sktime.net/en/stable/estimator_overview.html">here</a>.</td>
</tr>
<tr class="odd">
<td><a href="https://github.com/alkaline-ml/pmdarima">pmdarima</a></td>
<td>Alkaline ML</td>
<td>A statistical library designed to fill the void in Python’s time series analysis capabilities, including the equivalent of R’s auto.arima function.</td>
</tr>
<tr class="even">
<td><a href="https://linkedin.github.io/greykite/">greykite</a></td>
<td>LinkedIn</td>
<td>An open source Python library developed to support LinkedIn’s forecasting needs. Its main forecasting algorithm, called Silverkite, is fast, accurate, and intuitive, making it suitable for interactive and automated forecasting at scale. The Silverkite algorithm works well on most time series, and is especially adept for those with changepoints in trend or seasonality, event/holiday effects, and temporal dependencies. Its forecasts are interpretable and therefore useful for trusted decision-making and insights.</td>
</tr>
<tr class="odd">
<td><a href="https://github.com/uber/orbit">orbit</a></td>
<td>Uber</td>
<td>A Python package for Bayesian forecasting with object-oriented design and probabilistic models under the hood. Focuses on exponential smoothing and kernel-based time-varying regression.</td>
</tr>
<tr class="even">
<td><a href="https://unit8co.github.io/darts/">Darts</a></td>
<td>Unit8</td>
<td><em>This looks like an especially high quality package</em>. A python library for user-friendly forecasting and anomaly detection on time series. Contains a variety of models, from classics such as ARIMA to deep neural networks. Huge set of models.</td>
</tr>
<tr class="odd">
<td><a href="https://github.com/timeseriesAI/tsai">tsai</a></td>
<td>timeseriesAI</td>
<td><em>Seems like the best place to get SOTA ML time series forecasting capabilities</em>. tsai is an open-source deep learning package built on top of Pytorch &amp; fastai focused on state-of-the-art techniques for time series tasks like classification, regression, forecasting, imputation.</td>
</tr>
<tr class="even">
<td><a href="https://ts.gluon.ai/stable/">gluonts</a></td>
<td>Amazon</td>
<td>Probabilistic time series modelling in Python. GluonTS is a Python package for probabilistic time series modelling, focusing on deep learning based models, based on PyTorch and MXNet.</td>
</tr>
<tr class="odd">
<td><a href="https://neuralprophet.com/">neuralprophet</a></td>
<td>Stanford University</td>
<td><em>Has a focus on interpretability</em>. An easy to learn framework for interpretable time series forecasting. NeuralProphet is built on PyTorch and combines Neural Network and traditional time-series algorithms, inspired by Facebook Prophet and AR-Net.</td>
</tr>
<tr class="even">
<td><a href="https://github.com/salesforce/Merlion">merlion</a></td>
<td>salesforce</td>
<td><em>Focus on easy-to-use interface (including a GUI), so possibly good for colleagues who can’t code but need to use the latest forecasting models.</em> Provides an end-to-end machine learning framework that includes loading and transforming data, building and training models, post-processing model outputs, and evaluating model performance. It supports various time series learning tasks, including forecasting, anomaly detection, and change point detection for both univariate and multivariate time series.</td>
</tr>
<tr class="odd">
<td><a href="https://www.pymc.io/">PyMC</a></td>
<td>PyMC</td>
<td><em>This is a bit more build your own, but they just added support for <a href="https://discourse.pymc.io/t/pymc-experimental-now-includes-state-spaces-models/12773">state-space models</a> so it’s made it onto the list, and it has some good <a href="https://www.pymc.io/projects/examples/en/latest/gallery.html#time-series">time series examples</a> in the documentation.</em> PyMC is a probabilistic programming library for Python that allows users to build Bayesian models with a simple Python API and fit them using Markov chain Monte Carlo (MCMC) methods.</td>
</tr>
<tr class="even">
<td><a href="https://github.com/Nixtla/neuralforecast">neuralforecast</a></td>
<td>Nixtla</td>
<td><em>Another entry from Nixtla, but this time implementing high-performing neural network based time series forecasting. Less popular than its other package.</em></td>
</tr>
<tr class="odd">
<td><a href="https://github.com/winedarksea/AutoTS">AutoTS</a></td>
<td>winedarksea</td>
<td>Time series package for Python designed for rapidly deploying high-accuracy forecasts at scale. Includes naive, statistical, machine learning, and deep learning models.</td>
</tr>
</tbody>
</table>


</section>

 ]]></description>
  <category>code</category>
  <category>data science</category>
  <category>python</category>
  <category>time series</category>
  <guid>https://www.aeturrell.com/blog/posts/time-series-explosion/</guid>
  <pubDate>Mon, 11 Sep 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>TIL: Obsidian, and integrating it with Zotero</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://www.aeturrell.com/blog/posts/til-zotero-and-obsidian/</link>
  <description><![CDATA[ 





<p>I’ve long been interested in how best to store knowledge; so much that I wrote about it in <a href="&quot;../managing-public-sector-knowledge/managing-public-sector-knowledge.qmd&quot;">this post</a> (in the context of the public sector). Today I learned how to combine Obsidian and Zotero to make taking notes about research literature easier and more effective!</p>
<blockquote class="blockquote">
<p>Note: this is being posted under a tag called TIL or “today I learned”. These are shorter format posts that lower the barrier to blogging and capture a mini piece of learning. The idea for TILs has been inspired by Simon Willison’s own <a href="https://til.simonwillison.net/">TIL posts</a>. You can find the first TIL <a href="../../../blog/posts/til-how-to-break-xml/index.html">here</a>.</p>
</blockquote>
<section id="storing-knowledge-flexibly" class="level2">
<h2 class="anchored" data-anchor-id="storing-knowledge-flexibly">Storing knowledge flexibly</h2>
<p>One of the frustrations of the generally-excellent Microsoft OneNote, which I normally use for notes, is that it uses <em>mutually exclusive</em> pages for content. This means that you can’t have the same atomic piece of information (eg a note on a particular paper) filed under two different titles or concepts.</p>
<p>There are a couple of potential solutions to this. You could use a notes system that is label-based rather than file-based. Then an atomic piece of information can be labelled two ways. Another way to solve it is to create links between concepts, and this is the way that popular open-source note-organising software <a href="https://obsidian.md/">Obsidian</a> uses, so I thought I’d give it a try.</p>
<p>I’m new to Obsidian but have had my eye on it for a while because it uses Markdown. Apart from its simplicity, the markdown format is FAIR: findable, accessible, interoperable, and re-usable. Obsidian also happens to free and open source software, which can have benefits such as large numbers of users and creators focused on making the software as useful as possible (there are downsides too, naturally).</p>
<p>Obsidian describes itself as “the private and flexible note‑taking app that adapts to the way you think”, and indeed you have to specify where to store the notes you create. It acts as a fantastic front-end to a folder full of markdown files (called ‘vaults’), essentially. But it does additionally introduce the double-square bracket link, <code>[[concept]]</code>, which allows you to connect ideas <em>across</em> different atomic notes. Obsidian will display this in a graph too—helping you to visualise the space of ideas you’re working in. Early days, but so far I’ve been impressed.</p>
</section>
<section id="integrating-zotero" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="integrating-zotero">Integrating Zotero</h2>
<p>You might not be familiar with <a href="https://www.zotero.org/">Zotero</a>, but it’s an excellent, open-source programme for collecting and organising research literature in the form of citations (for example, .bib files) <em>and</em> the PDFs of the actual papers. It’s basically a database of your research literature, but it (very helpfully) also tracks any notes you might make on a paper <em>and</em> automatically extracts any text you highlight in a PDF into plain-text notes.<sup>1</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;It does some of what Mendeley did in its hey day, but is a lot better.</p></div></div><p>Now, imagine you want to use a hot key to <em>automatically</em> create an Obsidian note page that contains, for a specific paper, i) metadata on that paper, ii) notes you’ve made in Zotero on that paper, and iii) any annotations you made in Zotero on that paper. And imagine that, as well as all that, every time you need to link to a paper from your Zotero library that you already turned into an Obsidian note, you could just start typing <code>@</code> and get a drop down list of all your papers. <strong>Well, amazingly, you <em>can</em> do all of this</strong>. Honestly, it’s a revelation.</p>
<p>If you want to achieve this research-note-taking zen, you’ll need to follow a few steps. First, you’ll need to install Zotero and Obsidian, and a couple of add-ons:</p>
<ul>
<li>the better bibtex add-on for Zotero</li>
<li>the Zotero Integration plug-in for Obsidian</li>
</ul>
<p>I then configured a bunch of settings:</p>
<ul>
<li>In Zotero → Tools → Better Bibtex → Open Better Bibtex Settings, I changed the citation key formula to <code>auth.lower + '_' + shorttitle(1,1).lower + '_' + year</code> to get a paper like <em>Hörmann, Wolfgang, and Josef Leydold. “Continuous random variate generation by fast numerical inversion.” ACM Transactions on Modeling and Computer Simulation (TOMACS) 13, no. 4 (2003): 347-362.</em> to have a citekey of the form “hormann_continuous_2003”.</li>
<li>In Obsidian → Settings → Zotero Integration, I changed the ‘Note Import Location’ to a folder called <code>auto-notes-on-research</code>. This is for the built-in notes importer, which is very bare bones and I don’t expect to use, so this is mainly to ensure there’s no conflict between notes created this way and the way we’re about to create with custom settings.</li>
<li>I hit <code>Add Import Format</code> under Obsidian → Settings → Zotero Integration. I changed the name to “import-research-notes”, set the output path to <code>notes-on-research/{{citekey}}.md</code>, the bibliography style to <em>Nature</em> (which will usually be pre-installed with Zotero), and set the template to a markdown template that I’ll include at the end of the post. The markdown template is important: it controls what you’ll see when you import research as a note.</li>
<li>I went to Obsidian → Settings → Appearance → CSS snippets, opened the folder, and created a file I called <code>style.css</code>. I filled it with the contents at the end of this blog post, and then hit refresh.</li>
<li>I then went to Obsidian → Settings → Hotkeys, and typed “Zotero Integration: import-research-notes” into the search bar. I added a <kbd>⇧ Shift</kbd> + <kbd>⌃ Control</kbd> + <kbd>c</kbd> hotkey for import-research-notes.</li>
</ul>
<p>Right, if you’ve done all that you can enjoy your new setup. I realise it’s a bit confusing so I’ll spell out the workflow a bit more now:</p>
<ol type="1">
<li>In Obsidian, hit your hotkey, perhaps <kbd>⇧ Shift</kbd>+<kbd>⌃ Control</kbd>+<kbd>c</kbd> if you used the same setup as me.</li>
<li>You should see a search bar pop up in Zotero. Type in anything from the paper you’d like to include, select it with the arrow keys, then hit return.</li>
<li>In the <code>notes-on-research</code> subfolder of your Obsidian vault, you should now have a page for your paper (named with the citekey)!</li>
<li>If you want to link to this page once created, you can either use the standard double brackets or <code>@</code>, search for the paper, and then hit <kbd>⌥ Option</kbd> + <kbd>↵ Return</kbd>.</li>
</ol>
<p>If for any reason you don’t wish to use the hotkey, then you can click on the command palette and then type in Zotero, then select “Zotero Integration: import-research-notes”. Then proceed with steps 2 and 3.</p>
</section>
<section id="result" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="result">Result 🔥</h2>
<p>I’ve done an example run on a single paper, and this is the result:</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://www.aeturrell.com/blog/posts/til-zotero-and-obsidian/obsidian-research-note-page.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Example research page from an Obsidian note</figcaption>
</figure>
</div>
<p>You can see a note that has been made on the paper overall, and an annotation (which inherits the colour you used in Zotero originally) that also has a comment.</p>
<p>The way the template is put together, future updates to the paper will be added when you re-import it.</p>
<p>Later on, if you need to link to the Obsidian note on this then just use the double-bracket format. This paper has citekey <code>devocht_conceptualising_2021</code> so we would use <code>[[devocht_conceptualising_2021]]</code> to link to it.</p>
<p>That’s it for the main post—pretty amazing tech, I think you’ll agree, though a bit fiddly to set up. If you have any tips or strategies for using Zotero and Obsidian together, let me know!</p>
</section>
<section id="templates" class="level2">
<h2 class="anchored" data-anchor-id="templates">Templates</h2>
<p>As promised, here are the templates I used, which I got from <a href="https://github.com/nocona71/obsidian-literature-note">nocona71 on github</a>, but tweaked a little (only a little) for my needs.</p>
<p>The contents of <code>zotero-import-template.md</code>, which is in a subdirectory I called <code>templates</code>.</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">### {{title}}</span></span>
<span id="cb1-2">{{" "}}</span>
<span id="cb1-3">year: {{date | format ("YYYY")}}</span>
<span id="cb1-4">tags: research</span>
<span id="cb1-5">authors: {{authors}}</span>
<span id="cb1-6">{{" "}}</span>
<span id="cb1-7">Abstract:  {{abstractNote}}</span>
<span id="cb1-8">{{" "}}</span>
<span id="cb1-9">{{pdfZoteroLink}}</span>
<span id="cb1-10">{{" "}}</span>
<span id="cb1-11">{#- infer latest annotation Date -#}</span>
<span id="cb1-12">{% macro maxAnnotationsDate() %}</span>
<span id="cb1-13">   {%- set tempDate = "" -%}</span>
<span id="cb1-14">    {%- for a in annotations -%}</span>
<span id="cb1-15">        {%- set testDate = a.date | format("YYYY-MM-DD#HH:mm:ss") -%}</span>
<span id="cb1-16">        {%- if testDate &gt; tempDate or tempDate == ""-%}</span>
<span id="cb1-17">            {%- set tempDate = testDate -%}</span>
<span id="cb1-18">        {%- endif -%}</span>
<span id="cb1-19">    {%- endfor -%}</span>
<span id="cb1-20">    {{tempDate}}</span>
<span id="cb1-21">{%- endmacro %}</span>
<span id="cb1-22">{# infer earliest annotation date #}</span>
<span id="cb1-23">{%- macro minAnnotationsDate() -%}</span>
<span id="cb1-24">   {%- set tempDate = "" -%}</span>
<span id="cb1-25">    {%- for a in annotations -%}</span>
<span id="cb1-26">        {%- set testDate = a.date | format("YYYY-MM-DD#HH:mm:ss") -%}</span>
<span id="cb1-27">        {%- if testDate &lt; tempDate or tempDate == ""-%}</span>
<span id="cb1-28">            {%- set tempDate = testDate -%}</span>
<span id="cb1-29">        {%- endif -%}</span>
<span id="cb1-30">    {%- endfor -%}</span>
<span id="cb1-31">    {{tempDate}}</span>
<span id="cb1-32">{%- endmacro -%}</span>
<span id="cb1-33">{# infer latest note date #}</span>
<span id="cb1-34">{%- macro maxNotesDate() -%}</span>
<span id="cb1-35">   {%- set tempDate = "" -%}</span>
<span id="cb1-36">    {%- for n in notes -%}</span>
<span id="cb1-37">        {%- set testDate = n.dateModified | format("YYYY-MM-DD#HH:mm:ss") -%}</span>
<span id="cb1-38">        {%- if testDate &gt; tempDate or tempDate == ""-%}</span>
<span id="cb1-39">            {%- set tempDate = testDate -%}</span>
<span id="cb1-40">        {%- endif -%}</span>
<span id="cb1-41">    {%- endfor -%}</span>
<span id="cb1-42">    {{tempDate}}</span>
<span id="cb1-43">{%- endmacro -%}</span>
<span id="cb1-44">{#- infer earliest note date -#}</span>
<span id="cb1-45">{%- macro minNotesDate() -%}</span>
<span id="cb1-46">   {%- set tempDate = "" -%}</span>
<span id="cb1-47">    {%- for n in notes -%}</span>
<span id="cb1-48">        {%- set testDate = n.dateAdded | format("YYYY-MM-DD#HH:mm:ss") -%}</span>
<span id="cb1-49">        {%- if testDate &lt; tempDate or tempDate == "" -%}</span>
<span id="cb1-50">            {%- set tempDate = testDate -%}</span>
<span id="cb1-51">        {%- endif -%}</span>
<span id="cb1-52">    {%- endfor -%}</span>
<span id="cb1-53">    {{tempDate}}</span>
<span id="cb1-54">{%- endmacro -%}</span>
<span id="cb1-55">{# find earliest date of two dates #}</span>
<span id="cb1-56">{%- macro minDate(min1, min2) -%}</span>
<span id="cb1-57">        {%- if min1 &lt;= min2 -%}</span>
<span id="cb1-58">            {{min1}}</span>
<span id="cb1-59">        {%- else -%}</span>
<span id="cb1-60">            {{min2}}</span>
<span id="cb1-61">        {%- endif -%}</span>
<span id="cb1-62">{%- endmacro -%}</span>
<span id="cb1-63">{# find latest date of two dates #}</span>
<span id="cb1-64">{%- macro maxDate(min1, min2) -%}</span>
<span id="cb1-65">        {%- if min1 &gt;= min2 -%}</span>
<span id="cb1-66">            {{min1}}</span>
<span id="cb1-67">        {%- else -%}</span>
<span id="cb1-68">            {{min2}}</span>
<span id="cb1-69">        {%- endif -%}</span>
<span id="cb1-70">{%- endmacro -%}</span>
<span id="cb1-71"></span>
<span id="cb1-72">{# colorCategory to hex:</span>
<span id="cb1-73">"green": "#5fb236",</span>
<span id="cb1-74">"yellow": "#ffd400",</span>
<span id="cb1-75">"red": "#ff6666",</span>
<span id="cb1-76">"blue": "#2ea8e5",</span>
<span id="cb1-77">"purple": "#a28ae5",</span>
<span id="cb1-78">"magenta": "#e56eee",</span>
<span id="cb1-79">"orange": "#f19837",</span>
<span id="cb1-80">"gray": "#aaaaaa"</span>
<span id="cb1-81">#}</span>
<span id="cb1-82"></span>
<span id="cb1-83">{%- set colorToColorCategory = {</span>
<span id="cb1-84">"#ffd400": "yellow",</span>
<span id="cb1-85">"#ff6666": "red",</span>
<span id="cb1-86">"#5fb236": "green",</span>
<span id="cb1-87">"#2ea8e5": "blue",</span>
<span id="cb1-88">"#a28ae5": "purple",</span>
<span id="cb1-89">"#e56eee": "magenta",</span>
<span id="cb1-90">"#f19837": "orange",</span>
<span id="cb1-91">"#aaaaaa": "gray"</span>
<span id="cb1-92">}</span>
<span id="cb1-93">-%}</span>
<span id="cb1-94">{%- set colorCategoryToType = {</span>
<span id="cb1-95">"yellow": "Relevant / Important",</span>
<span id="cb1-96">"red": "Disagree",</span>
<span id="cb1-97">"green": "Important to me",</span>
<span id="cb1-98">"blue": "Question / Understanding / Vocabulary",</span>
<span id="cb1-99">"purple": "Reference / Term to lookup later",</span>
<span id="cb1-100">"magenta": "margenta",</span>
<span id="cb1-101">"orange": "orange",</span>
<span id="cb1-102">"gray": "gray"</span>
<span id="cb1-103">}</span>
<span id="cb1-104">-%}</span>
<span id="cb1-105">{# lookup Zotero colors in annotations with Category #}</span>
<span id="cb1-106">{%- macro colorCategoryToName(noteColor) -%}</span>
<span id="cb1-107">{%- if colorCategory<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">noteColor</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>-%}</span>
<span id="cb1-108">{{colorCategory<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">noteColor</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>}}</span>
<span id="cb1-109">{% else %}</span>
<span id="cb1-110">{{colorCategory<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"yellow"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>}}</span>
<span id="cb1-111">{%endif%}</span>
<span id="cb1-112">{%- endmacro -%}</span>
<span id="cb1-113"></span>
<span id="cb1-114">{%- macro colorToName(noteColor) -%}</span>
<span id="cb1-115">{%- if colorToColorCategory<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">noteColor</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>-%}</span>
<span id="cb1-116">{{colorCategoryToType<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">colorToColorCategory[noteColor]</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>}}</span>
<span id="cb1-117">{% else %}</span>
<span id="cb1-118">{{colorCategoryToType<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"orange"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>}}</span>
<span id="cb1-119">{%endif%}</span>
<span id="cb1-120">{%- endmacro -%}</span>
<span id="cb1-121"></span>
<span id="cb1-122"></span>
<span id="cb1-123">{%- set calloutHeaders = {</span>
<span id="cb1-124">"highlight": "Highlight",</span>
<span id="cb1-125">"strike": "Strike Through",</span>
<span id="cb1-126">"underline": "Underline",</span>
<span id="cb1-127">"note": "Sticky Note",</span>
<span id="cb1-128">"image": "Image"</span>
<span id="cb1-129">}</span>
<span id="cb1-130">-%}</span>
<span id="cb1-131">{# lookup callout headers by type of annotation #}</span>
<span id="cb1-132">{%- macro calloutHeader(type) -%}</span>
<span id="cb1-133">{%- if calloutHeaders<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">type</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>-%}</span>
<span id="cb1-134">{{calloutHeaders<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">type</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span>}}</span>
<span id="cb1-135">{% else %}</span>
<span id="cb1-136">{{Note}}</span>
<span id="cb1-137">{%endif%}</span>
<span id="cb1-138">{%- endmacro -%}</span>
<span id="cb1-139"></span>
<span id="cb1-140">{#- handle space characters in zotero tags -#}</span>
<span id="cb1-141">{%- set space = joiner(' ') -%} </span>
<span id="cb1-142">{%- macro printTags(rawTags) -%}</span>
<span id="cb1-143">    {%- if rawTags.length &gt; 0 -%}</span>
<span id="cb1-144">        {%- for tag in rawTags -%}</span>
<span id="cb1-145">            #zotero/{{ tag.tag | lower | replace(" ","_") }} {{ space() }} </span>
<span id="cb1-146">        {%- endfor -%}</span>
<span id="cb1-147">    {%- endif -%}</span>
<span id="cb1-148">{%- endmacro %}</span>
<span id="cb1-149"></span>
<span id="cb1-150">{#- handle | characters in zotero strings used in MD -#}</span>
<span id="cb1-151">{% macro formatCell(cellText) -%}</span>
<span id="cb1-152">{{ cellText | replace("|","❕")}}</span>
<span id="cb1-153">{%- endmacro %}</span>
<span id="cb1-154"></span>
<span id="cb1-155">{%- macro formatDate(testDate, dateFormat) -%}</span>
<span id="cb1-156">{%- if testDate -%}</span>
<span id="cb1-157">{{date | format (dateFormat)}}</span>
<span id="cb1-158">{%- endif %}    </span>
<span id="cb1-159">{%- endmacro %}</span>
<span id="cb1-160"></span>
<span id="cb1-161">{#- handle | characters in zotero strings used in MD -#}</span>
<span id="cb1-162">{# {%- set comma = joiner(', ') -%} </span>
<span id="cb1-163">{%- macro generateCreators(prefix) -%}</span>
<span id="cb1-164">{%- for creatorType, creators in creators | groupby("creatorType") -%}</span>
<span id="cb1-165">{{prefix}}{{ creatorType }}:: {{ space() }} </span>
<span id="cb1-166">    {%- for creator in creators -%}</span>
<span id="cb1-167">        {{ creator.firstName }} {{ creator.lastName }} </span>
<span id="cb1-168">        {%- if not loop.last -%}</span>
<span id="cb1-169">        {{comma()}}</span>
<span id="cb1-170">        {%- endif -%}</span>
<span id="cb1-171">    {%- endfor %}</span>
<span id="cb1-172">{% endfor -%}</span>
<span id="cb1-173">{%- endmacro -%} #}</span>
<span id="cb1-174"></span>
<span id="cb1-175">{#- generate fields based on Zotero properties -#}</span>
<span id="cb1-176">{%- macro generateFields(prefix) -%}</span>
<span id="cb1-177">{%- for field, property in fields -%}</span>
<span id="cb1-178">{%- if property.length &gt; 0 -%}</span>
<span id="cb1-179">{{ generateField(prefix, field, property) }}</span>
<span id="cb1-180">{%- endif -%}</span>
<span id="cb1-181">{%- endfor %}</span>
<span id="cb1-182">{%- endmacro -%}</span>
<span id="cb1-183"></span>
<span id="cb1-184">{{printTags(tags)}}</span>
<span id="cb1-185">{{ "" }}</span>
<span id="cb1-186"></span>
<span id="cb1-187">🔥🔥🔥everything above this line might change during an update 🔥🔥🔥</span>
<span id="cb1-188"></span>
<span id="cb1-189"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">## Notes and Annotations</span></span>
<span id="cb1-190"></span>
<span id="cb1-191">{% persist "notes" %}</span>
<span id="cb1-192">{{ "" }}</span>
<span id="cb1-193">{%- set newNotes = notes | filterby("dateModified", "dateafter", lastImportDate) -%}</span>
<span id="cb1-194">{% if newNotes.length &gt; 0 %}</span>
<span id="cb1-195"></span>
<span id="cb1-196">⬇️*Notes imported on: {{importDate | format("YYYY-MM-DD#HH:mm:ss")}}*⬇️</span>
<span id="cb1-197">{% for note in newNotes %}</span>
<span id="cb1-198"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">### 🟨 Note</span></span>
<span id="cb1-199">Modified: {{ note.dateModified | format("YYYY-MM-DD#HH:mm:ss") }}</span>
<span id="cb1-200">{{ "" }}</span>
<span id="cb1-201">{#- change heading level -#}</span>
<span id="cb1-202">{{ note.note | replace ("# ","### ") }}</span>
<span id="cb1-203"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">Link to note</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">](zotero://select/library/items/{{note.key}})</span></span>
<span id="cb1-204">{{printTags(note.tags)}}</span>
<span id="cb1-205">{{ "" }}</span>
<span id="cb1-206">---</span>
<span id="cb1-207">{% endfor %}</span>
<span id="cb1-208">{% endif -%} </span>
<span id="cb1-209"></span>
<span id="cb1-210">{% endpersist -%}</span>
<span id="cb1-211">{{ " " }}</span>
<span id="cb1-212"></span>
<span id="cb1-213">{{ " " }}</span>
<span id="cb1-214">{% persist "annotations" %}</span>
<span id="cb1-215">{{ " " }}</span>
<span id="cb1-216">{%- set newAnnotations = annotations | filterby("date", "dateafter", lastImportDate) -%}</span>
<span id="cb1-217">{% if newAnnotations.length &gt; 0 %}</span>
<span id="cb1-218">{{ " " }}</span>
<span id="cb1-219">⬇️*Annotation imported on {{importDate | format("YYYY-MM-DD#HH:mm:ss")}}*⬇️</span>
<span id="cb1-220"></span>
<span id="cb1-221">{# {% for color, colorCategory in colorToColorCategory %} #}</span>
<span id="cb1-222">{#-Filter empty colorCategory-#}</span>
<span id="cb1-223">{%- for annotation in newAnnotations -%}</span>
<span id="cb1-224">{# {% if loop.first -%} #}</span>
<span id="cb1-225">{# #### {{colorToName(color | lower)-}} #}</span>
<span id="cb1-226">{# {% endif %} #}</span>
<span id="cb1-227"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">&gt; </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">!annotation-{% if annotation.color %}{% if colorToColorCategory[annotation.color].length &gt; 0 %}{{colorToColorCategory[annotation.color]}}{% else %}yellow{% endif %}</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{% endif %} {{calloutHeader(annotation.type)}}</span></span>
<span id="cb1-228"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{%- if annotation.annotatedText.length &gt; 0 -%} </span></span>
<span id="cb1-229"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">&gt; {{-annotation.annotatedText | nl2br -}} (p. </span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">{{annotation.page}}</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">](zotero://open-pdf/library/items/{{annotation.attachment.itemKey}}?page={{annotation.page}}&amp;annotation={{annotation.id}})</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">){% endif %}{%- if annotation.imageRelativePath -%}</span></span>
<span id="cb1-230"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">&gt; ![</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">{{annotation.imageRelativePath}}|300</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-231"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{%- endif %}{%- if annotation.ocrText -%}</span></span>
<span id="cb1-232"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">&gt; {{-annotation.ocrText | nl2br-}}{%- endif -%}</span></span>
<span id="cb1-233"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{%- if annotation.comment -%} </span></span>
<span id="cb1-234"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">&gt;</span></span>
<span id="cb1-235"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">&gt; **comment:**</span></span>
<span id="cb1-236"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">&gt; {{annotation.comment | nl2br }}{% endif %}</span></span>
<span id="cb1-237"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">&gt; {{annotation.date | format("YYYY-MM-DD#HH:mm")}}</span></span>
<span id="cb1-238"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{%- if annotation.tags.length &gt; 0 %} </span></span>
<span id="cb1-239"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">&gt; {{printTags(annotation.tags)}}</span></span>
<span id="cb1-240"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{% endif %}</span></span>
<span id="cb1-241"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{% endfor -%}</span></span>
<span id="cb1-242"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{# {% endfor %} #}</span></span>
<span id="cb1-243"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">{%- endif -%}</span></span>
<span id="cb1-244"></span>
<span id="cb1-245">{% endpersist -%}</span></code></pre></div>
<p>And the contents of <code>style.css</code>, which I put in the hidden folder that can be found by following Obsidian → Settings → Appearance → CSS snippets.</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode css code-with-copy"><code class="sourceCode css"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* See https://lucide.dev for icon codes */</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* annotation */</span></span>
<span id="cb2-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.callout</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">data-callout</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"annotation-yellow"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span> {</span>
<span id="cb2-5">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">212</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-6">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-icon</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">lucide-highlighter </span></span>
<span id="cb2-7">}</span>
<span id="cb2-8"></span>
<span id="cb2-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.callout</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">data-callout</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"annotation-red"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span> {</span>
<span id="cb2-10">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">102</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">102</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-11">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-icon</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">lucide-highlighter </span></span>
<span id="cb2-12">}</span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.callout</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">data-callout</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"annotation-green"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span> {</span>
<span id="cb2-15">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">178</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-16">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-icon</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">lucide-highlighter </span></span>
<span id="cb2-17">}</span>
<span id="cb2-18"></span>
<span id="cb2-19"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.callout</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">data-callout</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"annotation-blue"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span> {</span>
<span id="cb2-20">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">168</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-21">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-icon</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">lucide-highlighter </span></span>
<span id="cb2-22">}</span>
<span id="cb2-23"></span>
<span id="cb2-24"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.callout</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">data-callout</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"annotation-purple"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span> {</span>
<span id="cb2-25">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">162</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">138</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">229</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-26">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-icon</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">lucide-highlighter </span></span>
<span id="cb2-27">}</span>
<span id="cb2-28"></span>
<span id="cb2-29"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.callout</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">data-callout</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"annotation-purple"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span> {</span>
<span id="cb2-30">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">162</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">138</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">229</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-31">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-icon</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">lucide-highlighter </span></span>
<span id="cb2-32">}</span>
<span id="cb2-33"></span>
<span id="cb2-34"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.callout</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">data-callout</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"annotation-magenta"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span> {</span>
<span id="cb2-35">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">229</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">110</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">238</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-36">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-icon</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">lucide-highlighter </span></span>
<span id="cb2-37">}</span>
<span id="cb2-38"></span>
<span id="cb2-39"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.callout</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">data-callout</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"annotation-orange"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span> {</span>
<span id="cb2-40">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">241</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">152</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">55</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-41">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-icon</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">lucide-highlighter </span></span>
<span id="cb2-42">}</span>
<span id="cb2-43"></span>
<span id="cb2-44"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.callout</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">data-callout</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"annotation-gray"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span> {</span>
<span id="cb2-45">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">170</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">170</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">170</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-46">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-icon</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">lucide-highlighter </span></span>
<span id="cb2-47">}</span>
<span id="cb2-48"></span>
<span id="cb2-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/* note */</span></span>
<span id="cb2-50"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.callout</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">data-callout</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"note-yellow"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span> {</span>
<span id="cb2-51">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">212</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-52">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-icon</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">lucide-sticky-note </span></span>
<span id="cb2-53">}</span>
<span id="cb2-54"></span>
<span id="cb2-55"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.callout</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">data-callout</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"note-red"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span> {</span>
<span id="cb2-56">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">102</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">102</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-57">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-icon</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">lucide-sticky-note </span></span>
<span id="cb2-58">}</span>
<span id="cb2-59"></span>
<span id="cb2-60"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.callout</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">data-callout</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"note-green"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span> {</span>
<span id="cb2-61">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">95</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">178</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">54</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-62">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-icon</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">lucide-sticky-note </span></span>
<span id="cb2-63">}</span>
<span id="cb2-64"></span>
<span id="cb2-65"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.callout</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">data-callout</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"note-blue"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span> {</span>
<span id="cb2-66">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">46</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">168</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">255</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-67">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-icon</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">lucide-sticky-note </span></span>
<span id="cb2-68">}</span>
<span id="cb2-69"></span>
<span id="cb2-70"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">.callout</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">[</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">data-callout</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"note-purple"</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">]</span> {</span>
<span id="cb2-71">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-color</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">162</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">138</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">,</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">229</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span>
<span id="cb2-72">  <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">--callout-icon</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">:</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">lucide-sticky-note </span></span>
<span id="cb2-73">}</span></code></pre></div>


</section>


 ]]></description>
  <category>writing</category>
  <category>research</category>
  <category>TIL</category>
  <guid>https://www.aeturrell.com/blog/posts/til-zotero-and-obsidian/</guid>
  <pubDate>Sat, 08 Jul 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>The self-storage problem meets chatGPT</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://www.aeturrell.com/blog/posts/self-storage-meets-chatgpt/</link>
  <description><![CDATA[ 





<p>In a previous post, I looked at four ways we might be able to establish the way that the number of <em>self-storage facilities</em> is trending over time. You can read that post using <a href="../../../blog/posts/self-storage-mystery/self-storage-mystery.html">this link</a>. Today, we’re going one step further with one of the options—scraping the websites of the main self-storage firms—and we’re going to do it with ChatGPT, the large language model from OpenAI. I mentioned in the previous blog post that</p>
<blockquote class="blockquote">
<p>Each location [of a self-storage facility] probably has a full address somewhere [on the firm’s website], so we could just scrape the entire website and use some kind of NLP to grab locations and hope that what gets picked up corresponds to the sites that are offered. There’d be some errors, like recording their primary office, but if you kept the page that the addresses were scraped from you could do something like eliminate any pages with just a single address.</p>
</blockquote>
<p>and</p>
<blockquote class="blockquote">
<p>A new feature just introduced by OpenAI, called <a href="https://platform.openai.com/docs/guides/gpt/function-calling">function calling</a>, makes this [using LLMs for analysis of web-scraped data] possible: essentially, it allows you to generate <em>structured</em> output from an LLM—think a JSON file—by defining a schema of data fields you’d like and then feeding it the text to find those fields.</p>
</blockquote>
<p>I also referenced the code by Kyle McDonald that <a href="https://gist.github.com/kylemcdonald/dbac21de2d7855633689f5526225154c">uses an LLM to query a Washington Post article</a>.</p>
<p>Well, reader, I tried out a very slightly modified version of Kyle’s LLM code on a URL for a self-storage firm and it worked!</p>
<section id="results" class="level2">
<h2 class="anchored" data-anchor-id="results">Results</h2>
<p>Here’s the code:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> openai</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bs4 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BeautifulSoup</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> os <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> environ <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> env</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> dotenv <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_dotenv</span>
<span id="cb1-6"></span>
<span id="cb1-7">load_dotenv()</span>
<span id="cb1-8"></span>
<span id="cb1-9">openai.api_key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> env[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"API_KEY"</span>]</span>
<span id="cb1-10">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://www.safestore.co.uk/storage-near-me/'</span></span>
<span id="cb1-11">html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(url).content</span>
<span id="cb1-12">soup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BeautifulSoup(html, features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"lxml"</span>)</span>
<span id="cb1-13">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.text.strip()</span>
<span id="cb1-14"></span>
<span id="cb1-15">functions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb1-16">    {</span>
<span id="cb1-17">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"extract_data"</span>,</span>
<span id="cb1-18">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Add the summary of all locations of self-storage sites to the list."</span>,</span>
<span id="cb1-19">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parameters"</span>: {</span>
<span id="cb1-20">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"object"</span>,</span>
<span id="cb1-21">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"properties"</span>: {</span>
<span id="cb1-22">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"addresses"</span>: {</span>
<span id="cb1-23">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"array"</span>,</span>
<span id="cb1-24">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"items"</span>: {</span>
<span id="cb1-25">                                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span></span>
<span id="cb1-26">                        },</span>
<span id="cb1-27">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"A list of any addresses that are found."</span></span>
<span id="cb1-28">                    },</span>
<span id="cb1-29">                },</span>
<span id="cb1-30">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"required"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"addresses"</span>],</span>
<span id="cb1-31">        },</span>
<span id="cb1-32">    }</span>
<span id="cb1-33">]</span>
<span id="cb1-34"></span>
<span id="cb1-35">messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb1-36">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a helpful assistant that extracts the addresses of self-storage facilities from the websites of self-storage firms as JSON for a database."</span>},</span>
<span id="cb1-37">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Extract all of the addresses from the following website: '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> text}</span>
<span id="cb1-38">]</span>
<span id="cb1-39"></span>
<span id="cb1-40">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> openai.ChatCompletion.create(</span>
<span id="cb1-41">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gpt-3.5-turbo-0613'</span>, functions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>functions, messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>messages)</span>
<span id="cb1-42"></span>
<span id="cb1-43"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'message'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'function_call'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'arguments'</span>])</span></code></pre></div>
<p>And the start of the output:</p>
<pre class="text"><code>{
  "addresses": [
    "Self Storage London and storage units near me...",
    "With over 49 stores in London and 130 storage centres nationwide",
    "Central London",
    "Battersea Park",
    "Camden Town",
    "Earls Court",
    "Kings Cross",
    "Notting Hill",
    "Paddington - Marble Arch",
    "East London",
    "Barking and Dagenham",
    "Bow",
    "Chingford - Walthamstow",
    "Crayford",
    "Ilford",
    "Orpington",
    "Romford",
    "Stoke Newington",
    ...</code></pre>
<p>You can see how ChatGPT has grabbed everything that could conceivably be an address here, which is why the first two entries aren’t what we’re looking for. But the rest of what it found absolutely is and I am impressed.</p>
</section>
<section id="practical-limitations-and-suggestions" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="practical-limitations-and-suggestions">Practical limitations and suggestions</h2>
<p>Of course, this is only part of the problem. I fed ChatGPT a URL that I had already checked contained the info on all of the locations, and finding that URL is a big task in the first place. It’s tricky for two reasons: one, we don’t know which part of a firm’s website the locations will be listed on; two, that page may change over time. Ideally, we’d have a multi-step process in which a spider or scraper would first sift through all of the pages of a given snapshot in time of a URL and pass those to a classifier that would check whether it was a page of locations. Finally, the LLM would extract the locations.</p>
<p>Even with this setup, we’re still stuck with going through the internet archive trying to find the snapshots (timestamps) of URLs to feed into the start of the pipeline. For example, from manual browsing around the log for http://www.shurgard.co.uk I found that the Internet Archive took a snapshot of the Shurgard website on 2nd August 2014, and you can find it <a href="https://web.archive.org/web/20140802153455/http://www.shurgard.co.uk">here</a>. Back in 2014, all the UK sites were found at this specific extension of the home URL of Shurgard: <a href="https://web.archive.org/web/20140802153455/http://www.shurgard.co.uk/self-storage-uk">https://web.archive.org/web/20140802153455/http://www.shurgard.co.uk/self-storage-uk</a>. Manually finding when each of the snapshots occurred would be really painful. The Wayback Machine (part of the Internet Archive, and possibly the most under-rated historical resource on the planet) has a nice user interface that lets you click on the next snapshot, but we would need a way to grab snapshots we can automate in code. Well, in this case, there’s good news: I recently discovered that the <a href="https://archive.org/web/">Wayback Machine</a> has a <a href="https://github.com/akamhy/waybackpy">Python API</a> with a function that can pull the closest snapshot to a given timestamp (no searching for snapshots manually). This means we might be able to find the relevant extension-URL with the sites on and then iterate through time programmaticaly hoping that it doesn’t change.</p>
<p>Here’s the code for retrieving the URL closest to 1st August 2014 as a test:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> waybackpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> WaybackMachineCDXServerAPI</span>
<span id="cb3-2"></span>
<span id="cb3-3">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'http://www.shurgard.co.uk/self-storage-uk'</span></span>
<span id="cb3-4">user_agent <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"YOUR USER AGENT"</span></span>
<span id="cb3-5">cdx_api <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> WaybackMachineCDXServerAPI(url, user_agent)</span>
<span id="cb3-6"></span>
<span id="cb3-7">near <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cdx_api.near(year<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2014</span>, month<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, day<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, hour<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, minute<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>)</span>
<span id="cb3-8"></span>
<span id="cb3-9">near.archive_url</span></code></pre></div>
<pre class="text"><code>'https://web.archive.org/web/20140802153455/http://www.shurgard.co.uk:80/self-storage-uk'</code></pre>
<p>It’s a perfect match to the URL we already knew about! So the recipe for scaling this up without a classifier too might look something like:</p>
<ul>
<li>Get a list of likely firm names (perhaps using the Open Street Map firm names we got in the previous blog post but being fully aware that you might miss firms that no longer exist, which is a bias in this method)</li>
<li>For each firm name, work out the likely URL that takes you to the page of sites of self-storage facilities run by that firm</li>
<li>Decide on a time grid to search by, say one URL per year</li>
<li>Throw ChatGPT at each year-firm URL and ask it to get the locations (ensuring you have some spending limits in place on your OpenAI account!)</li>
<li>Clean the locations up—removing anything with more than four words seems like a good place to start, given the above; remove duplicates of year-firm information—perhaps some firms only have snapshots once every two years, for example</li>
<li>Count the number of sites over time</li>
</ul>
<p>There were nine self-storage firms that OSM data found in the previous blog post, and perhaps a ten year period seems reasonable, so we’d be asking for 90 ChatGPT hits to get all of the data. In practice, some firms may not have existed ten years ago and we’d be pretty lucky to have the extension to the sites not change at all in that time: indeed, Shurgard is an exception; the URL to the list of sites only persists back to 2020 for Big Yellow and Ready Steady Store.<sup>1</sup> There are other problems: Access Self Storage has a fancier website that makes it harder for ChatGPT to get location information out. Optimistically though, this approach might be possible for most of the firms for a small number of years, and that would still give a good indication of the trend.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;Of course, the traditional way to solve problems like this in academic economics was to pay Research Assistants to do it manually, and then not put them on the paper as authors. Data collection <em>is</em> research: please put RAs on your papers!</p></div></div><p>If I get time, I might try out a more systematic data collection broadly following this recipe—then we might get a bit closer to finding an answer to the <a href="../../../blog/posts/self-storage-mystery/self-storage-mystery.html">mystery of self-storage</a> in the UK!</p>


</section>


 ]]></description>
  <category>code</category>
  <category>data</category>
  <category>analysis</category>
  <category>llm</category>
  <guid>https://www.aeturrell.com/blog/posts/self-storage-meets-chatgpt/</guid>
  <pubDate>Thu, 29 Jun 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>The mystery of stuff: why all the self-storage?</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://www.aeturrell.com/blog/posts/self-storage-mystery/self-storage-mystery.html</link>
  <description><![CDATA[ 





<p>There’s a mystery at the fringes of our towns and cities: beyond the concrete circulars and just off the dual carriageways, a seemingly growing amount of our stuff is collecting dust in purpose-built warehouses. The puzzle is why so many self-storage units have sprung up across the UK and what people are storing in them that they need so very rarely.</p>
<p>I should be clear: I don’t know if the number has increased or not. It just <em>seems</em> like their numbers have increased, and others have noticed this and remarked upon it to me too (I have some pretty thrilling conversations with data scientists and economists). It was ONS Fellow <a href="https://www.strath.ac.uk/staff/mcintyrestuartprofessor/">Professor Stuart McIntyre</a> who first asked me the question and I’ve been thinking about it since.</p>
<p>You may, by now, be wondering why you should care. This isn’t just about an interesting phenomenon with self-storage units, though that does seem worth exploring. What it’s really about is what we can find out about the <em>local sites</em> of firms. This could be a single, independent chippy, the site of a chain restaurant, or, indeed, an outpost of a self-storage firm. In short, lots of entities that people do care about.</p>
<p>So I thought it would be fun to at least look at what data are available to estimate the number of these self-storage units and whether it’s changing over time.</p>
<section id="hypotheses" class="level2">
<h2 class="anchored" data-anchor-id="hypotheses">Hypotheses</h2>
<p>Although this post is more about the how, it’s fun to think a little bit about the ‘why?’ too.</p>
<p>In films, books, and television, storage units are shady places where murderers keep their grisly trophies or international criminal gangs stash ill-gotten gains. In practice, they’re likely to be a place to dump furniture that there’s no space for, and this suggests a few explanations.</p>
<p>Maybe the falling cost of budget furniture is partly behind the rise in storage units or perhaps it’s our ageing population that, sadly, often means clearing out the houses of elderly relatives after they are gone (but which their descendants can’t quite bear to part with). Of course, house prices are high so using storage may be cheaper than having a bigger home, but it’s a lot less convenient if you need something. You can imagine people converting their garages to extra bedrooms and stashing their junkier items in storage.</p>
<p>Having said that there could be economic reasons, these units are expensive! The price for 35 sq ft (3.5 square metres) in a self-storage place in Croydon is around £37 <em>a week</em>. You have to really care about that stuff to pay that much to keep it. At a time when most people are cutting back, it seems strange to spend so much on just keeping some stuff that is rarely used.</p>
<p>Another potential explanation is that the market for second-hand goods has become deeper, so there’s more storage needed not in homes to park it while it’s waiting to be transacted.</p>
<p>There are lots of possible economic hypotheses behind the rise of self-storage, but for now what we want data to tell us whether or not this anecdotal effect is real or not.</p>
</section>
<section id="data" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="data">Data</h2>
<blockquote class="blockquote">
<p>‘“Data! Data! Data!”, he cried impatiently. “I can’t make bricks without clay.”’</p>
<p>—Sherlock Holmes</p>
</blockquote>
<p>Before you get too excited, there isn’t a killer data source here that I’m aware of. And it’s complicated by needing a <em>time series</em> rather than simply a cross-section, which means we need historical data. There are a range of different possible options we could pursue to <em>try</em> to get a handle on this:</p>
<ol type="1">
<li>Open Street Map data</li>
<li>UK firm-site level data, eg from the Interdepartmental Business Database</li>
<li>Using the Google Maps API to count sites</li>
<li>Scraping the websites of the main self-storage firms</li>
</ol>
<p>Let’s look at each of these strategies in turn.</p>
<section id="open-street-map-data" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="open-street-map-data">Open Street Map data</h3>
<p>So we’re going to use the crowd-sourced Open Street Map data to try to answer this question. It has a number of caveats: it’s only updated (items added or deleted) when a member of the public decides to update it. So it may not give a totally accurate picture of what’s going on, but it’s a fantastic resource nonetheless because it aspires to be comprehensive and consistent in its tags. While it may not give a perfect count of what’s out there, you hope that it might track it.</p>
<p>We will use the Open Street Map <a href="https://wiki.openstreetmap.org/wiki/Overpass_API">Overpass Turbo API</a> to do a query on all self-storage units in the UK. The query can be run <a href="https://overpass-turbo.eu/">here</a>.</p>
<pre class="text"><code>[out:json];
area["ISO3166-1"="GB"]-&gt;.uk;
(
  node["shop"="storage_rental"](area.uk);
  way["shop"="storage_rental"](area.uk);
  relation["shop"="storage_rental"](area.uk);
);
out center;</code></pre>
<p>In the interactive API, this produces a nice map of all ways and nodes (two types of object defined by the underlying data structures of Open Street Map).</p>
<p><img src="https://www.aeturrell.com/blog/posts/self-storage-mystery/overpass_results.png" class="img-fluid" alt="Map of self-storage units according to Open Street Map."></p>
<p>If you save the data to a GeoJSON file and open it with <a href="https://geopandas.org/"><strong>geopandas</strong></a>, you can then count up the number of instances using</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.read_file(Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"export.geojson"</span>))</span>
<span id="cb2-2">val_counts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>].value_counts()</span>
<span id="cb2-3">val_counts[val_counts<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>]</span></code></pre></div>
<table class="caption-top table">
<caption>Numbers of self-storage sites by firm, according to Open Street Map data</caption>
<thead>
<tr class="header">
<th style="text-align: left;">name</th>
<th style="text-align: right;"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td style="text-align: left;">Big Yellow Self Storage</td>
<td style="text-align: right;">40</td>
</tr>
<tr class="even">
<td style="text-align: left;">Safestore</td>
<td style="text-align: right;">38</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Access Self Storage</td>
<td style="text-align: right;">17</td>
</tr>
<tr class="even">
<td style="text-align: left;">Lok’nStore</td>
<td style="text-align: right;">14</td>
</tr>
<tr class="odd">
<td style="text-align: left;">UK Storage Company</td>
<td style="text-align: right;">9</td>
</tr>
<tr class="even">
<td style="text-align: left;">Ready Steady Store</td>
<td style="text-align: right;">6</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Storage King</td>
<td style="text-align: right;">5</td>
</tr>
<tr class="even">
<td style="text-align: left;">Shurgard Self Storage</td>
<td style="text-align: right;">5</td>
</tr>
<tr class="odd">
<td style="text-align: left;">Safestore Self Storage</td>
<td style="text-align: right;">4</td>
</tr>
</tbody>
</table>
<p>Unfortunately, this just doesn’t check out with other information. We can check how many units Big Yellow actually have on their website, and it’s far more than 40 (the total is 107). Partly, this is about matching records. We can check this with</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">val_counts.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.contains(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yellow"</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
<pre class="text"><code>11</code></pre>
<p>This means that 11 rows had a mention of “Yellow” in, whereas we expect only a single row (with all counts). If we sum up these rows as a rough proxy of what the number <em>should</em> be:</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">val_counts.loc[val_counts.index.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>.contains(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Yellow"</span>)].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
<pre class="text"><code>52</code></pre>
<p>We get 52, still far short of what we know the total is (assuming Big Yellow Self Storage’s website is up to date!)<sup>1</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;<em>Safestore</em> has 130 sites on its website, while OSM finds only 38, so this isn’t just a problem with <em>Big Yellow Self-Storage</em>.</p></div></div><p>Even if the numbers were correct, we don’t just need the number for today, we need it <em>over time</em>. This is an API query that, in principle, can help us understand the change since 2019 (when used in combination with the other data we already got).</p>
<pre class="text"><code>[out:json];
area["ISO3166-1"="GB"]-&gt;.uk;
(
  node["shop"="storage_rental"](area.uk)(if: timestamp() &lt;= "2018-12-01T00:00:00Z");
  way["shop"="storage_rental"](area.uk)(if: timestamp() &lt;= "2018-12-01T00:00:00Z");
  relation["shop"="storage_rental"](area.uk)(if: timestamp() &lt;= "2018-12-01T00:00:00Z");
);
out center;</code></pre>
<p>Again, you can export the results to a GeoJSON file and open it with <strong>geopandas</strong> and <em>then</em> compare it:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">df_time <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> gpd.read_file(Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"export_pre_2019.geojson"</span>))</span>
<span id="cb8-2">df_time[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>].value_counts().<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>()</span></code></pre></div>
<p>In this query, we find only 33 sites <em>in total</em>, and only one Big Yellow Self Storage site.</p>
<p>This doesn’t check out either: using the ever-awesome internet archive, we can dial <a href="https://web.archive.org/web/20170225054741/https://www.bigyellow.co.uk/">the clock back to 25th Feb 2017</a> and lo and behold the website says:</p>
<blockquote class="blockquote">
<p>a network of 89 storage facilities across London and the UK in high profile, easy–to–access location</p>
</blockquote>
<p>Open Street Map is an amazing resource but, for this purpose, it just doesn’t have the information we’re looking for.<sup>2</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn2"><p><sup>2</sup>&nbsp;A similar exercise for <a href="https://web.archive.org/web/20110102193907/http://www.safestore.co.uk/default.aspx"><em>SafeStore</em></a> shows 90 locations in 2011, and <a href="https://web.archive.org/web/20160206185739/https://www.safestore.co.uk/">over 100 by 2016</a> but only one from OSM in 2017.</p></div></div></section>
<section id="uk-site-firm-level-data" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="uk-site-firm-level-data">UK site-firm level data</h3>
<p>The Inter-Departmental Business Register is an excellent within-government resource that does have some site-level information (but those who work on it note that there’s lots of pitfalls in using these data).<sup>3</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;ESCOE and ONS have done some great work trying to turn the IDBR into a longitudinal business database; check out the working paper <a href="https://escoe-website.s3.amazonaws.com/wp-content/uploads/2020/10/15063641/ESCoE-DP-2020-14.pdf">here</a>.</p></div></div><p>We could put in a request to the Office for National Statistics (ONS) to use the IDBR to produce the numbers of local units by firm but… they’d have to reject it! Even though you could walk down the street and see these units, and which firm they belong to, for yourself, it’s currently illegal for ONS to make firm-level data public even if it’s already in the public domain. The exact bit of legislation is outlined here:</p>
<blockquote class="blockquote">
<p>Unfortunately, we are unable to provide the names of organisations operating within a particular sector of the economy. Under s.39 of the Statistics and Registration Service Act 2007, personal information held by us (including that which identifies a body corporate), must not be disclosed. Furthermore, under s.9 of the Statistics of Trade Act 1947, the disclosure of information relating to an individual undertaking, obtained for statistical purposes, is prohibited. As the release of this information is prohibited by law, s.44 of the Freedom of Information Act 2000 applies.</p>
</blockquote>
<p><em>From a <a href="https://www.ons.gov.uk/aboutus/transparencyandgovernance/freedomofinformationfoi/companynames">note about firm names</a> on the ONS’ website</em></p>
<p>However, we could ask the ONS to aggregate the number of local units by the relevant SIC code and year and publish that. But we would need to be confident that these firms are i) represented by one SIC code and ii) all have accurate SIC codes. Looking at a couple of firms on Companies House, I can see that one (Big Yellow) has SIC code “64306 - Activities of real estate investment trusts” while another, Safestore, has “68209 - Other letting and operating of own or leased real estate”, and another has “68320 - Management of real estate on a fee or contract basis” which makes me think there are problems on both fronts. None of them even have the same 4-digit SIC codes!</p>
<p>If we were feeling bold, we might decide that existing data on <a href="https://www.ons.gov.uk/businessindustryandtrade/business/activitysizeandlocation/datasets/ukbusinessactivitysizeandlocation">Business Activity, Size, and Location</a> for one or more of these SIC codes could help us by acting as a proxy, but this dragnet approach would surely pull in lots of other kinds of business too. Furthermore, the data are available in separate Microsoft Excel files by year with empty cells and inconsistent formatting, so we’d have to spend some time writing code to extract the data in a consistent pattern. All not very satisfying.</p>
<p>Overall, it seems like official data aren’t going to be massively helpful here.</p>
</section>
<section id="google-maps" class="level3">
<h3 class="anchored" data-anchor-id="google-maps">Google Maps</h3>
<p>Google Maps holds some promise. A quick search <a href="https://www.google.com/maps/search/self-storage/@51.4908126,-0.1310567,13.53z?entry=ttu">using the browser-based map</a> shows me that there is a category called “self-storage facility”. If we could use the API version to get results for all of the UK, we might be onto a winner.</p>
<p>However, time is important in this question and (after checking with a Googler) there is no time dimension for Maps, it exists only in the present. Which is a shame because people would undoubtedly pay for snapshots in time and we could do a lot of interesting social analysis with it.</p>
<p>When you’re not looking for a time series dimension though, Google Maps could be a great choice.</p>
</section>
<section id="scraping-the-websites-of-the-self-storage-firms" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="scraping-the-websites-of-the-self-storage-firms">Scraping the websites of the self-storage firms</h3>
<p>In this approach, we would scrape the websites of the self-storage firms to get information on their physical sites. This option has legs; so much so that we used it to validate our attempt to get these data from OSM. It works.<sup>4</sup> The problem is that it requires us to scrape <em>all</em> of the websites of the self-storage firms and to also scrape their <em>historical</em> websites too (via the internet archive). That’s possible, but quite hard work, as my guess is that each firm-time combination will need a bespoke scraping solution.</p>
<div class="no-row-height column-margin column-container"><div id="fn4"><p><sup>4</sup>&nbsp;Some data firms, such as Glass.AI, have specialised in firm website data so they may have some better ideas as to how to do this.</p></div></div><p>There is one big limitation beyond needing bespoke scrapers: the internet archive doesn’t get <em>all</em> of a website, and so might be missing the key pages / information, especially if we rely on tricks like grabbing the address only.</p>
<p>That aside, how might you go about getting this data using a scraper? Each location probably has a full address somewhere, so we could just scrape the entire website and use some kind of NLP to grab locations and hope that what gets picked up corresponds to the sites that are offered. There’d be some errors, like recording their primary office, but if you kept the page that the addresses were scraped from you could do something like eliminate any pages with just a single address.</p>
<p>To put rocket boosters on this approach, you could use a large language model (LLM). A new feature just introduced by OpenAI, called <a href="https://platform.openai.com/docs/guides/gpt/function-calling">function calling</a>, makes this possible: essentially, it allows you to generate <em>structured</em> output from an LLM—think a JSON file—by defining a schema of data fields you’d like and then feeding it the text to find those fields. There’s a great prototype gist <a href="https://gist.github.com/kylemcdonald/dbac21de2d7855633689f5526225154c">here</a> that shows how to send an LLM a Washington Post article about a shooting and get it to extract salient information according to a schema. As it’s short, I’m including the code below. Note that not only is the schema defined, but there is a short description of each field too.</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> openai</span>
<span id="cb9-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb9-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb9-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> bs4 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BeautifulSoup</span>
<span id="cb9-5">url <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'https://www.lapdonline.org/newsroom/officer-involved-shooting-in-hollywood-area-nrf059-18ma/'</span></span>
<span id="cb9-6">html <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> requests.get(url).content</span>
<span id="cb9-7">soup <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> BeautifulSoup(html).find(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'div'</span>, class_<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'detail-cms-content'</span>)</span>
<span id="cb9-8">text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> soup.text.strip()</span>
<span id="cb9-9">functions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb9-10">    {</span>
<span id="cb9-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"extract_data"</span>,</span>
<span id="cb9-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Add the summary of a newsroom article to the database."</span>,</span>
<span id="cb9-13">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"parameters"</span>: {</span>
<span id="cb9-14">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"object"</span>,</span>
<span id="cb9-15">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"properties"</span>: {</span>
<span id="cb9-16">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>: {</span>
<span id="cb9-17">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span>,</span>
<span id="cb9-18">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"format"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span></span>
<span id="cb9-19">                    },</span>
<span id="cb9-20">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"violent"</span>: {</span>
<span id="cb9-21">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"boolean"</span>,</span>
<span id="cb9-22">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Does this describe a violent incident?"</span></span>
<span id="cb9-23">                    },</span>
<span id="cb9-24">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fatal"</span>: {</span>
<span id="cb9-25">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"boolean"</span>,</span>
<span id="cb9-26">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Does this describe a fatal incident?"</span></span>
<span id="cb9-27">                    },</span>
<span id="cb9-28">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in_custody"</span>: {</span>
<span id="cb9-29">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"boolean"</span>,</span>
<span id="cb9-30">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Did this happen in custody?"</span></span>
<span id="cb9-31">                    },</span>
<span id="cb9-32">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unintentional_discharge"</span>: {</span>
<span id="cb9-33">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"boolean"</span>,</span>
<span id="cb9-34">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Was this an unintentional discharge?"</span></span>
<span id="cb9-35">                    },</span>
<span id="cb9-36">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"injured"</span>: {</span>
<span id="cb9-37">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"array"</span>,</span>
<span id="cb9-38">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"items"</span>: {</span>
<span id="cb9-39">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span></span>
<span id="cb9-40">                        },</span>
<span id="cb9-41">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What are the names of the people who were injured, if any?"</span></span>
<span id="cb9-42">                    },</span>
<span id="cb9-43">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"deceased"</span>: {</span>
<span id="cb9-44">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"array"</span>,</span>
<span id="cb9-45">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"items"</span>: {</span>
<span id="cb9-46">                            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"string"</span></span>
<span id="cb9-47">                        },</span>
<span id="cb9-48">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What are the names of the people who are deceased, if any?"</span></span>
<span id="cb9-49">                    },</span>
<span id="cb9-50">                    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"serials"</span>: {</span>
<span id="cb9-51">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"array"</span>,</span>
<span id="cb9-52">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"items"</span>: {</span>
<span id="cb9-53">                                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"type"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"number"</span></span>
<span id="cb9-54">                        },</span>
<span id="cb9-55">                        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"What are the serial numbers of the officers involved?"</span></span>
<span id="cb9-56">                    }</span>
<span id="cb9-57">                },</span>
<span id="cb9-58">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"required"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"violent"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fatal"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in_custody"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unintentional_discharge"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"injured"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"deceased"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"serials"</span>],</span>
<span id="cb9-59">        },</span>
<span id="cb9-60">    }</span>
<span id="cb9-61">]</span>
<span id="cb9-62"></span>
<span id="cb9-63">messages <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb9-64">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"system"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"You are a helpful assistant that extracts summaries of LAPD newsroom articles as JSON for a database."</span>},</span>
<span id="cb9-65">    {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"role"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"user"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"content"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Extract a summary from the following article: '</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> text}</span>
<span id="cb9-66">]</span>
<span id="cb9-67"></span>
<span id="cb9-68">response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> openai.ChatCompletion.create(</span>
<span id="cb9-69">    model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gpt-3.5-turbo-0613'</span>, functions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>functions, messages<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>messages)</span>
<span id="cb9-70"></span>
<span id="cb9-71"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(response.choices[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'message'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'function_call'</span>][<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'arguments'</span>])</span></code></pre></div>
<p>And the output? Well, it’s quite magical:</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">{</span>
<span id="cb10-2">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"date"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"October 29, 2018"</span>,</span>
<span id="cb10-3">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"violent"</span>: true,</span>
<span id="cb10-4">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fatal"</span>: true,</span>
<span id="cb10-5">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"in_custody"</span>: false,</span>
<span id="cb10-6">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"unintentional_discharge"</span>: false,</span>
<span id="cb10-7">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"injured"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Officer Edward Agdeppa"</span>],</span>
<span id="cb10-8">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"deceased"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Albert Ramon Dorsey"</span>],</span>
<span id="cb10-9">  <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"serials"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">41000</span>]</span>
<span id="cb10-10">}</span></code></pre></div>
<p>This sort of approach could really work! There would be some more legwork involved in grabbing the URLs (past and present) of the biggest self-storage firms but that doesn’t seem insurmountable because the internet archive is well structured.</p>
</section>
</section>
<section id="conclusion" class="level2">
<h2 class="anchored" data-anchor-id="conclusion">Conclusion</h2>
<p>We’ve looked at four possible ways to answer how the number of self-storage facilities in the UK is changing over time. What’s amazing is that this information, which anyone could find out by driving round the country a bit, is so hard to get at. While self-storage facilities happened to be the topic of interest, the same applies to lots of other data that could be used to answer 100s of questions of relevance to the UK, so having ways to do this seems important.</p>
<p>In this example, only one route seems feasible: scraping firm websites with the help of the excellent internet archive and either a lot of manual graft or a highly experimental using a large language model!</p>
<p>Maybe I missed a way to get hold of this data? I’ll update the post if you can tell me other strategies. As for the LLM-approach we’ve found, I’m tempted to try it, and maybe you are too? Let me know!</p>


</section>


 ]]></description>
  <category>code</category>
  <category>data</category>
  <category>geospatial</category>
  <category>analysis</category>
  <category>llm</category>
  <guid>https://www.aeturrell.com/blog/posts/self-storage-mystery/self-storage-mystery.html</guid>
  <pubDate>Wed, 14 Jun 2023 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Data science maturity and the cloud</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://www.aeturrell.com/blog/posts/data-science-maturity/data-science-maturity.html</link>
  <description><![CDATA[ 





<p>Data science has enormous potential to do good in the public sector. The efficiencies that are possible from automation and reproducible analytical pipelines alone are huge—if you like this is improvement at <em>existing</em> tasks. Throw machine learning and advanced analytics into the mix and data science can also complete entirely new tasks, <em>expanding the horizon of what’s possible</em>. It’s an exciting time to be a data scientist.</p>
<p>And yet I regularly speak to data scientists who are frustrated in their roles because the tech in their organisation simply does not give them the ability to do their job in the best way possible; or, even worse, they do not have the <em>agency</em> to do their job well. Data science, and data scientists, need the right conditions to flourish.</p>
<p>So, if you’re looking at your own organisation’s data science offering, what are the key things you should be able to do? And how can we ensure that data scientists have them?</p>
<section id="how-to-check-an-organisations-data-science-maturity" class="level2">
<h2 class="anchored" data-anchor-id="how-to-check-an-organisations-data-science-maturity">How to check an organisation’s data science maturity</h2>
<p>This is a highly personal, non-empirical, experience-based list of what the essentials are for data scientists to be productive. To some extent, subsequent elements build upon previous ones.</p>
<ol type="1">
<li><strong>First of all, data scientists need an <em>integrated development environment</em> (IDE) to write their code in.</strong> No, this isn’t just a Jupyter Notebook, though vendors seem to think that’s all data scientists ever use (it’s great to have notebooks but they’re not enough on their own). It looks more like <em>Visual Studio Code</em> for most languages, or perhaps <em>RStudio</em> for R (though you can use <em>Visual Studio Code</em> for R too, as covered in <a href="../../../blog/posts/setting-up-r-in-vscode/index.html">this blog post</a>).</li>
<li><strong>Packages for the integrated development environment</strong>. Before you’re even writing code, you need the right extensions (aka packages) for your IDE to allow you to work effectively. For example, the <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">Python extension</a> is critical for using Python in Visual Studio Code. But there’s a bunch of others for markdown, automatically writing docstrings, colourising hex colour codes, integrating with github, sorting your package imports, writing latex, and on and on… These are essential to a (productive) data science workflow.</li>
<li><strong>A way to manage installations of programming languages that can execute code.</strong> This means installations of Python and R, but not just having a single version of those on a machine : data scientists need a way to manage <em>multiple</em> environments, usually on a per project basis. This might mean one project is on Python 3.8.8, while another is using Python 3.10. Data scientists need control of this, and tools such as <a href="https://python-poetry.org/">poetry</a> or <a href="https://www.anaconda.com/products/distribution">Anaconda</a> give it to them. With this, data scientists can execute their code.</li>
<li><strong>A way to install packages and libraries for base installations of programming languages.</strong> Python and R alone aren’t much good. Their power comes from extending them with, in the case of Python, 100s of thousands of extra code libraries. These libraries come from repositories such as PyPI and CRAN. In the case of Python, they are installed via an instruction on the command line that triggers dependency resolution and then a download over the internet. Both poetry and Anaconda can act as intermediaries to the Python repositories, and can be used as command line tools to install packages in specific coding environments.</li>
<li><strong>Access to the command line</strong>. A command line is a way to write instructions directly to a computer. Data scientists need it for all kinds of things, from install packages (see above) to renaming and moving files, to managing code environments (see 3). On some enterprise IT solutions, access to the command line is blocked. Windows doesn’t have a conventional command line (well, it does, but it uses a different set of commands, and has fewer useful tools).</li>
<li><strong>A way to put code under version control.</strong> It’s best practice for data scientists to put code under version control and it’s absolutely essential for collaboration and audit. In practice, this means an installation of git, the most popular version control tool. You can use git either through an integrated development environment (see 1) or through the command line (see above). Data scientists will also need a central repository service to share code with each other, usually Gitlab or Github</li>
<li><strong>The ability to create efficient stores of data, and to access data programmatically</strong>. It might seem like an absolute basic, but many organisations struggle with where to keep their data. There are infamous examples of public sector operations going wrong because of errors in spreadsheets and the bottom line is that neither data nor computations should be in spreadsheets. Data scientists need to be able to flexibly create stores of data on servers; putting data on a shared network drive does not suffice. For example, most data scientists will need to be able to create databases that their colleagues can also access. They also need to be able to access stored data programmatically (ie through analytical tools such as R and Python). Without efficient read and write options like these, data scientists are going to be slowed right down.</li>
<li><strong>A unix-like computing environment, for example Linux or MacOS.</strong> Microsoft’s Windows operating system has its strong points, (and, despite its cost, it’s a popular solution for public sector IT) but it’s not at all geared toward coding or automation. So much so that some modern data science libraries don’t work at all on Windows. There are a host of reasons behind this. They don’t matter, the point is the same: for data scientists, working on unix-like environments is just going to be a lot easier.</li>
<li><strong>Tooling around reproducibility.</strong> A key tenet of good data science, not to mention good analysis, is that it should be reproducible. Clearly this is important for reproducible analytical pipelines too. We’ve already met a few of the tools that can reproduce code environments (eg poetry and Anaconda), but data scientists also need tools to run pipelines (eg Make and Dagster), and even to reproduce entire operating systems (eg Docker). So these tools need to be available and usable, and a good test of an organisation is whether it can support the deployment of <a href="https://www.docker.com/">Docker</a> images.</li>
<li><strong>Continuous integration / continuous deployment, and the ability to schedule code execution.</strong> If we’re serious about getting data science solutions deployed in operation areas, it’s absolutely critical that data scientists can test code on the fly as part of pull requests, one element of continuous integration. And that, before deployment, a series of checks take place before something goes live. Far from having the ability to do these, many organisations would struggle to have a script that is executed at a regular frequency. Without the ability to schedule events and scripts, what data science can do is going to be severely limited to having a human in the loop—missing out on a lot of the potential benefits.</li>
<li><strong>The cloud.</strong> The reality of data science in 2023 is that much more can be achieved on the cloud than using a single laptop or on an on-prem machine (say a server sat in the basement). For example, if you’re working with data at enormous scales, you probably want to put it in something like Google’s BigQuery. I’m not even sure how you would deploy a machine learning model if not on the cloud—and asking how many models have been deployed to production is another good one for assessing an organisation’s data science maturity. There are emerging cloud services such as <a href="https://cloud.google.com/workstations">Google Cloud Workstation</a> and <a href="https://github.com/features/codespaces">Github Codespaces</a> that make getting started on cloud easier than ever, too. You may hear arguments that cloud isn’t safe. While I’m not sure I buy those arguments given the plausible alternatives, the policy of the UK government is cloud-first anyway—and <a href="https://www.gov.uk/guidance/government-cloud-first-policy">it has been since 2013</a>. Increasingly, the best practice principle is to <em>not</em> code <a href="../../../blog/posts/why-you-shouldnt-code/why-you-shouldnt-code.html">directly on your work laptop</a>. So if you encounter an organisation that is entirely on-prem for “security” reasons, I’d really question whether they have a comparative advantage in providing secure computing services and what trade-off with efficiency and functionality they’re implicitly making.</li>
<li><strong>The ability to compile code and install code-adjacent tools</strong>. While Python, R, and SQL do not need compiling in the same way that C++ does, they do sometimes write their own code that needs compiling. The packages that are front-ends to the Bayesian library Stan are great examples of this—even though you write a Python or R code, somewhere in the background code in another language needs to be compiled. Enterprise Windows laptops will block that compilation. Another example would be the popular Python geospatial data science package <a href="https://geopandas.org"><strong>geopandas</strong></a> which has a bunch of dependencies that aren’t in Python at all, but still need to be installed.</li>
</ol>
<p>Perhaps surprisingly, many organisations, even those with data scientists, struggle to provide 1—4.</p>
</section>
<section id="how-to-create-the-right-environment-for-data-science-to-flourish" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="how-to-create-the-right-environment-for-data-science-to-flourish">How to create the right environment for data science to flourish</h2>
<p>You’re probably interested in how an organisation can effectively achieve the environment that data scientists need to flourish. Looking at the list above, it might seem like a lot. But it’s actually not hard. Basically, an account with AWS (Amazon Web Services), GCP (Google Cloud Platform), or Azure (Microsoft’s cloud platform) will open up all of this. A lot of organisations get that far (though not all).</p>
<p>Where organisations then fall down is putting a barrier that stops data scientists provisioning their own specific services from these cloud providers: instead of giving data scientists a budget and telling them to do what they need to, individual cloud services are often managed by an intermediate layer: usually the IT department and sometimes an external vendor that aims to provide a complete solution.</p>
<p>On the face of it, this model makes sense: IT already provision and manage work laptops (plus all the programmes on them), why shouldn’t they also provision specific cloud services for data scientists? There are a few good reasons I personally don’t believe they should:</p>
<ul>
<li>the time of people in IT departments is usually extremely precious; we can save their time as much as possible by allowing data scientists to self-provision the services they need.</li>
<li>workers in IT departments are technical experts but are unlikely to be huge users of data science tools themselves—leading to a gap between data scientists’ needs and what is provisioned. The example of external vendors thinking data scientists just use Jupyter Notebooks for everything is classic. I have had (extremely helpful) colleagues in IT who were surprised that data scientists needed to use the command line.</li>
<li>having data scientists own the budget and directly provision their own services makes for a tighter feedback loop between costs and services. If that link is broken, people can unwittingly run up huge bills.</li>
<li>having data scientists be able to self-provision means they feel empowered and are faster at getting what they need. I heard of one public sector organisation where it takes two weeks and numerous forms and emails to set up a (basic) SQL database: the result is that no-one sets up a SQL database, even if that would be the best solution. In general, I think it’s a good principle to give experts a brief, a budget, an accountability framework, and then let them get on with the job—and this applies to data scientists here.</li>
<li>work laptops are typically used by all staff, and so they need to be fairly fool proof, which is why IT specialists are needed to manage the fleet of work laptops and to triage any issues. Data scientists are themselves technical experts, so do not actually need this level of service.</li>
<li>by introducing a threshold or barrier to the process (eg you have to use a service desk request to try something), you discourage innovation of the kind that may not work, but just might, if someone could just try something quickly.</li>
</ul>
<p>I’m not talking about data scientists choosing whether it’s GCP or AWS or whoever providing the cloud services here; the IT department or similar doing that makes a lot of sense. But within that outer wrapper, I think it makes much more sense for data scientists to choose the specific services they need without going through a middle layer.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://www.aeturrell.com/blog/posts/data-science-maturity/dallas-reedy-H83_BXx3ChY-unsplash.jpg" class="img-fluid figure-img" alt="A heart-shaped cloud floating by."></p>
<figcaption class="margin-caption">Avoid the wrong sort of cloud provision</figcaption>
</figure>
</div>
<p>If you stop to think about it, the model we usually use is the one where enabling functions determine a service provider then let people choose the specific products or services according to their local budget. The Chief Operating Office might choose which firm serves up food in the canteen, but the COO isn’t going to actually come to the canteen and force you to eat the salad; you get to choose within your budget. Similarly, back when organisations actually needed stationary, there was usually a high-level agreement with a supplier but local business areas would then decide what their area needed within their budget. Why should it be different for specific cloud services for experts like data scientists?</p>
<p>Some might say there are risks with this approach. For example, IT specialists are trained in security practices, or can build in security practices, that prevent data leaks or other things that keep Chief Information Officers up at night. I think data scientists could cover this just as well, though I think that we might need more training in it. I would also say that this apparently risky counter-factual is better than where we are right now: we have data leaks and errors because people are using the wrong tools and tech (cf the problems with Excel spreadsheets and people being forced to email data rather than programmatically access it because they cannot create databases or APIs). So I don’t really buy that there’s even a trade-off here. But even if there was we undervalue innovation because risks are tangible and apparent but the improvements we <em>could</em> achieve if we were to make a slightly different trade-off are not. Innovation may still be worth doing.</p>
<p>As noted by <a href="https://www.ft.com/content/5a4cf5b1-56ef-4445-bda3-20b81d1ef752">Tim Harford</a>, it’s quite telling that such a lot of innovation happened in the public sector during the pandemic when the usual rules (and, I must say, barriers) were temporarily suspended. I believe there’s a win-win-win here where data scientists are empowered to innovate and improve public services, budget holders can get accountability from those who are actually spending the money on cloud services, and ever-busy IT departments don’t have to manage cloud services on top of everything else.</p>


</section>

 ]]></description>
  <category>code</category>
  <category>python</category>
  <category>rstats</category>
  <category>data science</category>
  <category>cloud</category>
  <category>work chat</category>
  <category>public sector</category>
  <guid>https://www.aeturrell.com/blog/posts/data-science-maturity/data-science-maturity.html</guid>
  <pubDate>Wed, 01 Mar 2023 00:00:00 GMT</pubDate>
  <media:content url="https://www.aeturrell.com/blog/posts/data-science-maturity/dallas-reedy-H83_BXx3ChY-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>The public sector could be better at managing knowledge ‘data’: what can we do?</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://www.aeturrell.com/blog/posts/managing-public-sector-knowledge/managing-public-sector-knowledge.html</link>
  <description><![CDATA[ 





<p>Who thinks the public sector is good enough at managing its stock of knowledge; the ideas, strategies, processes, and decisions that go into the efficient provision of public goods and services? Not many, I’d wager. Which is odd, given the reputation for bureaucracy! In this post, I look at how good knowledge management could make public sector organisations more efficient and how that change might be effected–at least in the case of knowledge that is digitally recorded (aka knowledge data).</p>
<p>There are lots of reasons for poor knowledge management. The churn rate of staff in the public sector is high. This is anecdotal but it seems like the holder of most public sector jobs in the UK turns over every 18–24 months or so (tenures may be longer outside central government), taking with them a huge amount of knowledge about how to do the job. And what knowledge has been built-up in that time is very rarely transmitted by a handover note. There are also frequent enough re-organisations that the role may change, meaning a new role is a combination of several previous ones that, ideally, a newly hired member of staff would learn about by drawing on the experiences of multiple former staff.</p>
<p>Even if everyone writes down every little piece of information about their role, it can be hard for subsequent staff doing similar jobs to actually <em>find</em> that information. Some public sector organisations have no way of storing the stock of knowledge as data–they work entirely on flow, with emails carrying files. Others use a shared file system (aka a network drive) to store documents and, usually, it’s hard to properly search these for relevant documents–anyone who has used Window’s file search function over a network will know exactly what I mean. If you’re lucky enough to have a solution in place, that solution may be very limited too: a few organisations use Microsoft’s Sharepoint, but the filtering and search options are byzantine.</p>
<p>Perhaps most worryingly of all, there just isn’t always the bandwidth or culture behind good record managment. The public sector organisations of many countries have been under pressure to do more with less for a long time, and it’s very easy for “flow” to crowd out “stock”: that is, keeping good records and managing the stock of knowledge suffers because everyone is fighting the latest crisis or otherwise putting out 1001 small fires. Culturally, meetings, which are by their very nature ephemeral, are the primary unit of decision-making, idea discussion, and strategy making.</p>
<p>This is not to say that public sector organisations do not come up with lengthy strategies–there are numerous examples of those. But they tend to be outward looking and paint on a wide canvas. It’s the smaller, internal workings and ideas that don’t get recorded sufficiently to be later searchable and indeed (re-)usable.</p>
<section id="why-not-managing-the-stock-of-knowledge-data-makes-the-public-sector-less-effective" class="level2">
<h2 class="anchored" data-anchor-id="why-not-managing-the-stock-of-knowledge-data-makes-the-public-sector-less-effective">Why not managing the stock of knowledge data makes the public sector less effective</h2>
<p>There’s always a balance, but failing to manage the stock of knowledge data well is likely to lead to organisations being far less effective. To steal a phrase from history, those who fail to learn from the past are doomed to repeat its mistakes.</p>
<p>The problems facing public sector organisations that are structural are not easily remedied. Someone arriving in a new role might wonder why such and such a thing has not been tried, and plunge into trying out solutions. But, because of the stubbornness of the problem and the lack of record-keeping, it’s extremely likely that similar solutions have been tried before–so, at best, the new person isn’t able to build on where their predeccesors got to and, at worst, what they are pursuing is a complete waste of time.</p>
<p>It’s not just about steering away from what’s been tried (and has failed) before though; by having an easily searchable record of what was thought, reasoned, and decided, the possibility that someone can come along and synthesise a better solution is greatly raised. And even for the times when everyone has agreed a way forward, a new hire who can easily see what has gone before is going to be more effective more quickly. No-one should be having to start from scratch.</p>
<p>You might think that it would be unusual for someone to start from scratch. It isn’t. There’s a great story I’ve heard about a Civil Servant who had spent many years in a single large and important department. Every time there was a sudden desire for a policy that did this or that, instead of working up something new, he would simply walk over to his filing cabinet, flick through to the right section, and pull out all of the documents detailing the last time the policy had been discussed or even tried. We don’t use filing cabinets anymore, but we do still benefit when we can avoid repeating effort, so we must create digital filing cabinets from which we can pull out ideas whose time is right.</p>
<p>I also believe that simply knowing that every word you put down in a note is going to be searchable and available for posterity will encourage clarity of thought too. Any writing that’s going to a wider audience forces you to think more about how it will be read, and what to make clear. It may make you question whether what you’re doing is even the right priority.</p>
<p>There’s another nice efficiency that can be had from seeing the sweep of ideas that, say, an individual has laid out before: lancing BS. I’m sorry to say it, but, in large organisations, you do sometimes come across those who talk a lot of gibberish-filled nonsense while also delivering very little and, worst of all, wasting everyone else’s time. The vast majority of people are not like this, but there are some. They obfuscate and complicate, slowing down delivery. You have to work so hard to understand them, most sane people give up and move on–which is also how these particular individuals get away with it. Because we’re all talking in jargon a lot of the time, these tactics can be hard to spot straight away–but being able to search through the recorded content that a person has created is a quick way to find out if they are simply a convincing waffle-generator or someone trying to make progress happen.</p>
<p>Finally, there are often times when the wider public need to peek into the internal workings of the state, to understand how a particular decision was taken (or not taken), who was involved, and whether the risks were known. The UK’s Coronavirus Enquiry is a good example. Decent record keeping can be a huge boon for such public scrutiny when it happens–everyone will get clearer answers faster. (Of course, in the UK, constructive ambiguity has long been used to help fudge a way into a good outcome but I have no fear that this can continue whether good records are kept and are searchable or not.) The public will rightly expect that good records are being kept.</p>
</section>
<section id="what-can-we-do-about-it" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="what-can-we-do-about-it">What can we do about it?</h2>
<p>Changing culture is always about leadership and setting norms–that one is obvious. And creating the bandwidth for record-keeping may also be partly cultural. We probably all need to argue that the benefits outweigh the costs too (if we agree that they do). You could write entire blog posts about these two issues.</p>
<p>But I’m going to focus on the challenges around knowledge <em>data</em> that can be solved technology and infrastructure.</p>
<p>So, here’s what I think might help.</p>
<section id="make-sure-the-flow-of-information-is-good" class="level3">
<h3 class="anchored" data-anchor-id="make-sure-the-flow-of-information-is-good">Make sure the flow of information is good</h3>
<p>“Garbage in, garbage out,” goes the saying. If we’re not putting the right records in, we’re unlikely to benefit from them when we look at them again later.</p>
<p>Overall, I’m less worried about this because (as noted right at the start), large organisations do tend to be bureaucratic and are in general good at creating boards, taking minutes, and having all of the other accoutrements that come with a good secretariat. But it’s important that this infrastructure does exist everywhere that a large group (say a board) are coming together to hear information and make decisions. Papers presented should be informative and have clear recommendations, and of course any decisions and salient comments should be recorded.</p>
<p>Clear records can also help show which meetings are effective and which are not worth the time they take.</p>
</section>
<section id="notes-should-be-the-default-with-microsoft-powerpoint-presentations-only-by-exception" class="level3">
<h3 class="anchored" data-anchor-id="notes-should-be-the-default-with-microsoft-powerpoint-presentations-only-by-exception">“Notes” should be the default, with (Microsoft Powerpoint) presentations only by exception</h3>
<p>Notes–usually documents of up to 6 pages that can have figures in but are written in full sentences–should be the default way to capture ideas, strategies, processes, and decisions.</p>
<p>At the risk of over-generalising, presentations tend to hide woolly thinking. Writing notes in sentences and paragraphs (bullets allowed) forces more clarity. Of course one can obfuscate in prose too, but it’s harder to hide that obfuscation behind full sentences than it is in a shiny presentation (or, let’s be honest, a bad presentation, which most of them are). I know of one large, important public sector organisation in particular that is absolutely addicted to Microsoft Powerpoint slides–but fills them to the brim with text.</p>
<p>Sometimes elected policymakers will prefer a snazzy slide deck. That’s fine; if you’re in the public sector, you’re there to serve elected officials. But there’s a whole ton of work that goes on that <em>doesn’t</em> go to elected representatives that could be better articulated as a note. And, even if you’re ultimately going to put a slide deck together, I bet that it’s a <em>lot</em> better for having been born of a note first.</p>
<p>Amazon has done some interesting thinking on this that the public sector (and any large organisation) could potentially learn from. Jeff Bezos described it as <a href="https://www.cnbc.com/2019/10/14/jeff-bezos-this-is-the-smartest-thing-we-ever-did-at-amazon.html">the smartest thing they ever did at Amazon</a>. Amazon banned slide decks altogether! This is too far, for a few reasons, but it shows just how seriously they take the time-wasting Powerpoint problem to be. They replaced them with “Memos”, essentially what I’ve called “Notes”.</p>
<p>Perhaps the most interesting addition that the Amazon model brings to what I’ve already suggested here is that meetings begin with a quiet period of around 30 minutes in which participants read the memo before engaging in discussion. I think this is a terrific idea, with big potential benefits. If you’re a senior leader in the public sector then, well, your diary is going to be <em>full</em>. Somehow, you’re expected to squeeze in reading important documents around a bulging-at-the-seams schedule–on most days, it’s going to be gone 11pm before you get to it. I can’t tell you how many meetings I’ve been to where many people, including myself, simply haven’t had time to read the paper, note, or memo ahead of time. That can lead to a poorer discussion, and poorer outcomes. Creating time within meetings to read memos ensures–quite literally–that everyone is on the same page, which will likely lead to <em>better</em> outcomes.</p>
<p>Another feature of Amazon-like memo models is that the participants in the decision that was reached co-sign the document and record why a particular decision was reached. This is really important for accountability and moving forward with clear agreement. (Verbal agreements are not as binding as you might hope, especially if people haven’t actually read the paper–encouraging people to put their name to a decision gives them more skin in the game and gives them incentives to ensure that it is a good decision.)</p>
</section>
<section id="knowledge-data-should-be-findable-accessible-interoperable-and-re-usable" class="level3 page-columns page-full">
<h3 class="anchored" data-anchor-id="knowledge-data-should-be-findable-accessible-interoperable-and-re-usable">Knowledge data should be findable, accessible, interoperable, and re-usable</h3>
<p>An organisation’s stock of knowledge should follow the FAIR principles: findable, accessible, interoperable, and re-usable. We’ll look at each of these and see how they suggest a database of Markdown documents as a likely back-end solution (a solution that happens to be free).</p>
<section id="fair-requirements" class="level4 page-columns page-full">
<h4 class="anchored" data-anchor-id="fair-requirements">FAIR requirements</h4>
<p>All of those benefits that come with standing on the shoulders of giants will only be available if knowledge is <strong>findable</strong>. In practice, this means ensuring staff have powerful search capabilities on hand. Sharepoint, with its very limited search capabilities (and its lack of full support for file types not covered by Microsoft Office products), will not do. Staff must be able to look for notes or documents within a certain date range. They need to be able to find all documents with specific words or phrases in. They should be able to browse documents using (preferably automatically generated) tags.</p>
<p>Of course, these documents must be <strong>accessible</strong>, both today and in the future. This means that they should be in a database that can be accessed easily from their computer, and which can be queried in milliseconds. There should be backups and system redundancy.</p>
<p><strong>Interoperability</strong> is more important than it first appears. One public sector organisation I know of had terrible trouble because many of its documents were written in a propriety file format for a piece of software that has fallen out of favour. For new staff to use them, either the documents would have had to be converted (with potential information loss on the way), or the software contract renewed at considerable cost–even though no-one would be using it to write new documents! I put the Microsoft Office suite of file formats in this bucket as, to get the most from those types of files (eg .docx, .pptx), you really need to purchase Microsoft’s proprietary software. As an example of this lack of interoperability, there is no Microsoft Office support for Linux, the popular free and open source operating system. Interoperability prevents vendor lock-in too.</p>
<p><strong>Re-usability</strong> is about people being able to dive in to the historical archive, grab what they need, and put it to work on a contemporary project. This rules out anything that doesn’t allow for easy copy and paste. So PDFs and similar are out. PDFs do have their uses <em>because</em> they do not change once created, but we don’t want to tap into that here. Re-usability once again pushes us toward a solution that looks a lot like plain text files because–no matter what whizzy developments there are in the future–it’s extremely likely that people will still be able to copy and paste from plain text files.<sup>1</sup> You might think this causes a problem for slide decks, in the cases where they are warranted: it doesn’t. You can write slide decks in plain text files too, using Markdown. To make images re-usable, you will want to either provide reproducible code to recreate a particular image or figure or to include the image as a separate asset. And, if your stock of knowledge is just plain text files and some image files, moving your entire stock of knowledge to a new system is as easy as copying and pasting everything.</p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;Though you do need to be careful about something called encoding. The TL;DR is that all text should be encoded as UTF-8.</p></div></div><p>It would also be nice if the technology behind all of this was free and open source. Note that free software does <em>not</em> mean totally free–you always need someone to maintain the software and database. But you’d need that with proprietary software too, so there’s still potentially a big pecuniary cost saving here if the tech is free.</p>
</section>
</section>
<section id="solutions-to-the-knowledge-data-management-problem" class="level3">
<h3 class="anchored" data-anchor-id="solutions-to-the-knowledge-data-management-problem">Solutions to the knowledge data management problem</h3>
<p>Taking all of these needs together, the solution looks a lot like a searchable database of plain text files with a friendly front-end. The most obvious candidate file format is <a href="https://en.wikipedia.org/wiki/Markdown">Markdown</a>. Markdown is written in plain text, which will never go out of style. It supports the inclusion of tables (written in plain text) and images provided as separate files, which helps with re-usability. Plain text Markdown files can also be used to generate slide decks, so this approach has that output type covered too. And of course Markdown is completely free, there are plenty of free editors for it, and almost all of the tooling you might need around it is free too. A slight variant on Markdown, Quarto Markdown, can support executable code chunks too–but don’t worry, it’s still all written in plain text.</p>
<p>Note that the solution <em>doesn’t</em> look like Google docs or Microsoft Office. These mix images and text. Their formats may change over time. They are proprietary. It’s not easy to throw them into a really flexible database (at least not with their current forms). There is vendor lock-in as it’s not easy to move them to a new system.</p>
<p>Markdown seems great, then, but there are some challenges with it that we should be aware of. We’ll examine the major ones:</p>
<ol type="1">
<li>editing Markdown documents will be alien to many, as will the way what you put in doesn’t look like you get out (ie it is not a <a href="https://en.wikipedia.org/wiki/WYSIWYG">WYSIWYG approach</a> to text editing). Today, one of the best Markdown editors is Visual Studio Code, which is going to be overwhelming for staff unfamiliar with coding because it does a <em>lot</em> more than just edit Markdown and is really geared to coders. <strong>There needs to be a very friendly way to edit Markdown for people unfamiliar with coding.</strong></li>
<li>one of the most useful aspects of the Microsoft Office suite, particularly the Powerpoint and Word products relevant to this blog post, is that you can collaborate on the same document (including with tracked changes). Git is one option for sharing and collaboration–and coders would be fine with this, but git from the command line is going to be too complex for any staff not <em>au fait</em> with coding. Furthermore, when editing a document with colleagues, the ability to provide comments (not in the doc itself) is incredibly useful. <strong>There needs to be a way to collaboratively edit documents and track changes in Markdown, possibly in real time, and ideally with the ability to provide comments.</strong> Ideally this should come with a way to set granular permissions.</li>
<li><strong>there needs to be a searchable database of the existing stock of Markdown files</strong> and, preferably, a way to launch complex queries on them.</li>
</ol>
<p>Under 1., there are a variety of paid and free markdown editors available. Perhaps I’m too pessimistic about people using Visual Studio Code to write Markdown. <a href="https://ghostwriter.kde.org/">Ghostwriter</a> is a cross-platform, free and open source alternative that is solely focused on Markdown so may be more user friendly. Other free and open source options include <a href="https://remarkableapp.github.io/">remarkable</a> and <a href="https://abricotine.brrd.fr/">abricotine</a>. There are a couple of more snazzy looking paid versions, including <a href="https://typora.io/">typora</a> and <a href="https://obsidian.md/">Obsidian</a> (personal use is free, but commercial is not). One of these solutions seems like it would roundly knock out 1.</p>
<p>It’s likely that 2 and 3 could be solved together with subscription to a proprietary service. <a href="https://hackmd.io/">HackMD</a> is a service that provides “real-time collaboration on markdown documents” that includes “granular note permission settings and private image storage”. It includes an editor (which would also help with 1) <em>and</em> it provides an ability to comment on docs too. It also supports tags that can be added via YAML header data–helping with long-term usability. It looks like a really good solution to 2. and 1., but like it does a bit less than would be ideal for 3; there is a free text search but it’s a “prime” feature and it seems like the other filters might be limited. It also seems like all the notes are in the vendor’s cloud, which makes building a custom search solution, and running compilation to other derivative file types (eg markdown to pdf, quarto markdown to slides), difficult–though there’s an ability to sync with Github. An alternative to HackMD is <a href="https://obsidian.md/">Obsidian</a>, but it seems less feature rich–it doesn’t have real-time collaboration (or so it seems) and it introduces non-standard syntax, which is a threat to interoperability. Overall, HackMD seems like the best solution to 2.</p>
<p>While a service like HackMD can help with 3., it’s interesting to ask what else is out there that would work on a big ol’ pile of markdown (and image) data. Ideally, we would want a flexible, fast, comprehensive search on a bunch of markdown files and images. The free, open source version of <a href="https://www.elastic.co/elasticsearch/">ElasticSearch</a> would be one potential solution–though note that the vendors are <em>very</em> keen for you to use their paid hosting service. An alternative that is also geared toward text files is <a href="https://lucene.apache.org/core/">Apache Lucene</a>. Both of these would have to be hosted somewhere. One nice aspect of these purpose-built seach tools is that they can store logs of what people looked for, itself of use to the organisation. The query functionality of tools like Apache Lucene and ElasticSearch looks to be pretty good too. For example, <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/sql-search-api.html">ElasticSearch supports a SQL-like API</a> and <a href="https://www.elastic.co/guide/en/elasticsearch/reference/current/query-dsl.html">other complex query types</a>. The most important aspect of 3 would be addressed by both of these open source solutions.</p>
<p>As an aside, advanced users could also pull out data more systematically from knowledge stored in a series of Markdown files. In that case, advanced users might pop everything into a tabular structure (eg a parquet file) and then query all rows with a high performance SQL query engine like <a href="https://duckdb.org/">DuckDB</a>. Although working with text is always going to be tricky, DuckDB is <a href="https://h2oai.github.io/db-benchmark/">astonishingly fast</a> (check out <a href="https://www.pola.rs/">polars</a> too though). There is an extension for <a href="https://duckdb.org/docs/extensions/full_text_search.html">full text search</a> for DuckDB.</p>
<p>If you want to get really fancy, you could also run something that would find connections between documents, displaying them as a graph. This could be useful to find inconsistencies, or links, in the way that topics are being dealt with across the organisation.</p>
</section>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>Good management of knowledge data is important to the success and efficiency of public sector organisations. The ideal is that all of the ideas, strategies, processes, and decisions relevant to an organisation and generated by its staff are available to search and to re-use in perpetuity. Although there are doubtless pros and cons to every approach, using “notes” (and not slide decks) as the unit of account for an organisation’s recorded knowledge is a very strong option. And storing those notes in a cloud-hosted database of Markdown files (plus assets, like images, that are used by those Markdown files) will have benefits such as avoiding vendor lock-in, ensuring content is re-usable far into the future, and ensuring that knowledge is easily searchable.</p>


</section>


 ]]></description>
  <category>economics</category>
  <category>productivity</category>
  <category>public sector</category>
  <guid>https://www.aeturrell.com/blog/posts/managing-public-sector-knowledge/managing-public-sector-knowledge.html</guid>
  <pubDate>Wed, 08 Feb 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Why you shouldn’t code on your work laptop</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://www.aeturrell.com/blog/posts/why-you-shouldnt-code/why-you-shouldnt-code.html</link>
  <description><![CDATA[ 





<p>“Nobody ever got fired for buying Microsoft” goes an old saying. Actually, it was probably first said in the 1980s in reference to IBM <span class="citation" data-cites="1983school">(<em>School Microcomputing Bulletin</em> 1983)</span>, but the meaning remains the same: as the Chief Technology Officer, or similar, you’re not going to get in trouble for buying the boring old thing that everyone else is buying. (But you <em>might</em> get in trouble if you bought something that many of your staff <em>weren’t</em> comfortable with.) The attraction to what is considered safe, known, and widely-used is especially strong for large public institutions because they tend to be risk averse, subject to intense scrutiny, and responsible for statutatory processes that simply <em>cannot</em> go wrong.</p>
<section id="enterprise-it-can-sacrifice-productivity-for-safety" class="level2">
<h2 class="anchored" data-anchor-id="enterprise-it-can-sacrifice-productivity-for-safety">Enterprise IT can sacrifice productivity for safety</h2>
<p>There’s a trade-off though; when it comes to software and hardware, what is widely used and known may not be at the cutting-edge and, if it’s made endlessly safe, it can actively stifle innovation. To create, at least, a sense of safety, the “nobody ever got fired for buying …” type of software tends to be locked down. In the case of Microsoft’s popular operating system, Windows, which is endemic in large organisations, you may not even be able to change the screen saver: large, otherwise proud organisations humbly display whatever screensaver Microsoft has deemed appropriate rather than anything to do with the firm. Of course, screensavers don’t matter much: it’s when you want to automate the start-up of the computer, or edit a particular type of file, or create a reproducible analytical pipeline, that the locked-down nature of enterprise IT starts to preserve safety at the cost of producitivity. It isn’t just control either; the quality of laptop needed by different employees will vary enormously, but enterprise IT will often see everyone landed with the same kit.</p>
<p>Why is this such a problem in large organisations? You can’t imagine a tech start-up stopping its staff from installing whatever is needed to get the job done. The assumption that CTOs have made is that giving <em>all</em> users the power to change their screensaver or execute scripts will mean someone will eventually harm the organisation (for example, through unintentionally deleting someone else’s data or releasing something publicly that should have been private). Or perhaps it’s just that enterprise IT doesn’t give the fine-grained control needed to empower staff to be productive—perhaps it’s that the systems that CTOs of large organisations can buy are either locked down, or they are not; there’s no customisability. In any case, the fact that large organisations harbour a very large and heterogeneous set of IT users is behind the need for policies and processes that stop people installing the software they need or changing settings to get things done. One size fits all, and the system is crafted around minimising risk rather than maximising productivity. What makes the trade-off much harder is that safety breaches and computing accidents are very countable and discoverable, but lost productivity from innovations that didn’t happen are not.</p>
<p>The locked down nature of enterprise IT presents a real challenge for anyone trying to make their organisation more efficient using data science (or any other innovation for that matter). Want to deploy a dashboard? Hard. Want to deploy a machine learning model? Very hard. Want to ensure everyone has the same code environment for a training course? Tricky, especially if you’ve got people who have different ‘home’ IT because they’re drawn from different units from across the enterprise, each with their own variant of the IT. Even downloading the software to build a machine learning model is nigh on impossible in a locked-down Windows ecosystem: installing Python is often blocked or requires a call to a service desk; installing packages is often blocked and, even when a package delivery solution is in place, it may not work as intended; some packages are frequently blocked from running because they require on-the-fly compilation (<a href="https://www.pymc.io">PyMC</a>, for example); and then many frameworks do not work on Windows itself. (Windows Subsystem for Linux is not a silver bullet for these problems.) Even the basic automation of scripts and so on is more tricky on Windows, assuming that you are able to run scripts. As the final cherry on the cake, Microsoft Outlook blocks <code>.py</code> files as they might be harmful (though please put your code under version control rather than emailing it around).</p>
<p>You might think I’m picking on Microsoft here. I am. Because, even though they make some fantastic software (Visual Studio Code is genuinely incredible), they are so dominant in the marketplace. A typical day at a large firm will often involve logging on to a Microsoft Windows computer, opening up Microsoft Outlook to read emails, having calls on Microsoft Teams, surfing the internet via Microsoft Edge, writing a note on Microsoft Word, creating a slide deck on Microsoft Powerpoint, taking notes on Microsoft OneNote, entering a discussion on Microsoft’s Yammer network, and sharing files on the dreaded Microsoft Sharepoint. I simply do not believe that Microsoft produces the best tools for email, calendar, operating system, word processing, data analysis, file sharing, internet browsing, presentations, community discussion, <em>and</em> video conferencing. (Do you think there might be a competition problem here?) I’ll allow that OneNote is pretty good though.</p>
<p>You might also think that enterprise IT solutions mean that everything that works on one computer will work on another. You’d be wrong! Updates are applied at different times for different people, hardware is rolled out gradually rather than all at once, and people can still change their own systems through choosing to install extras from a provided ‘Software Centre’. So, for all that enterprise IT is controlled, it still suffers from the “it works on my computer” problem.</p>
</section>
<section id="from-problems-to-solutions" class="level2">
<h2 class="anchored" data-anchor-id="from-problems-to-solutions">From problems to solutions</h2>
<p>There are a lot of issues to sort here, and something as drastic as competition policy may be needed to unleash productivity from better software for most firms. But I do think there is a potential solution for data scientists and people working on automation, and one that the CTO and CDO can happily support.</p>
<p>The problem we’re really trying to solve for data scientists who want to improve their organisation is: how can we run the latest, greatest packages on the same infrastructure without dealing with locked-down IT? And while also retaining as much of the safety that large organisations hanker for? Switching everyone to Linux might help, sure; it could save some money as the operating system is free (though human support isn’t), and there’s evidence that some firms using (free versions of) Linux are more productive <span class="citation" data-cites="nagle2019open">(Nagle 2019)</span>. But this would require organisation-level change and mass upskilling, and is unlikely to happen due to proprietary software lock-in. Fortunately, there’s a simpler way.</p>
<p>My proposal is that we should simply stop coding on work laptops. Just stop. It is simply too difficult to get enterprise IT Windows laptops that are locked down to do everything we really need to improve an organisation while still satisfying the security constraints.</p>
</section>
<section id="where-can-i-code" class="level2">
<h2 class="anchored" data-anchor-id="where-can-i-code">Where <em>can</em> I code?</h2>
<p>So, if I’m saying do not code on your work Windows laptop, where <em>should</em> you code? The answer, in short, is the cloud. At its best, this provides an isolated, reproducible, environment. It completely solves the “it doesn’t work on my computer” problem. It solves the operating system problem too, because cloud computing can be on any operating system—including ones that are specified in code (“infrastructure as code”). It better integrates with (and even encourages) version control and Continuous Integration and Continuous Deployment (CI/CD). Best of all, these isolated environments aren’t subject to the vagaries of enterprise IT because they are separate, and accessed (typically) only through a browser window.</p>
<p>I want to be clear: this does not mean that doing your coding via cloud computing is unsafe. It’s almost certainly safer, and in many ways: whatever you are doing on the cloud should not go anywhere near your email application. If your IT department has cloud expertise, they can do things that will greatly reduce the risk of any kind of cloud-based data leak. Best practice for sensitive data is considered to be holding them in a secure cloud environment anyway. And, with asset-level control, you can grant access only to the users who need it—quite a contrast to having a writeable file on a network drive (yes, this still happens in 2023). Of course, someone actively trying to do harm still can, but this is true on any system.</p>
<p>There are a number of services now out there that provide these reproducible coding environments at low or even no cost, depending on the number of hours used per month. The big players are Google Cloud Compute, Amazon Web Services, and Microsoft Azure. These require a bit more expertise to set up, and typically have to be used with buy-in and help from architecture experts. But there are increasingly off the shelf reproducible code environments that you can use for all but very sensitive and or confidential data. These include:</p>
<ul>
<li><a href="https://github.com/features/codespaces">Github Codespaces</a>, which has a free tier, uses Visual Studio Code by default, and can be accessed in browser or via Visual Studio Code desktop. It works at the level of a GitHub repo so has particularly good integration with version control.</li>
<li><a href="https://www.gitpod.io/">Gitpod</a>, which has a free tier, uses Visual Studio Code by default, and can be accessed in browser or via Visual Studio Code desktop.</li>
<li><a href="https://cloud.google.com/workstations">Google Cloud Workstations</a>, which takes more set up and uses Code-OSS (the open source version of Visual Studio Code).</li>
</ul>
<p>Github Codespaces is probably the easiest service to access if your IT department has no real expertise in cloud computing. It only requires that each person has a GitHub account, that your IT department has unblocked Github’s website, and that you have some billing in place if you go over the free tier hours. Of course, Github is actually owned by Microsoft, and your firm is probably already buying Microsoft (“Nobody ever got fired for buying Microsoft”!) so all you need to do is to convince IT to pay for an extra service from a firm they already have a relationship with. (If you’re lucky, your IT department will already know a lot about cloud computing and have arranged empowered access to it for you—but a large number of firms are unlikely to be able to provide this.)</p>
<p>Now, you will still need to think carefully about where any data you are using will live and how you get it into your codespace (or similar). But having a (secure) connection to some sort of cloud storage bucket is a good default if there isn’t an API around that you can consume directly.</p>
</section>
<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<p>In short, if you’re looking to get a reproducible, working code environment that is consistent across users and you have an IT department that doesn’t have much expertise in coding or cloud computing, my recommendation is that you:</p>
<ul>
<li>do not try and get your IT dept to put analytical programming languages on work laptops;</li>
<li>instead, get them to unblock GitHub and have any users create an account on it (with billing if necessary);</li>
<li>use GitHub for version control; and</li>
<li>use <a href="https://github.com/features/codespaces">Github Codespaces</a> for your coding environment (with optional docker containers for reproducible environments)</li>
</ul>



</section>

<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-nagle2019open" class="csl-entry">
Nagle, Frank. 2019. <span>“Open Source Software and Firm Productivity.”</span> <em>Management Science</em> 65 (3): 1191–1215.
</div>
<div id="ref-1983school" class="csl-entry">
<em>School Microcomputing Bulletin</em>. 1983. v. 2-5. Learning Publications. <a href="https://books.google.co.uk/books?id=hVdRAAAAYAAJ">https://books.google.co.uk/books?id=hVdRAAAAYAAJ</a>.
</div>
</div></section></div> ]]></description>
  <category>code</category>
  <category>open-source</category>
  <category>cloud</category>
  <category>data science</category>
  <category>work chat</category>
  <guid>https://www.aeturrell.com/blog/posts/why-you-shouldnt-code/why-you-shouldnt-code.html</guid>
  <pubDate>Fri, 13 Jan 2023 00:00:00 GMT</pubDate>
  <media:content url="https://www.aeturrell.com/blog/posts/why-you-shouldnt-code/elisa-ventur-bmJAXAz6ads-unsplash.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>In praise of APIs (application programming interfaces)</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://www.aeturrell.com/blog/posts/the-prize-with-apis/the-prize-with-apis.html</link>
  <description><![CDATA[ 





<p>In this blog, I look at some of reasons why APIs are such a great way to share data.</p>
<p>APIs make it possible for users to plug data directly into software, dashboards, websites, reports, and analysis in a consistent, machine readable format that favours automation. They are the best practice way to share data between expert users and organisations, and are an important intermediary for enabling data to reach a wider audience—giving a path to significantly increased impact for data that anyone has decided to share. Leading statistical institutes provide their data via APIs, and UK government departments increasingly <a href="https://www.api.gov.uk/#uk-government-apis">share</a> data through APIs too.</p>
<p>In a previous post, I looked at one API in particular—the <a href="../../../blog/posts/ons-api/index.html">ONS API</a>.</p>
<section id="what-is-an-api" class="level2">
<h2 class="anchored" data-anchor-id="what-is-an-api">What is an API?</h2>
<p>APIs, or application programming interfaces, are a set of rules and protocols that enable communication between different software systems. They allow different systems to exchange data and functionality programmatically. They are programming language agnostic, and sometimes make data available in several formats.</p>
<p>In the context of data and statistics, APIs are particularly useful because they allow organisations to access and use data from a variety of sources in a consistent and controlled manner. For example, a government department might wish to use APIs to reproducibly and reliably access data from a national statistical office.</p>
<p>It’s easiest to show how APIs work with an example. Let’s pull down CO2 emissions per capita by country from the World Bank using the <a href="https://pandas-datareader.readthedocs.io/"><strong>pandas_datareader</strong></a> package in Python. <strong>pandas_datareader</strong> provides convenient access to a wide range of APIs including those serving up data from the <a href="https://fred.stlouisfed.org/docs/api/fred/">US Federal Reserve (FRED)</a>, the <a href="https://datahelpdesk.worldbank.org/knowledgebase/articles/889392-about-the-indicators-api-documentation">World Bank</a>, the <a href="https://data.oecd.org/api/">OECD</a>, the <a href="https://www.bankofcanada.ca/valet/docs">Bank of Canada</a>, <a href="https://ec.europa.eu/eurostat/data/web-services">Eurostat</a>, and more.</p>
<div class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> textwrap</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pandas_datareader <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> wb</span>
<span id="cb1-3"></span>
<span id="cb1-4">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> wb.download(                              <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># download the data from the world bank</span></span>
<span id="cb1-5">    indicator<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EN.ATM.CO2E.PC"</span>,                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># indicator code</span></span>
<span id="cb1-6">    country<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"US"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CHN"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"IND"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Z4"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Z7"</span>],  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># country codes</span></span>
<span id="cb1-7">    start<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2019</span>,                                <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start year</span></span>
<span id="cb1-8">    end<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2019</span>,                                  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># end year</span></span>
<span id="cb1-9">)</span>
<span id="cb1-10">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.reset_index()                          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remove country as index</span></span>
<span id="cb1-11">df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>].<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">apply</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> x: textwrap.fill(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>))  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># wrap long names</span></span>
<span id="cb1-12">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.sort_values(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EN.ATM.CO2E.PC"</span>)          <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># re-order</span></span>
<span id="cb1-13">df.head()</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">country</th>
<th data-quarto-table-cell-role="th">year</th>
<th data-quarto-table-cell-role="th">EN.ATM.CO2E.PC</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">3</td>
<td>India</td>
<td>2019</td>
<td>1.775923</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>East Asia\n&amp; Pacific</td>
<td>2019</td>
<td>6.227609</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>Europe &amp;\nCentral\nAsia</td>
<td>2019</td>
<td>6.562452</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">0</td>
<td>China</td>
<td>2019</td>
<td>7.605937</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">4</td>
<td>United\nStates</td>
<td>2019</td>
<td>14.673407</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>There are several features of note:</p>
<ul>
<li>we only pulled down the data we needed</li>
<li>we were able to get data straight into our analytical tool (here, Python)</li>
<li>getting the data for the period we want is as simple as changing the year</li>
</ul>
<p>Having downloaded the data, let’s now plot it:</p>
<div class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb2-2"></span>
<span id="cb2-3">fig, ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots()</span>
<span id="cb2-4">sns.barplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"country"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"EN.ATM.CO2E.PC"</span>, data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>df.reset_index(), ax<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>ax)</span>
<span id="cb2-5">ax.set_title(<span class="vs" style="color: #20794D;
background-color: null;
font-style: inherit;">r"CO$_2$ (metric tons per capita)"</span>, loc<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"right"</span>)</span>
<span id="cb2-6">plt.suptitle(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"The USA leads the world on per-capita emissions"</span>, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.01</span>)</span>
<span id="cb2-7"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> key, spine <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ax.spines.items():</span>
<span id="cb2-8">    spine.set_visible(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb2-9">ax.set_ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb2-10">ax.set_xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">""</span>)</span>
<span id="cb2-11">ax.yaxis.tick_right()</span>
<span id="cb2-12">plt.show()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://www.aeturrell.com/blog/posts/the-prize-with-apis/the-prize-with-apis_files/figure-html/cell-4-output-1.svg" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>This shows how data can be pulled straight down into analytical tools, reports, forecasts, and so on; any output or analysis you can think of.</p>
</section>
<section id="why-are-apis-brilliant" class="level2">
<h2 class="anchored" data-anchor-id="why-are-apis-brilliant">Why are APIs brilliant?</h2>
<p>Programmatic access to data has a number of clear benefits:</p>
<ul>
<li>Data are provided in a consistent, machine readable format—this can save hours of work for each file and enables automation</li>
<li>users can build other tools on top of APIs and APIs integrate directly into analytical tools</li>
<li>APIs are accessible by a range of open source (and free) software</li>
<li>APIs can provide only the data that the user needs (they enable filtering)</li>
<li>APIs can provide a data provider with more granular information on what data have been requested than a bulk download can</li>
<li>an organisation can provide data to itself (eg across teams) without one team having to bother another; teams within the organisation can also consume the API</li>
<li>the date of the ingestion of data can be easily including in the metadata that the API send—this is really useful to anyone working with real-time data applications (eg nowcasting) or if a mistake is subsequently found in a series</li>
<li>using APIs to serve data encourages the use of consistent taxonomies (eg country names) that will ultimately aid end-users by enabling them to more easily link data</li>
<li>secure APIs allow organisations to share sensitive data in a programmatic way and, while no method of data transfer can ever be 100% secure, APIs that follow the best practices for security are thought to involve less risk than emailing files</li>
</ul>
<p>Directly integrating with analytical tools has a number of benefits for auditability and accountability given that analytical tools can be used with code, and code can be put under version control—which means to-the-second, to-the-line auditing of who changed what when and easy-to-reverse changes should errors be discovered.</p>
<p>Additionally, when data are shared only as files, it’s so often as Microsoft Excel files, which can go wrong in some pretty serious ways:</p>
<ul>
<li>Excel is a proprietary format that is harder to use without buying software from a particular vendor</li>
<li>Excel mixes analysis and data storage (which is bad practice)</li>
<li>Excel changes data</li>
<li>Excel is limited in storage size and file-types it can handle</li>
<li>Excel is not easily auditable (code-first approaches allow for to-the-second, to-the-line audit).</li>
</ul>
<p>That said, you can improve the provision of data through Excel by making it machine readable or by making it consistent, perhaps making use of the excellent <a href="https://gptables.readthedocs.io/">GPTables</a> (good practice tables) package created by the UK’s Office for National Statistics (full disclosure: I didn’t work on this package, but some colleagues did).</p>
<p>It’s also important to note that providing a downloadable file and an API is not mutually exclusive—to serve the widest range of users, it’s a good idea to provide both. But it’s important that they feed off the same underlying database in the same way and so are 100% consistent.</p>
<p>The main downside of APIs is that they are more difficult to use for all but expert users (though this category has expanded in recent years as the world becomes more code-savvy and it now arguably includes everyone from academics to data journalists to data enthusiasts). This is why it’s important to make APIs available <em>alongside</em> other ways to access the data.</p>
<p>To lower the barrier to using an API, there are a couple of options. They can be integrated into easier-to-use tools (like the <strong>pandas_datareader</strong> package) or they can be provided alongside an API ‘query builder’ that gives rapid feedback on whether a query is valid or not (<a href="https://overpass-turbo.eu/">open street map API’s ‘overpass turbo’ is a good example</a>).</p>
</section>
<section id="api-best-practice" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="api-best-practice">API Best Practice</h2>
<p>There are a number of API standards out there, and the best one depends on the context. In the UK, there is <a href="https://www.gov.uk/guidance/gds-api-technical-and-data-standards">gov.uk guidance</a> on APIs.</p>
<p>The approach followed for open data APIs across a <a href="https://sdmx.org/?page_id=2705">wide range of international and national statistical organisations</a><sup>1</sup> is a standard called SDMX: <a href="https://sdmx.org/?page_id=2555">Statistical Data and Metadata eXchange</a>. It’s an ISO (International Organization for Standardization) standard designed to describe statistical data and metadata, normalise their exchange, and improve their efficient sharing across statistical and similar organisations.</p>


<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;The BIS (Bank for International Settlements), ECB (European Central Bank), EUROSTAT (Statistical Office of the European Union), IMF (International Monetary Fund), OECD (Organisation for Economic Co-operation and Development), UN (United Nations), and the World Bank.</p></div></div></section>


 ]]></description>
  <category>code</category>
  <category>data</category>
  <guid>https://www.aeturrell.com/blog/posts/the-prize-with-apis/the-prize-with-apis.html</guid>
  <pubDate>Sun, 18 Dec 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>TIL: How to break RSS feeds</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://www.aeturrell.com/blog/posts/til-how-to-break-xml/</link>
  <description><![CDATA[ 





<blockquote class="blockquote">
<p>Note: this is the first post under a new tag called TIL or “today I learned”. These are shorter format posts that lower the barrier to blogging and capture a mini piece of learning. The idea for TILs has been inspired by Simon Willison’s own <a href="https://til.simonwillison.net/">TIL posts</a>.</p>
</blockquote>
<p>It’s really useful to have an RSS feed associated with a blog so that people can automatically pick up new posts. A lot of blogging technology (including Quarto and Jekyll) automatically creates these feeds at a URL called <code>&lt;website name&gt;/index.xml</code>, or similar, relative to the root of your website.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://upload.wikimedia.org/wikipedia/en/thumb/4/43/Feed-icon.svg/256px-Feed-icon.svg.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">The RSS feed icon (Image: Wikipedia)</figcaption>
</figure>
</div>
<p>But I kept finding a problem with generating these feeds: either they did not generate at all or they were corrupted and unreadable.</p>
<p>I use a lot of latex in my blog posts. You can do this inline using dollar signs or as a display equation using double dollar signs in a separate paragraph. So</p>
<pre class="text"><code>$$
{\displaystyle F_{ij}=G\cdot {\frac {M_{i}M_{j}}{D_{ij}}}.}
$$</code></pre>
<p>becomes</p>
<p><img src="https://latex.codecogs.com/png.latex?%0A%7B%5Cdisplaystyle%20F_%7Bij%7D=G%5Ccdot%20%7B%5Cfrac%20%7BM_%7Bi%7DM_%7Bj%7D%7D%7BD_%7Bij%7D%7D%7D.%7D%0A"></p>
<p>So far so good. But, when you’re putting latex in a code block—for example, when you’re demonstrating how to add an equation to a chart in <strong>matplotlib</strong> in code—the string with latex in can crash the automatic blog RSS feed generator.</p>
<p>An example of the kind of string in a blog post that causes the problem is:</p>
<pre class="text"><code>```python
ax.set_xlabel(r"$e^\frac{-x^2}{2}$")
```</code></pre>
<p>except with the <code>"</code> characters replaced with <code>'</code> because, ironically, I can’t write this string without breaking the feed again.</p>
<p>The solution—as you can probably guess by now—is to use <code>"</code> instead of <code>'</code> for literal strings with latex in them in code blocks.</p>
<p>And, if you’re digesting this via an RSS feed, you’ll know it’s worked!</p>



 ]]></description>
  <category>blogging</category>
  <category>code</category>
  <category>writing</category>
  <category>TIL</category>
  <guid>https://www.aeturrell.com/blog/posts/til-how-to-break-xml/</guid>
  <pubDate>Wed, 02 Nov 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Welcome To The New Home for My Blog</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://www.aeturrell.com/blog/posts/welcome/</link>
  <description><![CDATA[ 





<p>This is the first post on a brand new blog site: welcome!</p>
<p><img src="https://www.aeturrell.com/blog/posts/welcome/thumbnail.jpg" class="img-fluid"></p>
<p>After a while of getting (minorly) frustrated with the code-integration available for a Jekyll-based blog, I’m making the switch to one that’s based on <a href="https://quarto.org/">Quarto</a>, the document and website preparation software tool that supports executable chunks in Python, R, and other-languages.</p>
<p>In getting this setup, <a href="https://albert-rapp.de/posts/13_quarto_blog_writing_guide/13_quarto_blog_writing_guide.html">this post</a> by Albert Rapp has been especially useful. A while ago, I did a post on <a href="../../../blog/posts/three-ways-to-blog-with-code/index.html">three ways to blog</a>, which at that time were Jupyter (with <a href="https://nbconvert.readthedocs.io/">nbconvert</a> to markdown with execution), <a href="https://github.com/gpoore/codebraid">codebraid</a>, and R markdown–none of which were perfect. Quarto takes what was good about R markdown and makes it cross-language plus a bit better.<sup>1</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;Though it’s still based on the fantastic <a href="https://pandoc.org/">pandoc</a>.</p></div></div><p>There are <em>tons</em> of nice features of blogging with Quarto, but one that’s particularly useful for me is being able to have proper citations, like <span class="citation" data-cites="turrell2013monte">Turrell, Sherlock, and Rose (2013)</span>. And the support for executable code plus output figures–in multiple languages–is more or less unparalled.</p>





<div id="quarto-appendix" class="default"><section class="quarto-appendix-contents" id="quarto-bibliography"><h2 class="anchored quarto-appendix-heading">References</h2><div id="refs" class="references csl-bib-body hanging-indent" data-entry-spacing="0">
<div id="ref-turrell2013monte" class="csl-entry">
Turrell, Arthur E, Mark Sherlock, and Steven J Rose. 2013. <span>“A Monte Carlo Algorithm for Degenerate Plasmas.”</span> <em>Journal of Computational Physics</em> 249: 13–21.
</div>
</div></section></div> ]]></description>
  <category>news</category>
  <guid>https://www.aeturrell.com/blog/posts/welcome/</guid>
  <pubDate>Sat, 15 Oct 2022 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Visual Studio Code on the Cloud</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://www.aeturrell.com/blog/posts/visual-studio-code-in-the-cloud/</link>
  <description><![CDATA[ 





<p>Visual Studio Code is incredibly powerful, whether it’s for writing <a href="https://aeturrell.github.io/coding-for-economists/wrkflow-markdown.html">markdown</a>, writing <a href="https://aeturrell.github.io/coding-for-economists/wrkflow-quarto.html">quarto</a> (.qmd) files, getting syntax highlighting and peerless language support (eg auto-completion), getting peerless git support, working with a <a href="https://github.com/features/copilot">co-pilot</a>, <a href="https://visualstudio.microsoft.com/services/live-share/">working with collaborators in real-time</a>, or even running <a href="../../../blog/posts/setting-up-r-in-vscode/index.html">R code in a modern REPL</a>. For me, it’s the best IDE by some way. One of its strongest features for data science is its ability to do interactive window coding with scripts <em>and</em> notebooks. Yet most online or cloud-based data science services focus only on notebooks. Wouldn’t it be great if there was a reliable way to use all of Visual Studio Code’s features in the cloud?<sup>1</sup></p>
<div class="no-row-height column-margin column-container"><div id="fn1"><p><sup>1</sup>&nbsp;If you have a GitHub account you can just press ‘.’ on a repo and it will load up something that looks a lot like Visual Studio Code but this can’t run code, it’s only a text editor.</p></div><div id="fn2"><p><sup>2</sup>&nbsp;We’ll be using Google Cloud Compute but the concepts will be similar for other cloud services. You should also note that using cloud services is usually charged though free credits are often available for new accounts. Also, this has only been tested on MacOS.</p></div></div><p>In this blog post, I’ll show you how to set up Visual Studio Code on your desktop so that it connects remotely to a cloud virtual machine. This will allow you to code on the cloud as if you were developing locally.<sup>2</sup></p>
<p>Why should you care? Because having a reproducible environment on the cloud that you can use with your cutting-edge tools is pretty nifty!</p>
<p>There are pre-made resources out there that do this already such as <a href="https://github.com/features/codespaces">Github Codespaces</a> and <a href="https://www.gitpod.io/">Gitpod</a>, which even has a free tier. They are incredible and well worth checking out for, more or less, a one click solution for fully-featued Visual Studio Code in the cloud. But they’re probably a bit more pricey than a roll your own version, clearly have less flexibility in terms of virtual machines, and don’t come with the nice data backends that are provided by a huge cloud provider (yet).</p>
<section id="interactive-window-coding" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="interactive-window-coding">Interactive Window Coding</h2>
<p>If you’re not familiar with it, the <em>interactive window</em><sup>3</sup> is a convenient and flexible way to run code that you have open in a script or that you type directly into the interactive window code box. It allows you to remix, explore, and try out code one line at a time or in chunks or as a whole script–which makes it perfect for analysis and data science on those occassions when you don’t need text alongside code. You can find out more about <a href="https://aeturrell.github.io/python4DS/introduction.html#installing-visual-studio-code-to-run-python">how to set up interactive window coding in Python with Visual Studio Code here</a> (and R <a href="http://aeturrell.com//2021/11/04/setting-up-r-in-vscode/">here</a>). More generally, Visual Studio Code is a fantastic environment for doing data science in and many of its features eventually got adopted by other tools.</p>
<div class="no-row-height column-margin column-container"><div id="fn3"><p><sup>3</sup>&nbsp;This is actually a special kind of ipython console.</p></div></div><div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://github.com/aeturrell/coding-for-economists/blob/main/img/vscode_layout.png?raw=true" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Typical layout of Visual Studio Code</figcaption>
</figure>
</div>
<p>The figure above shows the typical layout of Visual Studio Code. Number 5 is the interactive Python window, which is where code and code outputs appear after you select and execute them from a script (number 3) or just by writing in the box ‘Type code here’ box.</p>
</section>
<section id="setting-up" class="level2">
<h2 class="anchored" data-anchor-id="setting-up">Setting Up</h2>
<p>There are two pieces to this puzzle: Visual Studio Code and Google Cloud.</p>
<p>First, grab Visual Studio Code for your local computer (ie your non-cloud computer) and whatever extensions you fancy, but you’ll need <a href="https://code.visualstudio.com/docs/remote/ssh">the remote explorer (SSH)</a> at a minimum.</p>
<p>You’ll also need to install the <a href="https://cloud.google.com/sdk">Google Cloud SDK</a> (a command line tool for interacting with GCP; SDK stands for ‘software development kit’) on your computer. Once you have downloaded and installed it, run <code>gcloud init</code> to set it up. This is the point at which your computer becomes trusted to do things to your GCP account.</p>
<p>Anything the Google Cloud SDK can do, Python (and C, C++, C#, Go, Java, Node.js, PHP, and Ruby) can do too, if you’d rather work with them. (R isn’t supported by the SDK yet.) However, here we’ll follow the instructions for doing this all in the command line.</p>
</section>
<section id="creating-a-cloud-vm-instance" class="level2">
<h2 class="anchored" data-anchor-id="creating-a-cloud-vm-instance">Creating a Cloud VM Instance</h2>
<p>You’ll need a Google Cloud Platform (GCP) account. New accounts get some free credit but you’ll typically need to add some billing information. Set up a new project on the Google Cloud Console, and enable the ‘Google Cloud Compute API’ (found under VM Instances).</p>
<p>Now you will set up a virtual machine. You can do this either through the set of menus or via the command line. For the menu options, go to the VM instances page and click ‘Create Instance’, then fill in the form with info on the computer you want.</p>
<p>If you’re going for the command line approach, you can do this all in one fell swoop by running</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> compute instances create instance-name <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--project</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PROJECT-NAME <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--zone</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>europe-west2-c <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--machine-type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>e2-standard-2 <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--network-interface</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>network-tier=PREMIUM,subnet=default <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--maintenance-policy</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>MIGRATE <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--provisioning-model</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>STANDARD <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--service-account</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PROJECT-NUMBER-compute@developer.gserviceaccount.com <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--scopes</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>https://www.googleapis.com/auth/devstorage.read_only,https://www.googleapis.com/auth/logging.write,https://www.googleapis.com/auth/monitoring.write,https://www.googleapis.com/auth/servicecontrol,https://www.googleapis.com/auth/service.management.readonly,https://www.googleapis.com/auth/trace.append <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--create-disk</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>auto-delete=yes,boot=yes,device-name=instance-1,image=projects/debian-cloud/global/images/debian-11-bullseye-v20220920,mode=rw,size=10,type=projects/chipshop/zones/us-central1-a/diskTypes/pd-balanced <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--no-shielded-secure-boot</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--shielded-vtpm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--shielded-integrity-monitoring</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--reservation-affinity</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>any</span></code></pre></div>
<p>where <code>instance-name</code> is the name you give the instance (you need to choose this now), <code>PROJECT-NAME</code> is the name of the project you’ve created, and <code>PROJECT-NUMBER</code> is the project number of that project. Note that these are fairly default settings with a London-based e2 machine running Bullseye Debian (a type of Linux).</p>
<p>If you did the above and all has worked you should now be able to see a new line in the VM instances page on the GCP pages that has a ‘running’ symbol under ‘Status’; yes, your VM is already running! (And racking up costs but this is a small machine so not much cost per hour–but you may wish to turn on billing alerts at this point!)</p>
<p>You can jump straight to your new VM’s command line using Google’s simple approach by clicking on their ‘SSH’ button on the line where your running VM instance appears on the VM instances page. But this only gets a command line, not Visual Studio Code…</p>
</section>
<section id="connecting-to-a-running-gcp-virtual-machine-instance-from-visual-studio-code" class="level2">
<h2 class="anchored" data-anchor-id="connecting-to-a-running-gcp-virtual-machine-instance-from-visual-studio-code">Connecting to a running GCP Virtual Machine Instance from Visual Studio Code</h2>
<p>Okay, so your GCP VM instance is running and now you’re going to connect to it with Visual Studio Code.</p>
<p>First, we need to set up the SSH connection between your computer and your running cloud VM; essentially a way for them to talk to each other. You can find out more about SSH authentication <a href="https://www.ssh.com/academy/ssh/protocol">here</a>. Open up VS Code and its integrated terminal (<kbd>ctrl</kbd>+<kbd>`</kbd> shortcut on a Mac). Make sure you are in the correct GCP project by running</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> config set project PROJECT-NAME</span></code></pre></div>
<p>on the command line. If you already tried this process and aborted it, you may need to remove your existing Google keys; they’re stored in the directory <code>~/.ssh/</code>. Now create the SSH settings for your new instance using</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb3-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> compute config-ssh</span></code></pre></div>
<p>You’ll get a message like</p>
<pre class="text"><code>WARNING: The private SSH key file for gcloud does not exist.
WARNING: The public SSH key file for gcloud does not exist.
WARNING: You do not have an SSH key for gcloud.
WARNING: SSH keygen will be executed to generate a key.
Generating public/private rsa key pair.
Enter passphrase (empty for no passphrase): [can enter one here]
Enter same passphrase again: [can enter one here]
Your identification has been saved in /Users/USERNAME/.ssh/google_compute_engine
Your public key has been saved in /Users/USERNAME/.ssh/google_compute_engine.pub
The key fingerprint is:
SHA256:YOUR-FINGERPRINT USERNAME@LOCAL-COMPUTER-NAME
The key's randomart image is:
+---[RSA 3072]----+
|                 |
| TEXT-ART-IMAGE  |
|                 |
+----[SHA256]-----+
Updating project ssh metadata...⠼Updated [https://www.googleapis.com/compute/v1/projects/PROJECT-NAME].  
Updating project ssh metadata...done.
You should now be able to use ssh/scp with your instances.
For example, try running:

  $ ssh INSTANCE-NAME.europe-west2-c.PROJECT-NAME</code></pre>
<p>Okay, this means your connection configurations have been set up successfuly. (Note: don’t run <code>ssh INSTANCE-NAME.europe-west2-c.PROJECT-NAME</code> directly on your command line, as you will just ssh into the cloud instance’s command line rather than open Visual Studio Code in the VM.)</p>
<p>Within Visual Studio Code on your local computer, go to the remote explorer tab, which you can find on the left hand side (you’ll need to have installed the remote explorer package for SSH). Choose ‘SSH Targets’ from the drop-down menu at the top. Then you should see an entry listed for INSTANCE-NAME.europe-west2-c.PROJECT-NAME. Right-click on it and choose ‘connect to host in new window’.</p>
<p>A new Visual Studio Code window will open and you will be asked whether you recognise the VM. Then you will be asked for a passphrase, if you chose to create one earlier.</p>
<p>Congratulations, you should now be on your VM instance using Code! You can check because the green text in the bottom left-hand corner of Visual Studio Code should read</p>
<blockquote class="blockquote">
<p>SSH: INSTANCE-NAME.europe-west2-c.PROJECT-NAME</p>
</blockquote>
<p>First, you’ll want to open up a folder to work in. Perhaps you want to git clone a repository and then open that? Git doesn’t come pre-installed so you’ll need to run <code>sudo apt-get install git</code> first. You can just open the home directory too. Either way, open up a folder.</p>
</section>
<section id="using-python-on-your-cloud-vm-instance" class="level2">
<h2 class="anchored" data-anchor-id="using-python-on-your-cloud-vm-instance">Using Python on your Cloud VM Instance</h2>
<p>If you used Google’s image “debian-11-bullseye-v20220920” then it will come with a version of Python already installed (Python 3.9.12) and you can check the version with <code>python -V</code> on the command line. Note that <strong>pip</strong> (used for installing Python packages) may not itself be installed–you can install it on Debian linux by running <code>sudo apt-get install pip</code> on the command line.</p>
<p>Next, you will need to install the Visual Studio Code <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">Python extension</a> (65 million installs and counting) on <em>the cloud instance</em>. Do that, then open up a Python script (you can run <code>echo "print('hello world')" &gt; hello.py</code> if you need inspiration for a simple script).</p>
<p>The interactive window depends on one package, <code>ipykernel</code>, that you probably don’t have already. Once you’ve installed <strong>pip</strong>, you’ll need to run <code>pip install ipykernel</code> on the command line.</p>
<p>Now, select the code you’d like to run in your Python script, right-click, and select ‘Run Selection/Line in Interactive Window’. You can also hit <kbd>shift</kbd> + <kbd>enter</kbd> with the code selected.</p>
<p>You should find that a Visual Studio Code interactive window launches and runs your code on the cloud!</p>
<p>And notebooks work too–try <code>touch notebook.ipynb</code> on the command line, opening the file in Visual Studio Code, and then add <code>print("hello world")</code> to the first cell and run it.</p>
<section id="setting-up-conda" class="level3">
<h3 class="anchored" data-anchor-id="setting-up-conda">Setting up conda</h3>
<p>Lots of data scientists use the Anaconda distribution of Python. It’s not on the base image we’re using, “debian-11-bullseye-v20220920”, by default, though of course you could choose an image that does have it if you want, or roll your own, when you create your VM instance. If you’re using this Debian option though, and you want to install Anaconda after the fact, the instructions are below. (We’ll work with the light-weight Anaconda version called ‘miniconda’.)</p>
<p>First you’ll need the <code>wget</code> Linux programme. Run</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb5-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">sudo</span> apt-get install wget</span></code></pre></div>
<p>to grab that. Next, let’s get the install script for Miniconda and run it:</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">bash</span> Miniconda3-latest-Linux-x86_64.sh</span></code></pre></div>
<p>This will install Miniconda. Relaunch the terminal and you should see the familiar <code>(base)</code> prompt appearing so that your VM command line prompt now looks like</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">base</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">USERNAME@INSTANCE-NAME:~$</span></span></code></pre></div>
<p>Another way to check is to run <code>conda info</code>, which will tell you all about your conda installation.</p>
<p>Now, due to the license on Anaconda, you may wish to set <code>conda install</code> to only grab packages from the <code>conda-forge</code> channel. You can do that with a couple of commands:</p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb8-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> config <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--add</span> channels conda-forge</span></code></pre></div>
<p>to add conda forge as a channel for package downloads and put it first, and</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb9-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">conda</span> config <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--set</span> channel_priority strict</span></code></pre></div>
<p>to get strict channel priority of conda forge, ie to always prefer that channel no matter what package is being installed. (It’s a bad idea to mix the conda forge and default channels.)</p>
</section>
</section>
<section id="moving-data-in-and-out-of-your-vm" class="level2">
<h2 class="anchored" data-anchor-id="moving-data-in-and-out-of-your-vm">Moving Data In and Out of Your VM</h2>
<p>Data scientists can’t data science without data.</p>
<section id="putting-data-on-the-cloud" class="level3">
<h3 class="anchored" data-anchor-id="putting-data-on-the-cloud">Putting Data on the Cloud</h3>
<p>There are many types of cloud data storage; here, we’ll just use the most popular (but perhaps not the best for your particular use case so worth reading up on what would best serve your requirements).</p>
<p>To create a new cloud data bucket, which persists separately to any VM instances, the command is</p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb10-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> storage buckets create gs://BUCKET_NAME <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--project</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PROJECT_ID <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--location</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>BUCKET_LOCATION</span></code></pre></div>
<p>For this project, we’ll accept the defaults except for setting the location to “europe-west2”. To upload data, it’s</p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb11-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> storage cp OBJECT_LOCATION gs://DESTINATION_BUCKET_NAME/</span></code></pre></div>
<p>For example, to move a csv file called “glue.csv” that is in the working directory of the terminal,</p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb12-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">glcoud</span> storage cp glue.csv gs://DESTINATION_BUCKET_NAME/</span></code></pre></div>
<p>After running this, you should be able to see the data appear in your bucket. The link to view it in the Google Cloud Console will be</p>
<pre class="text"><code>https://console.cloud.google.com/storage/browser?project=PROJECT-NAME&amp;prefix=</code></pre>
<p>and then click on the name you gave your bucket.</p>
</section>
<section id="moving-data-from-a-bucket-to-your-vm-and-back" class="level3">
<h3 class="anchored" data-anchor-id="moving-data-from-a-bucket-to-your-vm-and-back">Moving Data from a Bucket to Your VM (and back)</h3>
<p>Okay, so now your data is on the cloud–but it’s not on your VM! We’re back in Visual Studio Code on the VM, and using the integrated terminal. To copy data from the bucket to the VM, the command to use <em>on the terminal in the VM</em> is</p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb14-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> storage cp <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> gs://BUCKET-NAME/ DESTINATION-FOLDER/</span></code></pre></div>
<p>The <code>-r</code> flag makes this recursive, while <code>cp</code> means copy. So, following our example you could make a directory data <code>mkdir data</code> and then run</p>
<div class="sourceCode" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb15-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> storage cp <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-r</span> gs://BUCKET-NAME/ data/</span></code></pre></div>
<p>To move any data back to the bucket when you are done is the same command you used for moving data onto the bucket in the first place, ie</p>
<div class="sourceCode" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb16-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">glcoud</span> storage cp FILE-NAME gs://DESTINATION_BUCKET_NAME/</span></code></pre></div>
</section>
</section>
<section id="finishing" class="level2">
<h2 class="anchored" data-anchor-id="finishing">Finishing</h2>
<p>Remember: best practice is to treat a cloud instance as temporary. Shunt data you want to save in and out when you use it, and use version control for code. And most of all, <strong>don’t forget to turn your VM instance off when you’ve finished using it!</strong></p>
<p>Hopefully this has been a useful summary of how to use Visual Studio Code in the cloud, especially using the interactive window for Python coding. Happy coding!</p>


</section>


 ]]></description>
  <category>code</category>
  <category>research</category>
  <category>cloud</category>
  <category>python</category>
  <category>rstats</category>
  <guid>https://www.aeturrell.com/blog/posts/visual-studio-code-in-the-cloud/</guid>
  <pubDate>Tue, 27 Sep 2022 23:00:00 GMT</pubDate>
</item>
<item>
  <title>Writing a Research Blog Post</title>
  <dc:creator>Arthur Turrell</dc:creator>
  <link>https://www.aeturrell.com/blog/posts/research-blogs/</link>
  <description><![CDATA[ 





<section id="introduction" class="level2">
<h2 class="anchored" data-anchor-id="introduction">Introduction</h2>
<p>In this post, you will find hints and tips for writing impactful blog posts that summarise research or analysis. This is a cross-post with a new page on <em>Coding for Economists</em> titled <a href="https://aeturrell.github.io/coding-for-economists/craft-research-blogs.html">Research Blog Posts</a>.</p>
<p>To make the distinction with blogging more generally, the chapter is called ‘research blog posts’, but the advice could apply to any complete analytical project. As in other chapters on craft, although the text below may say ‘do this’ or ‘don’t do that’, there are few universal rules in writing and what’s appropriate for your project may be something completely different. But following these guidelines should give you a solid place to start if you need one.</p>
<p>Your first question is likely to be “why blog about my research?”, and it’s a good one. Blogs are a really useful way of getting your work to a wider audience, including the general public—either directly or via journalists and aggregators. They will drive people to your research, make your research findings more shareable, and, as a side benefit, help you improve your communication skills too. The rest of the chapter will, hopefully, take some of the pain out of blogging.</p>
<p>This chapter has benefitted from numerous sources, including conversations with John Lewis at the Bank of England, this LSE <a href="https://blogs.lse.ac.uk/impactofsocialsciences/2016/01/25/how-to-write-a-blogpost-from-your-journal-article/">blog</a> on writing blogposts, and another <a href="https://www.transient-spaces.org/blog/blog-how-to-write-a-great-blog-post-on-your-research-topic-a-brief-guide-in-9-steps/">blog</a> with tips on research blog posts from the transient spaces and cities group at Innsbruck.</p>
</section>
<section id="dissemination" class="level2 page-columns page-full">
<h2 class="anchored" data-anchor-id="dissemination">Dissemination</h2>
<p>The reason most people take the trouble to present and summarise their analytical work in the form of a research blog post is to help find a wider audience for it.</p>
<p>It’s helpful to think of how many people will engage with the dissemination outputs you create as following the <em>inverted pyramid of research dissemination</em>. Note that these are outputs you create and control, so media articles or newsletters that others have written don’t appear in this model.</p>
<p>At the top layer of the pyramid, you can draw a large number of people in via social media, including people who might not otherwise have ever thought about or seen what you’re doing. This is quite unusual; for a blog post, they might have at least decided to visit a related website, but for social media they could just be scrolling through Twitter or TikTok.</p>
<p>At the next level down in the pyramid, you get another opportunity to pull probably slightly fewer people into somewhat more detail with a blog post, the subject of this chapter.</p>
<p>Below the blog post layer is the paper and, given a large number of papers go uncited, you may be lucky if tens of people read that front-to-back. Finally, right at the bottom—though no less useless for being so—is the code and/or replication packet, to be seen by a small number.</p>
<div class="quarto-figure quarto-figure-center page-columns page-full">
<figure class="figure page-columns page-full">
<p><img src="https://www.aeturrell.com/blog/posts/research-blogs/res_blog_pyramid.png" class="img-fluid figure-img"></p>
<figcaption class="margin-caption">Dissemination and blogs follow an inverted pyramid structure</figcaption>
</figure>
</div>
<p>Each stage of the inverted pyramid is valuable, but it’s important to recognise that:</p>
<ul>
<li>without the bottom layers, the top layers might not be very solid, so be wary of putting out arguments and conclusions that don’t rest on deeper analysis</li>
<li>most people will only ever engage with the upper layers; they don’t have time to read your paper but they might read a thread or blog post</li>
<li>more people will know about your work if those upper laters exist, and they will push more people down to lower layers</li>
<li>most people doing analysis or research want people to read it and be influenced by it</li>
</ul>
<p>In this view of dissemination, you can think of a research blog post as a poster for your deeper analysis: it is a punchier, shorter, and likely more exciting version that can also signposts people to your paper should you catch their attention. Popular blog site VoxEU uses the description “research-based policy analysis and commentary”.</p>
</section>
<section id="tips-for-writing-a-research-blog-post" class="level2">
<h2 class="anchored" data-anchor-id="tips-for-writing-a-research-blog-post">Tips for Writing a Research Blog Post</h2>
<p>Alongside the inverted pyramid of dissemination, above, there is another inverted pyramid that gives a suggested structure for research blog posts. This following the classic inverted pyramid of news as used by journalists. Just as with dissemination of research more broadly, more eyeballs will reach the top layer than the bottom, and more of the detail will emerge in the bottom layers.</p>
<p>If it is to effective, your blog post cannot be too long; 800 words a good target, and definitely no more than 1500. Many places that you would want to publish the blog will have limits anyway, but even if it’s on your own website, if you’re summarising a research project you probably want to make it <em>substantially</em> shorter than the paper.</p>
<p>Let’s run over some other general tips for writing good research blog posts:</p>
<ul>
<li><p>Don’t just repeat your paper; for a start, there’s not space to do this! You need to pick out one key feature and focus on it.</p></li>
<li><p>Think about your audience. It’s going to be a lot wider than your paper, and it’s going to depend a lot on the venue where the post appears; likewise, the platform you choose to put out your post will determine what audience you will reach.</p></li>
<li><p>Motivate the piece for a wider audience. While for a paper or deep and detailed piece of analysis, you may be able to rely on others as passionate about the topic or question as you are to get into it of their own volition, you will need to link your work to broader issues and bigger debates if you want to get readers.</p></li>
<li><p>If someone is reading an economics or coding or even analysis blog, then you probably <em>can</em> assume they have some analytical training: so keep the motivation crisp, specific, and short.</p></li>
<li><p>Good blogs tell a story. Craft the post into a narrative that puts the spotlight on the main finding that you want to communicate.</p></li>
<li><p>While many use a more formal style of writing for papers, it’s good to use a more punchy and relaxed style when writing a blog.</p></li>
<li><p>Keep it concise.</p></li>
<li><p>Mostly use the active voice, so that the subject of the verb performs the action (rather than the subject receiving the action). An example of the difference is “The dog chased the economist” versus “The economist was chased by the dog” for active and passive respectively.</p></li>
<li><p>There are many ways to make your paragraphs lead a reader clearly through your post, but a solid and reliable way to do this is to ensure that the whole piece would make sense, and follow logically, if you only read the first sentence of each paragraph.</p></li>
<li><p>Link to other blogs and research freely.</p></li>
<li><p>Don’t use jargon or acronyms! Be really strict with your prose; you may not even realise that some words you write frequently <em>are</em> jargon.</p></li>
<li><p>Well-written and engaging blogs will have a much bigger impact. Writing concise, punchy pieces does take time and practice.</p></li>
<li><p>Figures and tables (floats) should be used sparingly, be really clear, and should tell the story. Take a look at the chapter on narrative data visualisation to get a sense of what works. Any floats should be able to stand alone without the text too. If re-using floats from a paper or report, strip out elements that are superfluous to the narrative of the post.</p></li>
<li><p>Some blogs require that references to other work only appear as hyperlinks—something to bear in mind as you’re drafting.</p></li>
<li><p>Just as with papers, readers of your blog post will want to know what is different today, now you’ve done this work, as compared to yesterday, when you hadn’t. Is what you discovered a big effect? Does it have big implications?</p></li>
<li><p>The threshold is a lot lower than you think! A blog post that isn’t perfect will still drive more traffic to your work than one that wins a Pulitzer. Also, experience is easily the best way to improve for next time.</p></li>
</ul>
<p>Finally, two extremely good general resources on writing are<sup>1</sup> and<sup>2</sup>.</p>
</section>
<section id="structuring-a-research-blog-post" class="level2">
<h2 class="anchored" data-anchor-id="structuring-a-research-blog-post">Structuring a Research Blog Post</h2>
<p>The blog post pyramid in the figure above gives a good structure to work from, although experienced writers may want to get more creative.</p>
<p>Let’s run through the parts:</p>
<ul>
<li><p>Inviting title: this needs to strike a balance between being total clickbait and accurately reflecting the content of the post. Clickbait titles would include purposefully controversial opinions or lists along the lines of “Here are 9 things you never knew about central bank reserves; number 7 will shock you”. In the internet age, it’s also a good idea if it contains keywords that will help the post be picked up by a Google search: what would <em>you</em> search for to find blog posts on this topic?</p></li>
<li><p>Punchy intro: reel the reader in within the first few sentences and then get straight onto the main message and headlines. A three or four sentence summary opening paragraph works well; use it like a shop window for the rest of your piece, covering everything the reader is likely to find inside. Another way to think about it is as a trailer for the rest of the piece. Of course, your opening needs to naturally lead into the rest of the blog post too.</p></li>
<li><p>Core story: this is where you can relay what you did, found out, or changed in more detail. This is where you might have a sentence or two about the methodology, unless the methodology <em>is</em> the story. It’s also where the results and evidence that support the argument or narrative of the overall piece will appear.</p></li>
<li><p>Caveats: there are limitations to any study or analysis, and sometimes they’re important, and need to be included. Journalists read and notice blogs so, if you don’t want your work to be misunderstood, you do need to be careful about what you’re <em>not</em> saying or where there are obvious leaps in reasoning that can <em>not</em> be justified by the evidence presented. You should be frank about the shortcomings; you don’t want the economics equivalent of the <a href="https://twitter.com/justsaysinmice?lang=en">‘in mice’ treatment</a>.</p></li>
<li><p>Take away message and implications: as with the conclusion in a paper, this is the point where you’re allowed to be a (tiny) bit more speculative, draw some wider conclusions, and connect what you’ve found up with what the bigger picture looks like post your stunning insights. Extra points if you can cleverly bring the end of the piece full circle to an idea or notion that you brought in right at the beginning: this gives readers the written equivalent of a <a href="https://en.wikipedia.org/wiki/Cadence">perfect cadence</a> in music; the piece sounds finished. And, like in music, you may wish to vary this technique for effect.</p></li>
</ul>
<p>There are many bits of your paper that won’t make it into the blog post. Much of the methodology will need to be jettisoned, ditto for the literature section unless is extremely relevant to the story you’re telling.</p>
</section>
<section id="where-to-put-your-blog-piece" class="level2">
<h2 class="anchored" data-anchor-id="where-to-put-your-blog-piece">Where to put your blog piece</h2>
<p>So you’ve got an idea for a killer blog summarising your recent paper. Where can you unleash your blog piece on the world?</p>
<p>The first option is to host it yourself on your own website or on a free service such as <a href="https://www.blogger.com/">Google’s Blogger</a>. If you want to host a blog (and homepage) yourself, a combination of Github Pages and Jekyll is a good way to do it; the <a href="https://github.com/alshedivat/al-folio">Jekyll folio theme</a> is particularly popular and will automatically ingest a .bib file of references but there are <a href="https://jekyll-themes.com/free/">plenty of others</a>. Once setup, you write blogs in markdown, put them in a folder, and commit them: the rest is automatic. As an aside, if you want to blog in code using a self-hosted service that accepts markdown files, you can export Jupyter Notebooks to markdown using the techniques showcased in {ref}<code>auto-reports</code>.</p>
<p>Now although you get lots of control with a self-hosted blog, there are major downsides. Unless you have a large social media following already, posts on there might not find many readers. So what are your other options?</p>
<p>If you are at a central bank or have a co-author who is, many of them have blogs with big readerships. <a href="https://bankunderground.co.uk/">Bank Underground</a> (Bank of England) and <a href="https://libertystreeteconomics.newyorkfed.org/">Liberty Street Economics</a> (New York Fed) are two worth checking out. Many other institutions have blogs too, like various parts of the UK public sector—the <a href="https://blog.ons.gov.uk/">ONS’ blog</a>, for instance. Most universities have some sort of blog—<a href="https://warwick.ac.uk/fac/soc/economics/research/centres/cage/">CAGE</a> at the University of Warwick is a good example—and, for universities that don’t have their own, there’s <a href="https://theconversation.com/become-an-author">The Conversation</a>.</p>
<p><a href="https://voxeu.org/">VoxEU</a> has a very large economics readership and is solely focused on research blogs but the website is hardly encouraging when it comes to submissions: “Most Vox columns are commissioned directly by the Editor-in-Chief, but Vox does post a few unsolicited columns.” There’s also a <a href="https://voxdev.org/">VoxDev</a> for development economics, and, happily, this outlet actively invites researchers to submit pieces.</p>
<p>Bigger overall but less likely to reach an economics audience specifically, there’s <a href="https://medium.com/">Medium</a> and, for a more coding-oriented crowd, <a href="https://dev.to/">Dev.to</a>.</p>
<div id="refs" class="references csl-bib-body" data-line-spacing="2">
<div id="ref-zinsser2006writing" class="csl-entry">
<div class="csl-left-margin">1. </div><div class="csl-right-inline">Zinsser, W. <em>On writing well: The classic guide to writing nonfiction</em>. (New York, NY, 2006).</div>
</div>
<div id="ref-white1972elements" class="csl-entry">
<div class="csl-left-margin">2. </div><div class="csl-right-inline">White, E. B. &amp; Strunk, W. <em>The elements of style</em>. (Macmillan New York, 1972).</div>
</div>
</div>


</section>

 ]]></description>
  <category>blogging</category>
  <category>research</category>
  <category>writing</category>
  <guid>https://www.aeturrell.com/blog/posts/research-blogs/</guid>
  <pubDate>Mon, 21 Feb 2022 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
